
test02.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006b64  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000047c  08006d14  08006d14  00007d14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007190  08007190  000090ac  2**0
                  CONTENTS
  4 .ARM          00000008  08007190  08007190  00008190  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007198  08007198  000090ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007198  08007198  00008198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800719c  0800719c  0000819c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000ac  20000000  080071a0  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000090ac  2**0
                  CONTENTS
 10 .bss          00000b20  200000ac  200000ac  000090ac  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000bcc  20000bcc  000090ac  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000090ac  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001684e  00000000  00000000  000090dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000362b  00000000  00000000  0001f92a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013f8  00000000  00000000  00022f58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f62  00000000  00000000  00024350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027baa  00000000  00000000  000252b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000196c5  00000000  00000000  0004ce5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e5b91  00000000  00000000  00066521  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0014c0b2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005e5c  00000000  00000000  0014c0f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000060  00000000  00000000  00151f54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000ac 	.word	0x200000ac
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08006cfc 	.word	0x08006cfc

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000b0 	.word	0x200000b0
 80001ec:	08006cfc 	.word	0x08006cfc

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <adc_init>:
	{ .cbf = adc_dummy 	},
	{ .cbf = NULL			}
};

void adc_init(void)
{
 80005a0:	b480      	push	{r7}
 80005a2:	af00      	add	r7, sp, #0
}
 80005a4:	bf00      	nop
 80005a6:	46bd      	mov	sp, r7
 80005a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ac:	4770      	bx	lr
	...

080005b0 <adc_regcbf>:

void adc_regcbf(uint16_t idx, ADC_CBF cbf)
{
 80005b0:	b480      	push	{r7}
 80005b2:	b083      	sub	sp, #12
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	4603      	mov	r3, r0
 80005b8:	6039      	str	r1, [r7, #0]
 80005ba:	80fb      	strh	r3, [r7, #6]
	gAdcObjs[idx].cbf = cbf;
 80005bc:	88fb      	ldrh	r3, [r7, #6]
 80005be:	4a05      	ldr	r2, [pc, #20]	@ (80005d4 <adc_regcbf+0x24>)
 80005c0:	00db      	lsls	r3, r3, #3
 80005c2:	4413      	add	r3, r2
 80005c4:	683a      	ldr	r2, [r7, #0]
 80005c6:	605a      	str	r2, [r3, #4]
}
 80005c8:	bf00      	nop
 80005ca:	370c      	adds	r7, #12
 80005cc:	46bd      	mov	sp, r7
 80005ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d2:	4770      	bx	lr
 80005d4:	20000000 	.word	0x20000000

080005d8 <adc_thread>:

void adc_thread(void *arg)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b084      	sub	sp, #16
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
	(void)arg;

	static uint16_t value = 100;

	for (int i=0; gAdcObjs[i].cbf != NULL; i++) {
 80005e0:	2300      	movs	r3, #0
 80005e2:	60fb      	str	r3, [r7, #12]
 80005e4:	e019      	b.n	800061a <adc_thread+0x42>
		value+=100;
 80005e6:	4b13      	ldr	r3, [pc, #76]	@ (8000634 <adc_thread+0x5c>)
 80005e8:	881b      	ldrh	r3, [r3, #0]
 80005ea:	3364      	adds	r3, #100	@ 0x64
 80005ec:	b29a      	uxth	r2, r3
 80005ee:	4b11      	ldr	r3, [pc, #68]	@ (8000634 <adc_thread+0x5c>)
 80005f0:	801a      	strh	r2, [r3, #0]
		gAdcObjs[i].value = value;
 80005f2:	4b10      	ldr	r3, [pc, #64]	@ (8000634 <adc_thread+0x5c>)
 80005f4:	8819      	ldrh	r1, [r3, #0]
 80005f6:	4a10      	ldr	r2, [pc, #64]	@ (8000638 <adc_thread+0x60>)
 80005f8:	68fb      	ldr	r3, [r7, #12]
 80005fa:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
		gAdcObjs[i].cbf((void *)&gAdcObjs[i].value);
 80005fe:	4a0e      	ldr	r2, [pc, #56]	@ (8000638 <adc_thread+0x60>)
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	00db      	lsls	r3, r3, #3
 8000604:	4413      	add	r3, r2
 8000606:	685b      	ldr	r3, [r3, #4]
 8000608:	68fa      	ldr	r2, [r7, #12]
 800060a:	00d2      	lsls	r2, r2, #3
 800060c:	490a      	ldr	r1, [pc, #40]	@ (8000638 <adc_thread+0x60>)
 800060e:	440a      	add	r2, r1
 8000610:	4610      	mov	r0, r2
 8000612:	4798      	blx	r3
	for (int i=0; gAdcObjs[i].cbf != NULL; i++) {
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	3301      	adds	r3, #1
 8000618:	60fb      	str	r3, [r7, #12]
 800061a:	4a07      	ldr	r2, [pc, #28]	@ (8000638 <adc_thread+0x60>)
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	00db      	lsls	r3, r3, #3
 8000620:	4413      	add	r3, r2
 8000622:	685b      	ldr	r3, [r3, #4]
 8000624:	2b00      	cmp	r3, #0
 8000626:	d1de      	bne.n	80005e6 <adc_thread+0xe>
	}
}
 8000628:	bf00      	nop
 800062a:	bf00      	nop
 800062c:	3710      	adds	r7, #16
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	20000010 	.word	0x20000010
 8000638:	20000000 	.word	0x20000000

0800063c <adc_dummy>:

//--------------
// adc_hw()

static void adc_dummy(void *)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b082      	sub	sp, #8
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
	printf("I'm ADC dummy\r\n");
 8000644:	4803      	ldr	r0, [pc, #12]	@ (8000654 <adc_dummy+0x18>)
 8000646:	f005 fbcf 	bl	8005de8 <puts>
	return;
 800064a:	bf00      	nop
}
 800064c:	3708      	adds	r7, #8
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	08006d14 	.word	0x08006d14

08000658 <app>:

// static : 내부 변수
static void (*mode_func)(void);  // 함수 포인터 변수

void app(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
	printf("System Started.....!\r\n");
 800065c:	4805      	ldr	r0, [pc, #20]	@ (8000674 <app+0x1c>)
 800065e:	f005 fbc3 	bl	8005de8 <puts>

	app_mode(1); // diagnostic mode is default.
 8000662:	2001      	movs	r0, #1
 8000664:	f000 f83a 	bl	80006dc <app_mode>

	app_init();
 8000668:	f000 f808 	bl	800067c <app_init>

	while (1) {
		mode_func();
 800066c:	4b02      	ldr	r3, [pc, #8]	@ (8000678 <app+0x20>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	4798      	blx	r3
 8000672:	e7fb      	b.n	800066c <app+0x14>
 8000674:	08006d24 	.word	0x08006d24
 8000678:	200000c8 	.word	0x200000c8

0800067c <app_init>:
	}
}

void app_init(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
	io_exti_init();
 8000680:	f000 faae 	bl	8000be0 <io_exti_init>
	polling_init();
 8000684:	f000 fddc 	bl	8001240 <polling_init>
	button_init();
 8000688:	f000 f84a 	bl	8000720 <button_init>
	tim_init();
 800068c:	f001 f998 	bl	80019c0 <tim_init>
	uart_init();
 8000690:	f001 f9c4 	bl	8001a1c <uart_init>
	cli_init();
 8000694:	f000 fa14 	bl	8000ac0 <cli_init>
}
 8000698:	bf00      	nop
 800069a:	bd80      	pop	{r7, pc}

0800069c <app_normal>:

static void app_normal(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
	polling_thread(NULL);
 80006a0:	2000      	movs	r0, #0
 80006a2:	f000 fdd9 	bl	8001258 <polling_thread>
	button_thread(NULL);
 80006a6:	2000      	movs	r0, #0
 80006a8:	f000 f84c 	bl	8000744 <button_thread>
	tim_thread(NULL);
 80006ac:	2000      	movs	r0, #0
 80006ae:	f001 f995 	bl	80019dc <tim_thread>
	uart_thread(NULL);
 80006b2:	2000      	movs	r0, #0
 80006b4:	f001 f9f0 	bl	8001a98 <uart_thread>
	cli_thread(NULL);
 80006b8:	2000      	movs	r0, #0
 80006ba:	f000 fa0b 	bl	8000ad4 <cli_thread>
}
 80006be:	bf00      	nop
 80006c0:	bd80      	pop	{r7, pc}

080006c2 <app_diagnostic>:

static void app_diagnostic(void)
{
 80006c2:	b580      	push	{r7, lr}
 80006c4:	af00      	add	r7, sp, #0
	tim_thread(NULL);
 80006c6:	2000      	movs	r0, #0
 80006c8:	f001 f988 	bl	80019dc <tim_thread>
	uart_thread(NULL);
 80006cc:	2000      	movs	r0, #0
 80006ce:	f001 f9e3 	bl	8001a98 <uart_thread>
	cli_thread(NULL);
 80006d2:	2000      	movs	r0, #0
 80006d4:	f000 f9fe 	bl	8000ad4 <cli_thread>
}
 80006d8:	bf00      	nop
 80006da:	bd80      	pop	{r7, pc}

080006dc <app_mode>:

void app_mode(int mode)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b082      	sub	sp, #8
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
	if (mode == 0) {
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d106      	bne.n	80006f8 <app_mode+0x1c>
		printf("Mode : Normal \r\n");
 80006ea:	4808      	ldr	r0, [pc, #32]	@ (800070c <app_mode+0x30>)
 80006ec:	f005 fb7c 	bl	8005de8 <puts>
		mode_func = app_normal;
 80006f0:	4b07      	ldr	r3, [pc, #28]	@ (8000710 <app_mode+0x34>)
 80006f2:	4a08      	ldr	r2, [pc, #32]	@ (8000714 <app_mode+0x38>)
 80006f4:	601a      	str	r2, [r3, #0]
	} else {
		printf("Mode : Diagnostic \r\n");
		mode_func = app_diagnostic;
	}
}
 80006f6:	e005      	b.n	8000704 <app_mode+0x28>
		printf("Mode : Diagnostic \r\n");
 80006f8:	4807      	ldr	r0, [pc, #28]	@ (8000718 <app_mode+0x3c>)
 80006fa:	f005 fb75 	bl	8005de8 <puts>
		mode_func = app_diagnostic;
 80006fe:	4b04      	ldr	r3, [pc, #16]	@ (8000710 <app_mode+0x34>)
 8000700:	4a06      	ldr	r2, [pc, #24]	@ (800071c <app_mode+0x40>)
 8000702:	601a      	str	r2, [r3, #0]
}
 8000704:	bf00      	nop
 8000706:	3708      	adds	r7, #8
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}
 800070c:	08006d3c 	.word	0x08006d3c
 8000710:	200000c8 	.word	0x200000c8
 8000714:	0800069d 	.word	0x0800069d
 8000718:	08006d4c 	.word	0x08006d4c
 800071c:	080006c3 	.word	0x080006c3

08000720 <button_init>:
static uint32_t prev_tick;

static void button_callback_13(uint8_t rf, void *arg);

void button_init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
	prev_tick = HAL_GetTick();
 8000724:	f001 fabe 	bl	8001ca4 <HAL_GetTick>
 8000728:	4603      	mov	r3, r0
 800072a:	4a04      	ldr	r2, [pc, #16]	@ (800073c <button_init+0x1c>)
 800072c:	6013      	str	r3, [r2, #0]
	io_exti_regcbf(D_USER_BTN_EXTI_NO, button_callback_13);
 800072e:	4904      	ldr	r1, [pc, #16]	@ (8000740 <button_init+0x20>)
 8000730:	200d      	movs	r0, #13
 8000732:	f000 fa93 	bl	8000c5c <io_exti_regcbf>
}
 8000736:	bf00      	nop
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	200000d0 	.word	0x200000d0
 8000740:	0800078d 	.word	0x0800078d

08000744 <button_thread>:

void button_thread(void *arg)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
	if (flag == true) {
 800074c:	4b0b      	ldr	r3, [pc, #44]	@ (800077c <button_thread+0x38>)
 800074e:	781b      	ldrb	r3, [r3, #0]
 8000750:	2b00      	cmp	r3, #0
 8000752:	d00f      	beq.n	8000774 <button_thread+0x30>
		flag = false;
 8000754:	4b09      	ldr	r3, [pc, #36]	@ (800077c <button_thread+0x38>)
 8000756:	2200      	movs	r2, #0
 8000758:	701a      	strb	r2, [r3, #0]
		if (button_no == D_USER_BTN_EXTI_NO) {
 800075a:	4b09      	ldr	r3, [pc, #36]	@ (8000780 <button_thread+0x3c>)
 800075c:	881b      	ldrh	r3, [r3, #0]
 800075e:	2b0d      	cmp	r3, #13
 8000760:	d108      	bne.n	8000774 <button_thread+0x30>
			printf("rf:%d, no:%d\r\n", edge_rising_or_falling,  button_no);
 8000762:	4b08      	ldr	r3, [pc, #32]	@ (8000784 <button_thread+0x40>)
 8000764:	781b      	ldrb	r3, [r3, #0]
 8000766:	4619      	mov	r1, r3
 8000768:	4b05      	ldr	r3, [pc, #20]	@ (8000780 <button_thread+0x3c>)
 800076a:	881b      	ldrh	r3, [r3, #0]
 800076c:	461a      	mov	r2, r3
 800076e:	4806      	ldr	r0, [pc, #24]	@ (8000788 <button_thread+0x44>)
 8000770:	f005 faca 	bl	8005d08 <iprintf>
		}
	}
}
 8000774:	bf00      	nop
 8000776:	3708      	adds	r7, #8
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	200000cc 	.word	0x200000cc
 8000780:	200000ce 	.word	0x200000ce
 8000784:	200000cd 	.word	0x200000cd
 8000788:	08006d60 	.word	0x08006d60

0800078c <button_callback_13>:

static void button_callback_13(uint8_t rf, void *arg)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b084      	sub	sp, #16
 8000790:	af00      	add	r7, sp, #0
 8000792:	4603      	mov	r3, r0
 8000794:	6039      	str	r1, [r7, #0]
 8000796:	71fb      	strb	r3, [r7, #7]
	volatile uint32_t curr_tick = HAL_GetTick();
 8000798:	f001 fa84 	bl	8001ca4 <HAL_GetTick>
 800079c:	4603      	mov	r3, r0
 800079e:	60fb      	str	r3, [r7, #12]

	if (curr_tick - prev_tick > 120) {
 80007a0:	68fa      	ldr	r2, [r7, #12]
 80007a2:	4b0b      	ldr	r3, [pc, #44]	@ (80007d0 <button_callback_13+0x44>)
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	1ad3      	subs	r3, r2, r3
 80007a8:	2b78      	cmp	r3, #120	@ 0x78
 80007aa:	d90c      	bls.n	80007c6 <button_callback_13+0x3a>
		prev_tick = curr_tick;
 80007ac:	68fb      	ldr	r3, [r7, #12]
 80007ae:	4a08      	ldr	r2, [pc, #32]	@ (80007d0 <button_callback_13+0x44>)
 80007b0:	6013      	str	r3, [r2, #0]
		edge_rising_or_falling = rf;
 80007b2:	4a08      	ldr	r2, [pc, #32]	@ (80007d4 <button_callback_13+0x48>)
 80007b4:	79fb      	ldrb	r3, [r7, #7]
 80007b6:	7013      	strb	r3, [r2, #0]
		button_no = *(uint16_t *)arg;
 80007b8:	683b      	ldr	r3, [r7, #0]
 80007ba:	881a      	ldrh	r2, [r3, #0]
 80007bc:	4b06      	ldr	r3, [pc, #24]	@ (80007d8 <button_callback_13+0x4c>)
 80007be:	801a      	strh	r2, [r3, #0]
		flag = true;
 80007c0:	4b06      	ldr	r3, [pc, #24]	@ (80007dc <button_callback_13+0x50>)
 80007c2:	2201      	movs	r2, #1
 80007c4:	701a      	strb	r2, [r3, #0]
	}
}
 80007c6:	bf00      	nop
 80007c8:	3710      	adds	r7, #16
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	200000d0 	.word	0x200000d0
 80007d4:	200000cd 	.word	0x200000cd
 80007d8:	200000ce 	.word	0x200000ce
 80007dc:	200000cc 	.word	0x200000cc

080007e0 <cli_duty>:
	{ "help", 		1, 		cli_help, 		"help" 					},
	{ NULL,		0,		NULL,			NULL						}
};

static int cli_duty(int argc, char *argv[])
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b084      	sub	sp, #16
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
 80007e8:	6039      	str	r1, [r7, #0]
	if (argc < 2) {
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	2b01      	cmp	r3, #1
 80007ee:	dc05      	bgt.n	80007fc <cli_duty+0x1c>
		printf("Err : Arg No\r\n");
 80007f0:	4811      	ldr	r0, [pc, #68]	@ (8000838 <cli_duty+0x58>)
 80007f2:	f005 faf9 	bl	8005de8 <puts>
		return -1;
 80007f6:	f04f 33ff 	mov.w	r3, #4294967295
 80007fa:	e018      	b.n	800082e <cli_duty+0x4e>
	}
	long duty = strtol(argv[1], NULL, 10);
 80007fc:	683b      	ldr	r3, [r7, #0]
 80007fe:	3304      	adds	r3, #4
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	220a      	movs	r2, #10
 8000804:	2100      	movs	r1, #0
 8000806:	4618      	mov	r0, r3
 8000808:	f005 f9b2 	bl	8005b70 <strtol>
 800080c:	60f8      	str	r0, [r7, #12]
	if(duty > (long)999){
 800080e:	68fb      	ldr	r3, [r7, #12]
 8000810:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000814:	db05      	blt.n	8000822 <cli_duty+0x42>
		printf("Err: Range 0~999\r\n");
 8000816:	4809      	ldr	r0, [pc, #36]	@ (800083c <cli_duty+0x5c>)
 8000818:	f005 fae6 	bl	8005de8 <puts>
		return -1;
 800081c:	f04f 33ff 	mov.w	r3, #4294967295
 8000820:	e005      	b.n	800082e <cli_duty+0x4e>
	}
	else
		tim_duty_set((uint16_t)duty);
 8000822:	68fb      	ldr	r3, [r7, #12]
 8000824:	b29b      	uxth	r3, r3
 8000826:	4618      	mov	r0, r3
 8000828:	f001 f8e2 	bl	80019f0 <tim_duty_set>

	return 0;
 800082c:	2300      	movs	r3, #0
}
 800082e:	4618      	mov	r0, r3
 8000830:	3710      	adds	r7, #16
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	08006e44 	.word	0x08006e44
 800083c:	08006e54 	.word	0x08006e54

08000840 <cli_dump>:

static int cli_dump(int argc, char *argv[])
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b08a      	sub	sp, #40	@ 0x28
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
 8000848:	6039      	str	r1, [r7, #0]
	uint32_t address, length, temp;

	if (argc < 3) {
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	2b02      	cmp	r3, #2
 800084e:	dc05      	bgt.n	800085c <cli_dump+0x1c>
		printf("Err : Arg No\r\n");
 8000850:	4844      	ldr	r0, [pc, #272]	@ (8000964 <cli_dump+0x124>)
 8000852:	f005 fac9 	bl	8005de8 <puts>
		return -1;
 8000856:	f04f 33ff 	mov.w	r3, #4294967295
 800085a:	e07e      	b.n	800095a <cli_dump+0x11a>
	}

	if (strncmp(argv[1], "0x", 2) == 0) address = (uint32_t)strtol(&argv[1][2], NULL, 16);
 800085c:	683b      	ldr	r3, [r7, #0]
 800085e:	3304      	adds	r3, #4
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	2202      	movs	r2, #2
 8000864:	4940      	ldr	r1, [pc, #256]	@ (8000968 <cli_dump+0x128>)
 8000866:	4618      	mov	r0, r3
 8000868:	f005 fba6 	bl	8005fb8 <strncmp>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d10b      	bne.n	800088a <cli_dump+0x4a>
 8000872:	683b      	ldr	r3, [r7, #0]
 8000874:	3304      	adds	r3, #4
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	3302      	adds	r3, #2
 800087a:	2210      	movs	r2, #16
 800087c:	2100      	movs	r1, #0
 800087e:	4618      	mov	r0, r3
 8000880:	f005 f976 	bl	8005b70 <strtol>
 8000884:	4603      	mov	r3, r0
 8000886:	627b      	str	r3, [r7, #36]	@ 0x24
 8000888:	e009      	b.n	800089e <cli_dump+0x5e>
	else address = (uint32_t)strtol(&argv[1][0], NULL, 16);
 800088a:	683b      	ldr	r3, [r7, #0]
 800088c:	3304      	adds	r3, #4
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	2210      	movs	r2, #16
 8000892:	2100      	movs	r1, #0
 8000894:	4618      	mov	r0, r3
 8000896:	f005 f96b 	bl	8005b70 <strtol>
 800089a:	4603      	mov	r3, r0
 800089c:	627b      	str	r3, [r7, #36]	@ 0x24

	length = (uint32_t)strtol(argv[2], NULL, 10);
 800089e:	683b      	ldr	r3, [r7, #0]
 80008a0:	3308      	adds	r3, #8
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	220a      	movs	r2, #10
 80008a6:	2100      	movs	r1, #0
 80008a8:	4618      	mov	r0, r3
 80008aa:	f005 f961 	bl	8005b70 <strtol>
 80008ae:	4603      	mov	r3, r0
 80008b0:	623b      	str	r3, [r7, #32]
	if (length > 10) length = 10;
 80008b2:	6a3b      	ldr	r3, [r7, #32]
 80008b4:	2b0a      	cmp	r3, #10
 80008b6:	d901      	bls.n	80008bc <cli_dump+0x7c>
 80008b8:	230a      	movs	r3, #10
 80008ba:	623b      	str	r3, [r7, #32]

	printf("address  %08lX, length = %ld\r\n", address, length);
 80008bc:	6a3a      	ldr	r2, [r7, #32]
 80008be:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80008c0:	482a      	ldr	r0, [pc, #168]	@ (800096c <cli_dump+0x12c>)
 80008c2:	f005 fa21 	bl	8005d08 <iprintf>

	for (int i=0; i<length; i++) {
 80008c6:	2300      	movs	r3, #0
 80008c8:	61bb      	str	r3, [r7, #24]
 80008ca:	e03e      	b.n	800094a <cli_dump+0x10a>
		printf("\r\n%08lX : ", (uint32_t)address);
 80008cc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80008ce:	4828      	ldr	r0, [pc, #160]	@ (8000970 <cli_dump+0x130>)
 80008d0:	f005 fa1a 	bl	8005d08 <iprintf>

		temp=address;
 80008d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008d6:	61fb      	str	r3, [r7, #28]
		for (int j=0; j<16; j++) {
 80008d8:	2300      	movs	r3, #0
 80008da:	617b      	str	r3, [r7, #20]
 80008dc:	e00b      	b.n	80008f6 <cli_dump+0xb6>
			printf("%02X ", *(uint8_t *)temp);
 80008de:	69fb      	ldr	r3, [r7, #28]
 80008e0:	781b      	ldrb	r3, [r3, #0]
 80008e2:	4619      	mov	r1, r3
 80008e4:	4823      	ldr	r0, [pc, #140]	@ (8000974 <cli_dump+0x134>)
 80008e6:	f005 fa0f 	bl	8005d08 <iprintf>
			temp++;
 80008ea:	69fb      	ldr	r3, [r7, #28]
 80008ec:	3301      	adds	r3, #1
 80008ee:	61fb      	str	r3, [r7, #28]
		for (int j=0; j<16; j++) {
 80008f0:	697b      	ldr	r3, [r7, #20]
 80008f2:	3301      	adds	r3, #1
 80008f4:	617b      	str	r3, [r7, #20]
 80008f6:	697b      	ldr	r3, [r7, #20]
 80008f8:	2b0f      	cmp	r3, #15
 80008fa:	ddf0      	ble.n	80008de <cli_dump+0x9e>
		}

		temp=address;
 80008fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008fe:	61fb      	str	r3, [r7, #28]
		for (int j=0; j<16; j++) {
 8000900:	2300      	movs	r3, #0
 8000902:	613b      	str	r3, [r7, #16]
 8000904:	e019      	b.n	800093a <cli_dump+0xfa>
			char c = *(char *)temp;
 8000906:	69fb      	ldr	r3, [r7, #28]
 8000908:	781b      	ldrb	r3, [r3, #0]
 800090a:	73fb      	strb	r3, [r7, #15]
			c = isalnum(c) ? c : (char)' ';
 800090c:	7bfb      	ldrb	r3, [r7, #15]
 800090e:	3301      	adds	r3, #1
 8000910:	4a19      	ldr	r2, [pc, #100]	@ (8000978 <cli_dump+0x138>)
 8000912:	4413      	add	r3, r2
 8000914:	781b      	ldrb	r3, [r3, #0]
 8000916:	f003 0307 	and.w	r3, r3, #7
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <cli_dump+0xe2>
 800091e:	7bfb      	ldrb	r3, [r7, #15]
 8000920:	e000      	b.n	8000924 <cli_dump+0xe4>
 8000922:	2320      	movs	r3, #32
 8000924:	73fb      	strb	r3, [r7, #15]
			printf("%c", c);
 8000926:	7bfb      	ldrb	r3, [r7, #15]
 8000928:	4618      	mov	r0, r3
 800092a:	f005 f9ff 	bl	8005d2c <putchar>
			temp++;
 800092e:	69fb      	ldr	r3, [r7, #28]
 8000930:	3301      	adds	r3, #1
 8000932:	61fb      	str	r3, [r7, #28]
		for (int j=0; j<16; j++) {
 8000934:	693b      	ldr	r3, [r7, #16]
 8000936:	3301      	adds	r3, #1
 8000938:	613b      	str	r3, [r7, #16]
 800093a:	693b      	ldr	r3, [r7, #16]
 800093c:	2b0f      	cmp	r3, #15
 800093e:	dde2      	ble.n	8000906 <cli_dump+0xc6>
		}

		address = temp;
 8000940:	69fb      	ldr	r3, [r7, #28]
 8000942:	627b      	str	r3, [r7, #36]	@ 0x24
	for (int i=0; i<length; i++) {
 8000944:	69bb      	ldr	r3, [r7, #24]
 8000946:	3301      	adds	r3, #1
 8000948:	61bb      	str	r3, [r7, #24]
 800094a:	69bb      	ldr	r3, [r7, #24]
 800094c:	6a3a      	ldr	r2, [r7, #32]
 800094e:	429a      	cmp	r2, r3
 8000950:	d8bc      	bhi.n	80008cc <cli_dump+0x8c>
	}
	printf("\r\n");
 8000952:	480a      	ldr	r0, [pc, #40]	@ (800097c <cli_dump+0x13c>)
 8000954:	f005 fa48 	bl	8005de8 <puts>

	return 0;
 8000958:	2300      	movs	r3, #0
}
 800095a:	4618      	mov	r0, r3
 800095c:	3728      	adds	r7, #40	@ 0x28
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	08006e44 	.word	0x08006e44
 8000968:	08006e68 	.word	0x08006e68
 800096c:	08006e6c 	.word	0x08006e6c
 8000970:	08006e8c 	.word	0x08006e8c
 8000974:	08006e98 	.word	0x08006e98
 8000978:	08006fac 	.word	0x08006fac
 800097c:	08006ea0 	.word	0x08006ea0

08000980 <cli_mode>:

static int cli_mode(int argc, char *argv[])
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b084      	sub	sp, #16
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
 8000988:	6039      	str	r1, [r7, #0]
	if (argc < 2) {
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	2b01      	cmp	r3, #1
 800098e:	dc05      	bgt.n	800099c <cli_mode+0x1c>
		printf("Err : Arg No\r\n");
 8000990:	480b      	ldr	r0, [pc, #44]	@ (80009c0 <cli_mode+0x40>)
 8000992:	f005 fa29 	bl	8005de8 <puts>
		return -1;
 8000996:	f04f 33ff 	mov.w	r3, #4294967295
 800099a:	e00c      	b.n	80009b6 <cli_mode+0x36>
	}

	long mode = strtol(argv[1], NULL, 10);
 800099c:	683b      	ldr	r3, [r7, #0]
 800099e:	3304      	adds	r3, #4
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	220a      	movs	r2, #10
 80009a4:	2100      	movs	r1, #0
 80009a6:	4618      	mov	r0, r3
 80009a8:	f005 f8e2 	bl	8005b70 <strtol>
 80009ac:	60f8      	str	r0, [r7, #12]
	app_mode((int)mode);
 80009ae:	68f8      	ldr	r0, [r7, #12]
 80009b0:	f7ff fe94 	bl	80006dc <app_mode>

	return 0;
 80009b4:	2300      	movs	r3, #0
}
 80009b6:	4618      	mov	r0, r3
 80009b8:	3710      	adds	r7, #16
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	08006e44 	.word	0x08006e44

080009c4 <cli_led>:

static int cli_led(int argc, char *argv[])
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b086      	sub	sp, #24
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
 80009cc:	6039      	str	r1, [r7, #0]
	if (argc < 3) {
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	2b02      	cmp	r3, #2
 80009d2:	dc05      	bgt.n	80009e0 <cli_led+0x1c>
		printf("Err : Arg No\r\n");
 80009d4:	4816      	ldr	r0, [pc, #88]	@ (8000a30 <cli_led+0x6c>)
 80009d6:	f005 fa07 	bl	8005de8 <puts>
		return -1;
 80009da:	f04f 33ff 	mov.w	r3, #4294967295
 80009de:	e023      	b.n	8000a28 <cli_led+0x64>
	}

	long no = strtol(argv[1], NULL, 10);
 80009e0:	683b      	ldr	r3, [r7, #0]
 80009e2:	3304      	adds	r3, #4
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	220a      	movs	r2, #10
 80009e8:	2100      	movs	r1, #0
 80009ea:	4618      	mov	r0, r3
 80009ec:	f005 f8c0 	bl	8005b70 <strtol>
 80009f0:	6138      	str	r0, [r7, #16]
	int onoff = strcmp(argv[2], "off");
 80009f2:	683b      	ldr	r3, [r7, #0]
 80009f4:	3308      	adds	r3, #8
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	490e      	ldr	r1, [pc, #56]	@ (8000a34 <cli_led+0x70>)
 80009fa:	4618      	mov	r0, r3
 80009fc:	f7ff fbf8 	bl	80001f0 <strcmp>
 8000a00:	6178      	str	r0, [r7, #20]

	if (onoff != 0) onoff = 1;
 8000a02:	697b      	ldr	r3, [r7, #20]
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <cli_led+0x48>
 8000a08:	2301      	movs	r3, #1
 8000a0a:	617b      	str	r3, [r7, #20]
	bool sts = onoff ? true : false;
 8000a0c:	697b      	ldr	r3, [r7, #20]
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	bf14      	ite	ne
 8000a12:	2301      	movne	r3, #1
 8000a14:	2300      	moveq	r3, #0
 8000a16:	73fb      	strb	r3, [r7, #15]

	//printf("led %ld, %d\r\n", no, onoff);
	 led_onoff((uint8_t)no, sts);
 8000a18:	693b      	ldr	r3, [r7, #16]
 8000a1a:	b2db      	uxtb	r3, r3
 8000a1c:	7bfa      	ldrb	r2, [r7, #15]
 8000a1e:	4611      	mov	r1, r2
 8000a20:	4618      	mov	r0, r3
 8000a22:	f000 f991 	bl	8000d48 <led_onoff>

	return 0;
 8000a26:	2300      	movs	r3, #0
}
 8000a28:	4618      	mov	r0, r3
 8000a2a:	3718      	adds	r7, #24
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	08006e44 	.word	0x08006e44
 8000a34:	08006ea4 	.word	0x08006ea4

08000a38 <cli_echo>:

static int cli_echo(int argc, char *argv[])
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
 8000a40:	6039      	str	r1, [r7, #0]
	if (argc < 2) {
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	2b01      	cmp	r3, #1
 8000a46:	dc05      	bgt.n	8000a54 <cli_echo+0x1c>
		printf("Err : Arg No\r\n");
 8000a48:	4808      	ldr	r0, [pc, #32]	@ (8000a6c <cli_echo+0x34>)
 8000a4a:	f005 f9cd 	bl	8005de8 <puts>
		return -1;
 8000a4e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a52:	e007      	b.n	8000a64 <cli_echo+0x2c>
	}
	printf("%s\r\n", argv[1]);
 8000a54:	683b      	ldr	r3, [r7, #0]
 8000a56:	3304      	adds	r3, #4
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	4804      	ldr	r0, [pc, #16]	@ (8000a70 <cli_echo+0x38>)
 8000a5e:	f005 f953 	bl	8005d08 <iprintf>

	return 0;
 8000a62:	2300      	movs	r3, #0
}
 8000a64:	4618      	mov	r0, r3
 8000a66:	3708      	adds	r7, #8
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	08006e44 	.word	0x08006e44
 8000a70:	08006ea8 	.word	0x08006ea8

08000a74 <cli_help>:

static int cli_help(int argc, char *argv[])
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b084      	sub	sp, #16
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
 8000a7c:	6039      	str	r1, [r7, #0]
	for (int i=0; gCmdListObjs[i].cmd != NULL; i++) {
 8000a7e:	2300      	movs	r3, #0
 8000a80:	60fb      	str	r3, [r7, #12]
 8000a82:	e00c      	b.n	8000a9e <cli_help+0x2a>
		printf("%s\r\n", gCmdListObjs[i].remark);
 8000a84:	4a0c      	ldr	r2, [pc, #48]	@ (8000ab8 <cli_help+0x44>)
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	011b      	lsls	r3, r3, #4
 8000a8a:	4413      	add	r3, r2
 8000a8c:	330c      	adds	r3, #12
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	4619      	mov	r1, r3
 8000a92:	480a      	ldr	r0, [pc, #40]	@ (8000abc <cli_help+0x48>)
 8000a94:	f005 f938 	bl	8005d08 <iprintf>
	for (int i=0; gCmdListObjs[i].cmd != NULL; i++) {
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	3301      	adds	r3, #1
 8000a9c:	60fb      	str	r3, [r7, #12]
 8000a9e:	4a06      	ldr	r2, [pc, #24]	@ (8000ab8 <cli_help+0x44>)
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	011b      	lsls	r3, r3, #4
 8000aa4:	4413      	add	r3, r2
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d1eb      	bne.n	8000a84 <cli_help+0x10>
	}

	return 0;
 8000aac:	2300      	movs	r3, #0
}
 8000aae:	4618      	mov	r0, r3
 8000ab0:	3710      	adds	r7, #16
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	08006f0c 	.word	0x08006f0c
 8000abc:	08006ea8 	.word	0x08006ea8

08000ac0 <cli_init>:

static void cli_parser(void *arg);

void cli_init(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
	uart_regcbf(cli_parser);
 8000ac4:	4802      	ldr	r0, [pc, #8]	@ (8000ad0 <cli_init+0x10>)
 8000ac6:	f000 ffd7 	bl	8001a78 <uart_regcbf>
}
 8000aca:	bf00      	nop
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	08000ae9 	.word	0x08000ae9

08000ad4 <cli_thread>:

void cli_thread(void *arg)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b083      	sub	sp, #12
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
	(void)arg;
}
 8000adc:	bf00      	nop
 8000ade:	370c      	adds	r7, #12
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae6:	4770      	bx	lr

08000ae8 <cli_parser>:

#define D_DELIMITER		" ,\r\n"

static void cli_parser(void *arg)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b090      	sub	sp, #64	@ 0x40
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
	int argc = 0;
 8000af0:	2300      	movs	r3, #0
 8000af2:	63fb      	str	r3, [r7, #60]	@ 0x3c
	char *argv[10];
	char *ptr;

	char *buf = (char *)arg;
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	633b      	str	r3, [r7, #48]	@ 0x30

	//printf("rx:%s\r\n", (char *)arg);
	// token 분리
	ptr = strtok(buf, D_DELIMITER);
 8000af8:	4924      	ldr	r1, [pc, #144]	@ (8000b8c <cli_parser+0xa4>)
 8000afa:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8000afc:	f005 fa6e 	bl	8005fdc <strtok>
 8000b00:	63b8      	str	r0, [r7, #56]	@ 0x38
	if (ptr == NULL) return;
 8000b02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d03c      	beq.n	8000b82 <cli_parser+0x9a>

	while (ptr != NULL) {
 8000b08:	e00e      	b.n	8000b28 <cli_parser+0x40>
		argv[argc] = ptr;
 8000b0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000b0c:	009b      	lsls	r3, r3, #2
 8000b0e:	3340      	adds	r3, #64	@ 0x40
 8000b10:	443b      	add	r3, r7
 8000b12:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000b14:	f843 2c38 	str.w	r2, [r3, #-56]
		argc++;
 8000b18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000b1a:	3301      	adds	r3, #1
 8000b1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
		ptr = strtok(NULL, D_DELIMITER);
 8000b1e:	491b      	ldr	r1, [pc, #108]	@ (8000b8c <cli_parser+0xa4>)
 8000b20:	2000      	movs	r0, #0
 8000b22:	f005 fa5b 	bl	8005fdc <strtok>
 8000b26:	63b8      	str	r0, [r7, #56]	@ 0x38
	while (ptr != NULL) {
 8000b28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d1ed      	bne.n	8000b0a <cli_parser+0x22>

//	for (int i=0; i<argc; i++) {
//		printf("%d:%s\r\n", i, argv[i]);
//	}

	for (int i=0; gCmdListObjs[i].cmd != NULL; i++) {
 8000b2e:	2300      	movs	r3, #0
 8000b30:	637b      	str	r3, [r7, #52]	@ 0x34
 8000b32:	e01b      	b.n	8000b6c <cli_parser+0x84>
		if (strcmp(gCmdListObjs[i].cmd, argv[0]) == 0) {
 8000b34:	4a16      	ldr	r2, [pc, #88]	@ (8000b90 <cli_parser+0xa8>)
 8000b36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000b38:	011b      	lsls	r3, r3, #4
 8000b3a:	4413      	add	r3, r2
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	68ba      	ldr	r2, [r7, #8]
 8000b40:	4611      	mov	r1, r2
 8000b42:	4618      	mov	r0, r3
 8000b44:	f7ff fb54 	bl	80001f0 <strcmp>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d10b      	bne.n	8000b66 <cli_parser+0x7e>
			gCmdListObjs[i].cbf(argc, argv);
 8000b4e:	4a10      	ldr	r2, [pc, #64]	@ (8000b90 <cli_parser+0xa8>)
 8000b50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000b52:	011b      	lsls	r3, r3, #4
 8000b54:	4413      	add	r3, r2
 8000b56:	3308      	adds	r3, #8
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	f107 0208 	add.w	r2, r7, #8
 8000b5e:	4611      	mov	r1, r2
 8000b60:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8000b62:	4798      	blx	r3
			return;
 8000b64:	e00e      	b.n	8000b84 <cli_parser+0x9c>
	for (int i=0; gCmdListObjs[i].cmd != NULL; i++) {
 8000b66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000b68:	3301      	adds	r3, #1
 8000b6a:	637b      	str	r3, [r7, #52]	@ 0x34
 8000b6c:	4a08      	ldr	r2, [pc, #32]	@ (8000b90 <cli_parser+0xa8>)
 8000b6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000b70:	011b      	lsls	r3, r3, #4
 8000b72:	4413      	add	r3, r2
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d1dc      	bne.n	8000b34 <cli_parser+0x4c>
		}
	}

	printf("Unsupported Command\r\n");
 8000b7a:	4806      	ldr	r0, [pc, #24]	@ (8000b94 <cli_parser+0xac>)
 8000b7c:	f005 f934 	bl	8005de8 <puts>
 8000b80:	e000      	b.n	8000b84 <cli_parser+0x9c>
	if (ptr == NULL) return;
 8000b82:	bf00      	nop
}
 8000b84:	3740      	adds	r7, #64	@ 0x40
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	08006eb0 	.word	0x08006eb0
 8000b90:	08006f0c 	.word	0x08006f0c
 8000b94:	08006eb8 	.word	0x08006eb8

08000b98 <__io_putchar>:
#include "io.h"

extern UART_HandleTypeDef huart3;

int __io_putchar(int ch)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xffff);
 8000ba0:	1d39      	adds	r1, r7, #4
 8000ba2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000ba6:	2201      	movs	r2, #1
 8000ba8:	4803      	ldr	r0, [pc, #12]	@ (8000bb8 <__io_putchar+0x20>)
 8000baa:	f003 fc61 	bl	8004470 <HAL_UART_Transmit>
	return ch;
 8000bae:	687b      	ldr	r3, [r7, #4]
}
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	3708      	adds	r7, #8
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	20000404 	.word	0x20000404

08000bbc <HAL_IncTick>:

void HAL_IncTick(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bc0:	4b05      	ldr	r3, [pc, #20]	@ (8000bd8 <HAL_IncTick+0x1c>)
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	461a      	mov	r2, r3
 8000bc6:	4b05      	ldr	r3, [pc, #20]	@ (8000bdc <HAL_IncTick+0x20>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	4413      	add	r3, r2
 8000bcc:	4a03      	ldr	r2, [pc, #12]	@ (8000bdc <HAL_IncTick+0x20>)
 8000bce:	6013      	str	r3, [r2, #0]

  polling_update();
 8000bd0:	f000 fb9c 	bl	800130c <polling_update>
}
 8000bd4:	bf00      	nop
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	2000004c 	.word	0x2000004c
 8000bdc:	20000a7c 	.word	0x20000a7c

08000be0 <io_exti_init>:
static IO_EXTI_T gIOExtiObjs[D_IO_EXTI_MAX];

static void io_exti_dummy(uint8_t rf, void *arg);

void io_exti_init(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b083      	sub	sp, #12
 8000be4:	af00      	add	r7, sp, #0
	for (int i=0; i<D_IO_EXTI_MAX; i++) {
 8000be6:	2300      	movs	r3, #0
 8000be8:	607b      	str	r3, [r7, #4]
 8000bea:	e01f      	b.n	8000c2c <io_exti_init+0x4c>
		gIOExtiObjs[i].port = NULL;
 8000bec:	4918      	ldr	r1, [pc, #96]	@ (8000c50 <io_exti_init+0x70>)
 8000bee:	687a      	ldr	r2, [r7, #4]
 8000bf0:	4613      	mov	r3, r2
 8000bf2:	005b      	lsls	r3, r3, #1
 8000bf4:	4413      	add	r3, r2
 8000bf6:	009b      	lsls	r3, r3, #2
 8000bf8:	440b      	add	r3, r1
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	601a      	str	r2, [r3, #0]
		gIOExtiObjs[i].pin = 0;
 8000bfe:	4914      	ldr	r1, [pc, #80]	@ (8000c50 <io_exti_init+0x70>)
 8000c00:	687a      	ldr	r2, [r7, #4]
 8000c02:	4613      	mov	r3, r2
 8000c04:	005b      	lsls	r3, r3, #1
 8000c06:	4413      	add	r3, r2
 8000c08:	009b      	lsls	r3, r3, #2
 8000c0a:	440b      	add	r3, r1
 8000c0c:	3304      	adds	r3, #4
 8000c0e:	2200      	movs	r2, #0
 8000c10:	801a      	strh	r2, [r3, #0]
		gIOExtiObjs[i].cbf = io_exti_dummy;
 8000c12:	490f      	ldr	r1, [pc, #60]	@ (8000c50 <io_exti_init+0x70>)
 8000c14:	687a      	ldr	r2, [r7, #4]
 8000c16:	4613      	mov	r3, r2
 8000c18:	005b      	lsls	r3, r3, #1
 8000c1a:	4413      	add	r3, r2
 8000c1c:	009b      	lsls	r3, r3, #2
 8000c1e:	440b      	add	r3, r1
 8000c20:	3308      	adds	r3, #8
 8000c22:	4a0c      	ldr	r2, [pc, #48]	@ (8000c54 <io_exti_init+0x74>)
 8000c24:	601a      	str	r2, [r3, #0]
	for (int i=0; i<D_IO_EXTI_MAX; i++) {
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	3301      	adds	r3, #1
 8000c2a:	607b      	str	r3, [r7, #4]
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	2b0f      	cmp	r3, #15
 8000c30:	dddc      	ble.n	8000bec <io_exti_init+0xc>
	}

	gIOExtiObjs[13].port = USER_Btn_GPIO_Port;
 8000c32:	4b07      	ldr	r3, [pc, #28]	@ (8000c50 <io_exti_init+0x70>)
 8000c34:	4a08      	ldr	r2, [pc, #32]	@ (8000c58 <io_exti_init+0x78>)
 8000c36:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
	gIOExtiObjs[13].pin = USER_Btn_Pin;
 8000c3a:	4b05      	ldr	r3, [pc, #20]	@ (8000c50 <io_exti_init+0x70>)
 8000c3c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000c40:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0
}
 8000c44:	bf00      	nop
 8000c46:	370c      	adds	r7, #12
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4e:	4770      	bx	lr
 8000c50:	200000d4 	.word	0x200000d4
 8000c54:	08000d31 	.word	0x08000d31
 8000c58:	40020800 	.word	0x40020800

08000c5c <io_exti_regcbf>:

bool io_exti_regcbf(uint8_t idx, IO_CBF_T cbf)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b083      	sub	sp, #12
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	4603      	mov	r3, r0
 8000c64:	6039      	str	r1, [r7, #0]
 8000c66:	71fb      	strb	r3, [r7, #7]
	if (idx > D_IO_EXTI_MAX) return false;
 8000c68:	79fb      	ldrb	r3, [r7, #7]
 8000c6a:	2b10      	cmp	r3, #16
 8000c6c:	d901      	bls.n	8000c72 <io_exti_regcbf+0x16>
 8000c6e:	2300      	movs	r3, #0
 8000c70:	e00a      	b.n	8000c88 <io_exti_regcbf+0x2c>
	gIOExtiObjs[idx].cbf = cbf;
 8000c72:	79fa      	ldrb	r2, [r7, #7]
 8000c74:	4907      	ldr	r1, [pc, #28]	@ (8000c94 <io_exti_regcbf+0x38>)
 8000c76:	4613      	mov	r3, r2
 8000c78:	005b      	lsls	r3, r3, #1
 8000c7a:	4413      	add	r3, r2
 8000c7c:	009b      	lsls	r3, r3, #2
 8000c7e:	440b      	add	r3, r1
 8000c80:	3308      	adds	r3, #8
 8000c82:	683a      	ldr	r2, [r7, #0]
 8000c84:	601a      	str	r2, [r3, #0]
	return true;
 8000c86:	2301      	movs	r3, #1
}
 8000c88:	4618      	mov	r0, r3
 8000c8a:	370c      	adds	r7, #12
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c92:	4770      	bx	lr
 8000c94:	200000d4 	.word	0x200000d4

08000c98 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b084      	sub	sp, #16
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	80fb      	strh	r3, [r7, #6]
	for (volatile uint16_t i=0; i<D_IO_EXTI_MAX; i++) {
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	81fb      	strh	r3, [r7, #14]
 8000ca6:	e038      	b.n	8000d1a <HAL_GPIO_EXTI_Callback+0x82>
		volatile GPIO_PinState sts = HAL_GPIO_ReadPin(gIOExtiObjs[i].port, gIOExtiObjs[i].pin);
 8000ca8:	89fb      	ldrh	r3, [r7, #14]
 8000caa:	b29b      	uxth	r3, r3
 8000cac:	4619      	mov	r1, r3
 8000cae:	4a1f      	ldr	r2, [pc, #124]	@ (8000d2c <HAL_GPIO_EXTI_Callback+0x94>)
 8000cb0:	460b      	mov	r3, r1
 8000cb2:	005b      	lsls	r3, r3, #1
 8000cb4:	440b      	add	r3, r1
 8000cb6:	009b      	lsls	r3, r3, #2
 8000cb8:	4413      	add	r3, r2
 8000cba:	681a      	ldr	r2, [r3, #0]
 8000cbc:	89fb      	ldrh	r3, [r7, #14]
 8000cbe:	b29b      	uxth	r3, r3
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	491a      	ldr	r1, [pc, #104]	@ (8000d2c <HAL_GPIO_EXTI_Callback+0x94>)
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	005b      	lsls	r3, r3, #1
 8000cc8:	4403      	add	r3, r0
 8000cca:	009b      	lsls	r3, r3, #2
 8000ccc:	440b      	add	r3, r1
 8000cce:	3304      	adds	r3, #4
 8000cd0:	881b      	ldrh	r3, [r3, #0]
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	4610      	mov	r0, r2
 8000cd6:	f001 fe8d 	bl	80029f4 <HAL_GPIO_ReadPin>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	737b      	strb	r3, [r7, #13]
		if (GPIO_Pin & (0x01 << i)) 	gIOExtiObjs[i].cbf((uint8_t)sts, (void *)&i);
 8000cde:	88fb      	ldrh	r3, [r7, #6]
 8000ce0:	89fa      	ldrh	r2, [r7, #14]
 8000ce2:	b292      	uxth	r2, r2
 8000ce4:	4113      	asrs	r3, r2
 8000ce6:	f003 0301 	and.w	r3, r3, #1
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d010      	beq.n	8000d10 <HAL_GPIO_EXTI_Callback+0x78>
 8000cee:	89fb      	ldrh	r3, [r7, #14]
 8000cf0:	b29b      	uxth	r3, r3
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	4a0d      	ldr	r2, [pc, #52]	@ (8000d2c <HAL_GPIO_EXTI_Callback+0x94>)
 8000cf6:	460b      	mov	r3, r1
 8000cf8:	005b      	lsls	r3, r3, #1
 8000cfa:	440b      	add	r3, r1
 8000cfc:	009b      	lsls	r3, r3, #2
 8000cfe:	4413      	add	r3, r2
 8000d00:	3308      	adds	r3, #8
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	7b7a      	ldrb	r2, [r7, #13]
 8000d06:	b2d2      	uxtb	r2, r2
 8000d08:	f107 010e 	add.w	r1, r7, #14
 8000d0c:	4610      	mov	r0, r2
 8000d0e:	4798      	blx	r3
	for (volatile uint16_t i=0; i<D_IO_EXTI_MAX; i++) {
 8000d10:	89fb      	ldrh	r3, [r7, #14]
 8000d12:	b29b      	uxth	r3, r3
 8000d14:	3301      	adds	r3, #1
 8000d16:	b29b      	uxth	r3, r3
 8000d18:	81fb      	strh	r3, [r7, #14]
 8000d1a:	89fb      	ldrh	r3, [r7, #14]
 8000d1c:	b29b      	uxth	r3, r3
 8000d1e:	2b0f      	cmp	r3, #15
 8000d20:	d9c2      	bls.n	8000ca8 <HAL_GPIO_EXTI_Callback+0x10>
	}
}
 8000d22:	bf00      	nop
 8000d24:	bf00      	nop
 8000d26:	3710      	adds	r7, #16
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	200000d4 	.word	0x200000d4

08000d30 <io_exti_dummy>:

static void io_exti_dummy(uint8_t rf, void *arg)
{
 8000d30:	b480      	push	{r7}
 8000d32:	b083      	sub	sp, #12
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	4603      	mov	r3, r0
 8000d38:	6039      	str	r1, [r7, #0]
 8000d3a:	71fb      	strb	r3, [r7, #7]
	(void)rf;
	(void)arg;
}
 8000d3c:	bf00      	nop
 8000d3e:	370c      	adds	r7, #12
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr

08000d48 <led_onoff>:
	{	LD2_GPIO_Port, 	LD2_Pin		},
	{	LD3_GPIO_Port,		LD3_Pin		}
};

bool led_onoff(uint8_t led_no, bool flag)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b084      	sub	sp, #16
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	4603      	mov	r3, r0
 8000d50:	460a      	mov	r2, r1
 8000d52:	71fb      	strb	r3, [r7, #7]
 8000d54:	4613      	mov	r3, r2
 8000d56:	71bb      	strb	r3, [r7, #6]
	LED_T *p;
	GPIO_PinState sts;

	if (led_no > LED_MAX) return false;
 8000d58:	79fb      	ldrb	r3, [r7, #7]
 8000d5a:	2b03      	cmp	r3, #3
 8000d5c:	d901      	bls.n	8000d62 <led_onoff+0x1a>
 8000d5e:	2300      	movs	r3, #0
 8000d60:	e00f      	b.n	8000d82 <led_onoff+0x3a>

	p = (LED_T *)&gLedObjs[led_no];
 8000d62:	79fb      	ldrb	r3, [r7, #7]
 8000d64:	00db      	lsls	r3, r3, #3
 8000d66:	4a09      	ldr	r2, [pc, #36]	@ (8000d8c <led_onoff+0x44>)
 8000d68:	4413      	add	r3, r2
 8000d6a:	60fb      	str	r3, [r7, #12]
	sts = flag ? GPIO_PIN_SET : GPIO_PIN_RESET;
 8000d6c:	79bb      	ldrb	r3, [r7, #6]
 8000d6e:	72fb      	strb	r3, [r7, #11]
	HAL_GPIO_WritePin(p->port, p->pin, sts);
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	6818      	ldr	r0, [r3, #0]
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	889b      	ldrh	r3, [r3, #4]
 8000d78:	7afa      	ldrb	r2, [r7, #11]
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	f001 fe52 	bl	8002a24 <HAL_GPIO_WritePin>

	return true;
 8000d80:	2301      	movs	r3, #1
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	3710      	adds	r7, #16
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	08006f7c 	.word	0x08006f7c

08000d90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d94:	f000 ff34 	bl	8001c00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d98:	f000 f80e 	bl	8000db8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d9c:	f000 f994 	bl	80010c8 <MX_GPIO_Init>
  MX_ETH_Init();
 8000da0:	f000 f874 	bl	8000e8c <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000da4:	f000 f938 	bl	8001018 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000da8:	f000 f960 	bl	800106c <MX_USB_OTG_FS_PCD_Init>
  MX_TIM3_Init();
 8000dac:	f000 f8bc 	bl	8000f28 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  app();
 8000db0:	f7ff fc52 	bl	8000658 <app>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000db4:	bf00      	nop
 8000db6:	e7fd      	b.n	8000db4 <main+0x24>

08000db8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b094      	sub	sp, #80	@ 0x50
 8000dbc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dbe:	f107 0320 	add.w	r3, r7, #32
 8000dc2:	2230      	movs	r2, #48	@ 0x30
 8000dc4:	2100      	movs	r1, #0
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f005 f8ee 	bl	8005fa8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dcc:	f107 030c 	add.w	r3, r7, #12
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	601a      	str	r2, [r3, #0]
 8000dd4:	605a      	str	r2, [r3, #4]
 8000dd6:	609a      	str	r2, [r3, #8]
 8000dd8:	60da      	str	r2, [r3, #12]
 8000dda:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ddc:	2300      	movs	r3, #0
 8000dde:	60bb      	str	r3, [r7, #8]
 8000de0:	4b28      	ldr	r3, [pc, #160]	@ (8000e84 <SystemClock_Config+0xcc>)
 8000de2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000de4:	4a27      	ldr	r2, [pc, #156]	@ (8000e84 <SystemClock_Config+0xcc>)
 8000de6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000dea:	6413      	str	r3, [r2, #64]	@ 0x40
 8000dec:	4b25      	ldr	r3, [pc, #148]	@ (8000e84 <SystemClock_Config+0xcc>)
 8000dee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000df0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000df4:	60bb      	str	r3, [r7, #8]
 8000df6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000df8:	2300      	movs	r3, #0
 8000dfa:	607b      	str	r3, [r7, #4]
 8000dfc:	4b22      	ldr	r3, [pc, #136]	@ (8000e88 <SystemClock_Config+0xd0>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a21      	ldr	r2, [pc, #132]	@ (8000e88 <SystemClock_Config+0xd0>)
 8000e02:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000e06:	6013      	str	r3, [r2, #0]
 8000e08:	4b1f      	ldr	r3, [pc, #124]	@ (8000e88 <SystemClock_Config+0xd0>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000e10:	607b      	str	r3, [r7, #4]
 8000e12:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e14:	2301      	movs	r3, #1
 8000e16:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000e18:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000e1c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e1e:	2302      	movs	r3, #2
 8000e20:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e22:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000e26:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000e28:	2304      	movs	r3, #4
 8000e2a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000e2c:	23a8      	movs	r3, #168	@ 0xa8
 8000e2e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e30:	2302      	movs	r3, #2
 8000e32:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000e34:	2307      	movs	r3, #7
 8000e36:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e38:	f107 0320 	add.w	r3, r7, #32
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f001 ff33 	bl	8002ca8 <HAL_RCC_OscConfig>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d001      	beq.n	8000e4c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000e48:	f000 f9f4 	bl	8001234 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e4c:	230f      	movs	r3, #15
 8000e4e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e50:	2302      	movs	r3, #2
 8000e52:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e54:	2300      	movs	r3, #0
 8000e56:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000e58:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000e5c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e5e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e62:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000e64:	f107 030c 	add.w	r3, r7, #12
 8000e68:	2105      	movs	r1, #5
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f002 f994 	bl	8003198 <HAL_RCC_ClockConfig>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d001      	beq.n	8000e7a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000e76:	f000 f9dd 	bl	8001234 <Error_Handler>
  }
}
 8000e7a:	bf00      	nop
 8000e7c:	3750      	adds	r7, #80	@ 0x50
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	40023800 	.word	0x40023800
 8000e88:	40007000 	.word	0x40007000

08000e8c <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000e90:	4b1f      	ldr	r3, [pc, #124]	@ (8000f10 <MX_ETH_Init+0x84>)
 8000e92:	4a20      	ldr	r2, [pc, #128]	@ (8000f14 <MX_ETH_Init+0x88>)
 8000e94:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000e96:	4b20      	ldr	r3, [pc, #128]	@ (8000f18 <MX_ETH_Init+0x8c>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000e9c:	4b1e      	ldr	r3, [pc, #120]	@ (8000f18 <MX_ETH_Init+0x8c>)
 8000e9e:	2280      	movs	r2, #128	@ 0x80
 8000ea0:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000ea2:	4b1d      	ldr	r3, [pc, #116]	@ (8000f18 <MX_ETH_Init+0x8c>)
 8000ea4:	22e1      	movs	r2, #225	@ 0xe1
 8000ea6:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000ea8:	4b1b      	ldr	r3, [pc, #108]	@ (8000f18 <MX_ETH_Init+0x8c>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000eae:	4b1a      	ldr	r3, [pc, #104]	@ (8000f18 <MX_ETH_Init+0x8c>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000eb4:	4b18      	ldr	r3, [pc, #96]	@ (8000f18 <MX_ETH_Init+0x8c>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000eba:	4b15      	ldr	r3, [pc, #84]	@ (8000f10 <MX_ETH_Init+0x84>)
 8000ebc:	4a16      	ldr	r2, [pc, #88]	@ (8000f18 <MX_ETH_Init+0x8c>)
 8000ebe:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000ec0:	4b13      	ldr	r3, [pc, #76]	@ (8000f10 <MX_ETH_Init+0x84>)
 8000ec2:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000ec6:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000ec8:	4b11      	ldr	r3, [pc, #68]	@ (8000f10 <MX_ETH_Init+0x84>)
 8000eca:	4a14      	ldr	r2, [pc, #80]	@ (8000f1c <MX_ETH_Init+0x90>)
 8000ecc:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000ece:	4b10      	ldr	r3, [pc, #64]	@ (8000f10 <MX_ETH_Init+0x84>)
 8000ed0:	4a13      	ldr	r2, [pc, #76]	@ (8000f20 <MX_ETH_Init+0x94>)
 8000ed2:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000ed4:	4b0e      	ldr	r3, [pc, #56]	@ (8000f10 <MX_ETH_Init+0x84>)
 8000ed6:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8000eda:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000edc:	480c      	ldr	r0, [pc, #48]	@ (8000f10 <MX_ETH_Init+0x84>)
 8000ede:	f001 f8b5 	bl	800204c <HAL_ETH_Init>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d001      	beq.n	8000eec <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000ee8:	f000 f9a4 	bl	8001234 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000eec:	2238      	movs	r2, #56	@ 0x38
 8000eee:	2100      	movs	r1, #0
 8000ef0:	480c      	ldr	r0, [pc, #48]	@ (8000f24 <MX_ETH_Init+0x98>)
 8000ef2:	f005 f859 	bl	8005fa8 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000ef6:	4b0b      	ldr	r3, [pc, #44]	@ (8000f24 <MX_ETH_Init+0x98>)
 8000ef8:	2221      	movs	r2, #33	@ 0x21
 8000efa:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000efc:	4b09      	ldr	r3, [pc, #36]	@ (8000f24 <MX_ETH_Init+0x98>)
 8000efe:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8000f02:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000f04:	4b07      	ldr	r3, [pc, #28]	@ (8000f24 <MX_ETH_Init+0x98>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000f0a:	bf00      	nop
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	2000030c 	.word	0x2000030c
 8000f14:	40028000 	.word	0x40028000
 8000f18:	20000930 	.word	0x20000930
 8000f1c:	2000026c 	.word	0x2000026c
 8000f20:	200001cc 	.word	0x200001cc
 8000f24:	20000194 	.word	0x20000194

08000f28 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b08e      	sub	sp, #56	@ 0x38
 8000f2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f2e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000f32:	2200      	movs	r2, #0
 8000f34:	601a      	str	r2, [r3, #0]
 8000f36:	605a      	str	r2, [r3, #4]
 8000f38:	609a      	str	r2, [r3, #8]
 8000f3a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f3c:	f107 0320 	add.w	r3, r7, #32
 8000f40:	2200      	movs	r2, #0
 8000f42:	601a      	str	r2, [r3, #0]
 8000f44:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f46:	1d3b      	adds	r3, r7, #4
 8000f48:	2200      	movs	r2, #0
 8000f4a:	601a      	str	r2, [r3, #0]
 8000f4c:	605a      	str	r2, [r3, #4]
 8000f4e:	609a      	str	r2, [r3, #8]
 8000f50:	60da      	str	r2, [r3, #12]
 8000f52:	611a      	str	r2, [r3, #16]
 8000f54:	615a      	str	r2, [r3, #20]
 8000f56:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000f58:	4b2d      	ldr	r3, [pc, #180]	@ (8001010 <MX_TIM3_Init+0xe8>)
 8000f5a:	4a2e      	ldr	r2, [pc, #184]	@ (8001014 <MX_TIM3_Init+0xec>)
 8000f5c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 8000f5e:	4b2c      	ldr	r3, [pc, #176]	@ (8001010 <MX_TIM3_Init+0xe8>)
 8000f60:	2253      	movs	r2, #83	@ 0x53
 8000f62:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f64:	4b2a      	ldr	r3, [pc, #168]	@ (8001010 <MX_TIM3_Init+0xe8>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000f6a:	4b29      	ldr	r3, [pc, #164]	@ (8001010 <MX_TIM3_Init+0xe8>)
 8000f6c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000f70:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f72:	4b27      	ldr	r3, [pc, #156]	@ (8001010 <MX_TIM3_Init+0xe8>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f78:	4b25      	ldr	r3, [pc, #148]	@ (8001010 <MX_TIM3_Init+0xe8>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000f7e:	4824      	ldr	r0, [pc, #144]	@ (8001010 <MX_TIM3_Init+0xe8>)
 8000f80:	f002 fb2a 	bl	80035d8 <HAL_TIM_Base_Init>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000f8a:	f000 f953 	bl	8001234 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f8e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f92:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000f94:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000f98:	4619      	mov	r1, r3
 8000f9a:	481d      	ldr	r0, [pc, #116]	@ (8001010 <MX_TIM3_Init+0xe8>)
 8000f9c:	f002 fdb8 	bl	8003b10 <HAL_TIM_ConfigClockSource>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000fa6:	f000 f945 	bl	8001234 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000faa:	4819      	ldr	r0, [pc, #100]	@ (8001010 <MX_TIM3_Init+0xe8>)
 8000fac:	f002 fbcc 	bl	8003748 <HAL_TIM_PWM_Init>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d001      	beq.n	8000fba <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000fb6:	f000 f93d 	bl	8001234 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000fc2:	f107 0320 	add.w	r3, r7, #32
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	4811      	ldr	r0, [pc, #68]	@ (8001010 <MX_TIM3_Init+0xe8>)
 8000fca:	f003 f985 	bl	80042d8 <HAL_TIMEx_MasterConfigSynchronization>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d001      	beq.n	8000fd8 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000fd4:	f000 f92e 	bl	8001234 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fd8:	2360      	movs	r3, #96	@ 0x60
 8000fda:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 8000fdc:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000fe0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000fea:	1d3b      	adds	r3, r7, #4
 8000fec:	2208      	movs	r2, #8
 8000fee:	4619      	mov	r1, r3
 8000ff0:	4807      	ldr	r0, [pc, #28]	@ (8001010 <MX_TIM3_Init+0xe8>)
 8000ff2:	f002 fccb 	bl	800398c <HAL_TIM_PWM_ConfigChannel>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d001      	beq.n	8001000 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000ffc:	f000 f91a 	bl	8001234 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001000:	4803      	ldr	r0, [pc, #12]	@ (8001010 <MX_TIM3_Init+0xe8>)
 8001002:	f000 fadf 	bl	80015c4 <HAL_TIM_MspPostInit>

}
 8001006:	bf00      	nop
 8001008:	3738      	adds	r7, #56	@ 0x38
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	200003bc 	.word	0x200003bc
 8001014:	40000400 	.word	0x40000400

08001018 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800101c:	4b11      	ldr	r3, [pc, #68]	@ (8001064 <MX_USART3_UART_Init+0x4c>)
 800101e:	4a12      	ldr	r2, [pc, #72]	@ (8001068 <MX_USART3_UART_Init+0x50>)
 8001020:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001022:	4b10      	ldr	r3, [pc, #64]	@ (8001064 <MX_USART3_UART_Init+0x4c>)
 8001024:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001028:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800102a:	4b0e      	ldr	r3, [pc, #56]	@ (8001064 <MX_USART3_UART_Init+0x4c>)
 800102c:	2200      	movs	r2, #0
 800102e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001030:	4b0c      	ldr	r3, [pc, #48]	@ (8001064 <MX_USART3_UART_Init+0x4c>)
 8001032:	2200      	movs	r2, #0
 8001034:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001036:	4b0b      	ldr	r3, [pc, #44]	@ (8001064 <MX_USART3_UART_Init+0x4c>)
 8001038:	2200      	movs	r2, #0
 800103a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800103c:	4b09      	ldr	r3, [pc, #36]	@ (8001064 <MX_USART3_UART_Init+0x4c>)
 800103e:	220c      	movs	r2, #12
 8001040:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001042:	4b08      	ldr	r3, [pc, #32]	@ (8001064 <MX_USART3_UART_Init+0x4c>)
 8001044:	2200      	movs	r2, #0
 8001046:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001048:	4b06      	ldr	r3, [pc, #24]	@ (8001064 <MX_USART3_UART_Init+0x4c>)
 800104a:	2200      	movs	r2, #0
 800104c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800104e:	4805      	ldr	r0, [pc, #20]	@ (8001064 <MX_USART3_UART_Init+0x4c>)
 8001050:	f003 f9be 	bl	80043d0 <HAL_UART_Init>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800105a:	f000 f8eb 	bl	8001234 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800105e:	bf00      	nop
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	20000404 	.word	0x20000404
 8001068:	40004800 	.word	0x40004800

0800106c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001070:	4b14      	ldr	r3, [pc, #80]	@ (80010c4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001072:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001076:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8001078:	4b12      	ldr	r3, [pc, #72]	@ (80010c4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800107a:	2204      	movs	r2, #4
 800107c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800107e:	4b11      	ldr	r3, [pc, #68]	@ (80010c4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001080:	2202      	movs	r2, #2
 8001082:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001084:	4b0f      	ldr	r3, [pc, #60]	@ (80010c4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001086:	2200      	movs	r2, #0
 8001088:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800108a:	4b0e      	ldr	r3, [pc, #56]	@ (80010c4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800108c:	2202      	movs	r2, #2
 800108e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001090:	4b0c      	ldr	r3, [pc, #48]	@ (80010c4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001092:	2201      	movs	r2, #1
 8001094:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001096:	4b0b      	ldr	r3, [pc, #44]	@ (80010c4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001098:	2200      	movs	r2, #0
 800109a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800109c:	4b09      	ldr	r3, [pc, #36]	@ (80010c4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800109e:	2200      	movs	r2, #0
 80010a0:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80010a2:	4b08      	ldr	r3, [pc, #32]	@ (80010c4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80010a4:	2201      	movs	r2, #1
 80010a6:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80010a8:	4b06      	ldr	r3, [pc, #24]	@ (80010c4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80010ae:	4805      	ldr	r0, [pc, #20]	@ (80010c4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80010b0:	f001 fcea 	bl	8002a88 <HAL_PCD_Init>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80010ba:	f000 f8bb 	bl	8001234 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80010be:	bf00      	nop
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	2000044c 	.word	0x2000044c

080010c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b08c      	sub	sp, #48	@ 0x30
 80010cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ce:	f107 031c 	add.w	r3, r7, #28
 80010d2:	2200      	movs	r2, #0
 80010d4:	601a      	str	r2, [r3, #0]
 80010d6:	605a      	str	r2, [r3, #4]
 80010d8:	609a      	str	r2, [r3, #8]
 80010da:	60da      	str	r2, [r3, #12]
 80010dc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010de:	2300      	movs	r3, #0
 80010e0:	61bb      	str	r3, [r7, #24]
 80010e2:	4b50      	ldr	r3, [pc, #320]	@ (8001224 <MX_GPIO_Init+0x15c>)
 80010e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010e6:	4a4f      	ldr	r2, [pc, #316]	@ (8001224 <MX_GPIO_Init+0x15c>)
 80010e8:	f043 0304 	orr.w	r3, r3, #4
 80010ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80010ee:	4b4d      	ldr	r3, [pc, #308]	@ (8001224 <MX_GPIO_Init+0x15c>)
 80010f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010f2:	f003 0304 	and.w	r3, r3, #4
 80010f6:	61bb      	str	r3, [r7, #24]
 80010f8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010fa:	2300      	movs	r3, #0
 80010fc:	617b      	str	r3, [r7, #20]
 80010fe:	4b49      	ldr	r3, [pc, #292]	@ (8001224 <MX_GPIO_Init+0x15c>)
 8001100:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001102:	4a48      	ldr	r2, [pc, #288]	@ (8001224 <MX_GPIO_Init+0x15c>)
 8001104:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001108:	6313      	str	r3, [r2, #48]	@ 0x30
 800110a:	4b46      	ldr	r3, [pc, #280]	@ (8001224 <MX_GPIO_Init+0x15c>)
 800110c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800110e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001112:	617b      	str	r3, [r7, #20]
 8001114:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001116:	2300      	movs	r3, #0
 8001118:	613b      	str	r3, [r7, #16]
 800111a:	4b42      	ldr	r3, [pc, #264]	@ (8001224 <MX_GPIO_Init+0x15c>)
 800111c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800111e:	4a41      	ldr	r2, [pc, #260]	@ (8001224 <MX_GPIO_Init+0x15c>)
 8001120:	f043 0301 	orr.w	r3, r3, #1
 8001124:	6313      	str	r3, [r2, #48]	@ 0x30
 8001126:	4b3f      	ldr	r3, [pc, #252]	@ (8001224 <MX_GPIO_Init+0x15c>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800112a:	f003 0301 	and.w	r3, r3, #1
 800112e:	613b      	str	r3, [r7, #16]
 8001130:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001132:	2300      	movs	r3, #0
 8001134:	60fb      	str	r3, [r7, #12]
 8001136:	4b3b      	ldr	r3, [pc, #236]	@ (8001224 <MX_GPIO_Init+0x15c>)
 8001138:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800113a:	4a3a      	ldr	r2, [pc, #232]	@ (8001224 <MX_GPIO_Init+0x15c>)
 800113c:	f043 0302 	orr.w	r3, r3, #2
 8001140:	6313      	str	r3, [r2, #48]	@ 0x30
 8001142:	4b38      	ldr	r3, [pc, #224]	@ (8001224 <MX_GPIO_Init+0x15c>)
 8001144:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001146:	f003 0302 	and.w	r3, r3, #2
 800114a:	60fb      	str	r3, [r7, #12]
 800114c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800114e:	2300      	movs	r3, #0
 8001150:	60bb      	str	r3, [r7, #8]
 8001152:	4b34      	ldr	r3, [pc, #208]	@ (8001224 <MX_GPIO_Init+0x15c>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001156:	4a33      	ldr	r2, [pc, #204]	@ (8001224 <MX_GPIO_Init+0x15c>)
 8001158:	f043 0308 	orr.w	r3, r3, #8
 800115c:	6313      	str	r3, [r2, #48]	@ 0x30
 800115e:	4b31      	ldr	r3, [pc, #196]	@ (8001224 <MX_GPIO_Init+0x15c>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001162:	f003 0308 	and.w	r3, r3, #8
 8001166:	60bb      	str	r3, [r7, #8]
 8001168:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800116a:	2300      	movs	r3, #0
 800116c:	607b      	str	r3, [r7, #4]
 800116e:	4b2d      	ldr	r3, [pc, #180]	@ (8001224 <MX_GPIO_Init+0x15c>)
 8001170:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001172:	4a2c      	ldr	r2, [pc, #176]	@ (8001224 <MX_GPIO_Init+0x15c>)
 8001174:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001178:	6313      	str	r3, [r2, #48]	@ 0x30
 800117a:	4b2a      	ldr	r3, [pc, #168]	@ (8001224 <MX_GPIO_Init+0x15c>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800117e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001182:	607b      	str	r3, [r7, #4]
 8001184:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001186:	2200      	movs	r2, #0
 8001188:	f44f 4181 	mov.w	r1, #16512	@ 0x4080
 800118c:	4826      	ldr	r0, [pc, #152]	@ (8001228 <MX_GPIO_Init+0x160>)
 800118e:	f001 fc49 	bl	8002a24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001192:	2200      	movs	r2, #0
 8001194:	2140      	movs	r1, #64	@ 0x40
 8001196:	4825      	ldr	r0, [pc, #148]	@ (800122c <MX_GPIO_Init+0x164>)
 8001198:	f001 fc44 	bl	8002a24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800119c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80011a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011a2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80011a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a8:	2300      	movs	r3, #0
 80011aa:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80011ac:	f107 031c 	add.w	r3, r7, #28
 80011b0:	4619      	mov	r1, r3
 80011b2:	481f      	ldr	r0, [pc, #124]	@ (8001230 <MX_GPIO_Init+0x168>)
 80011b4:	f001 fa72 	bl	800269c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 80011b8:	f44f 4381 	mov.w	r3, #16512	@ 0x4080
 80011bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011be:	2301      	movs	r3, #1
 80011c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c2:	2300      	movs	r3, #0
 80011c4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c6:	2300      	movs	r3, #0
 80011c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011ca:	f107 031c 	add.w	r3, r7, #28
 80011ce:	4619      	mov	r1, r3
 80011d0:	4815      	ldr	r0, [pc, #84]	@ (8001228 <MX_GPIO_Init+0x160>)
 80011d2:	f001 fa63 	bl	800269c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80011d6:	2340      	movs	r3, #64	@ 0x40
 80011d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011da:	2301      	movs	r3, #1
 80011dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011de:	2300      	movs	r3, #0
 80011e0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e2:	2300      	movs	r3, #0
 80011e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80011e6:	f107 031c 	add.w	r3, r7, #28
 80011ea:	4619      	mov	r1, r3
 80011ec:	480f      	ldr	r0, [pc, #60]	@ (800122c <MX_GPIO_Init+0x164>)
 80011ee:	f001 fa55 	bl	800269c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80011f2:	2380      	movs	r3, #128	@ 0x80
 80011f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011f6:	2300      	movs	r3, #0
 80011f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fa:	2300      	movs	r3, #0
 80011fc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80011fe:	f107 031c 	add.w	r3, r7, #28
 8001202:	4619      	mov	r1, r3
 8001204:	4809      	ldr	r0, [pc, #36]	@ (800122c <MX_GPIO_Init+0x164>)
 8001206:	f001 fa49 	bl	800269c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 15, 0);
 800120a:	2200      	movs	r2, #0
 800120c:	210f      	movs	r1, #15
 800120e:	2028      	movs	r0, #40	@ 0x28
 8001210:	f000 fe53 	bl	8001eba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001214:	2028      	movs	r0, #40	@ 0x28
 8001216:	f000 fe6c 	bl	8001ef2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800121a:	bf00      	nop
 800121c:	3730      	adds	r7, #48	@ 0x30
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	40023800 	.word	0x40023800
 8001228:	40020400 	.word	0x40020400
 800122c:	40021800 	.word	0x40021800
 8001230:	40020800 	.word	0x40020800

08001234 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001238:	b672      	cpsid	i
}
 800123a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800123c:	bf00      	nop
 800123e:	e7fd      	b.n	800123c <Error_Handler+0x8>

08001240 <polling_init>:
	{ .period = 1500, 	.cbf = adc_callback_2		},
	{ .cbf = NULL			}
};

void polling_init(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0
	adc_init();
 8001244:	f7ff f9ac 	bl	80005a0 <adc_init>
	adc_regcbf(0, adc_callback);
 8001248:	4902      	ldr	r1, [pc, #8]	@ (8001254 <polling_init+0x14>)
 800124a:	2000      	movs	r0, #0
 800124c:	f7ff f9b0 	bl	80005b0 <adc_regcbf>
}
 8001250:	bf00      	nop
 8001252:	bd80      	pop	{r7, pc}
 8001254:	080012cd 	.word	0x080012cd

08001258 <polling_thread>:

void polling_thread(void *arg)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
	static uint16_t thr_idx = 0;

	if (gThrObjs[thr_idx].flag == true) {
 8001260:	4b18      	ldr	r3, [pc, #96]	@ (80012c4 <polling_thread+0x6c>)
 8001262:	881b      	ldrh	r3, [r3, #0]
 8001264:	4a18      	ldr	r2, [pc, #96]	@ (80012c8 <polling_thread+0x70>)
 8001266:	011b      	lsls	r3, r3, #4
 8001268:	4413      	add	r3, r2
 800126a:	3308      	adds	r3, #8
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	b2db      	uxtb	r3, r3
 8001270:	2b00      	cmp	r3, #0
 8001272:	d010      	beq.n	8001296 <polling_thread+0x3e>
		gThrObjs[thr_idx].flag = false;
 8001274:	4b13      	ldr	r3, [pc, #76]	@ (80012c4 <polling_thread+0x6c>)
 8001276:	881b      	ldrh	r3, [r3, #0]
 8001278:	4a13      	ldr	r2, [pc, #76]	@ (80012c8 <polling_thread+0x70>)
 800127a:	011b      	lsls	r3, r3, #4
 800127c:	4413      	add	r3, r2
 800127e:	3308      	adds	r3, #8
 8001280:	2200      	movs	r2, #0
 8001282:	701a      	strb	r2, [r3, #0]
		gThrObjs[thr_idx].cbf(NULL);
 8001284:	4b0f      	ldr	r3, [pc, #60]	@ (80012c4 <polling_thread+0x6c>)
 8001286:	881b      	ldrh	r3, [r3, #0]
 8001288:	4a0f      	ldr	r2, [pc, #60]	@ (80012c8 <polling_thread+0x70>)
 800128a:	011b      	lsls	r3, r3, #4
 800128c:	4413      	add	r3, r2
 800128e:	330c      	adds	r3, #12
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	2000      	movs	r0, #0
 8001294:	4798      	blx	r3
	}
	thr_idx++;
 8001296:	4b0b      	ldr	r3, [pc, #44]	@ (80012c4 <polling_thread+0x6c>)
 8001298:	881b      	ldrh	r3, [r3, #0]
 800129a:	3301      	adds	r3, #1
 800129c:	b29a      	uxth	r2, r3
 800129e:	4b09      	ldr	r3, [pc, #36]	@ (80012c4 <polling_thread+0x6c>)
 80012a0:	801a      	strh	r2, [r3, #0]
	if (gThrObjs[thr_idx].cbf == NULL) thr_idx = 0;
 80012a2:	4b08      	ldr	r3, [pc, #32]	@ (80012c4 <polling_thread+0x6c>)
 80012a4:	881b      	ldrh	r3, [r3, #0]
 80012a6:	4a08      	ldr	r2, [pc, #32]	@ (80012c8 <polling_thread+0x70>)
 80012a8:	011b      	lsls	r3, r3, #4
 80012aa:	4413      	add	r3, r2
 80012ac:	330c      	adds	r3, #12
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d102      	bne.n	80012ba <polling_thread+0x62>
 80012b4:	4b03      	ldr	r3, [pc, #12]	@ (80012c4 <polling_thread+0x6c>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	801a      	strh	r2, [r3, #0]
}
 80012ba:	bf00      	nop
 80012bc:	3708      	adds	r7, #8
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	20000936 	.word	0x20000936
 80012c8:	20000014 	.word	0x20000014

080012cc <adc_callback>:

static void adc_callback(void *arg)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
	printf("adc[0] value = %d\r\n", *(uint16_t *)arg);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	881b      	ldrh	r3, [r3, #0]
 80012d8:	4619      	mov	r1, r3
 80012da:	4803      	ldr	r0, [pc, #12]	@ (80012e8 <adc_callback+0x1c>)
 80012dc:	f004 fd14 	bl	8005d08 <iprintf>
}
 80012e0:	bf00      	nop
 80012e2:	3708      	adds	r7, #8
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	08006ed0 	.word	0x08006ed0

080012ec <adc_callback_2>:

static void adc_callback_2(void *arg)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
	printf("adc[1] value = %d\r\n", *(uint16_t *)arg);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	881b      	ldrh	r3, [r3, #0]
 80012f8:	4619      	mov	r1, r3
 80012fa:	4803      	ldr	r0, [pc, #12]	@ (8001308 <adc_callback_2+0x1c>)
 80012fc:	f004 fd04 	bl	8005d08 <iprintf>
}
 8001300:	bf00      	nop
 8001302:	3708      	adds	r7, #8
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	08006ee4 	.word	0x08006ee4

0800130c <polling_update>:

// io.c 파일 HAL_IncTick() 함수에서 호출
// HAL_IncTick() 함수는 systick irq handler에서 호출됨(인터럽트 서비스 루틴임)
// 1ms 마다 호출됨
void polling_update(void)
{
 800130c:	b480      	push	{r7}
 800130e:	b083      	sub	sp, #12
 8001310:	af00      	add	r7, sp, #0
	for (int i=0; gThrObjs[i].cbf != NULL; i++) {
 8001312:	2300      	movs	r3, #0
 8001314:	607b      	str	r3, [r7, #4]
 8001316:	e034      	b.n	8001382 <polling_update+0x76>
		gThrObjs[i].count++;
 8001318:	4a21      	ldr	r2, [pc, #132]	@ (80013a0 <polling_update+0x94>)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	011b      	lsls	r3, r3, #4
 800131e:	4413      	add	r3, r2
 8001320:	3304      	adds	r3, #4
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	1c5a      	adds	r2, r3, #1
 8001326:	491e      	ldr	r1, [pc, #120]	@ (80013a0 <polling_update+0x94>)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	011b      	lsls	r3, r3, #4
 800132c:	440b      	add	r3, r1
 800132e:	3304      	adds	r3, #4
 8001330:	601a      	str	r2, [r3, #0]
		gThrObjs[i].count %= gThrObjs[i].period;
 8001332:	4a1b      	ldr	r2, [pc, #108]	@ (80013a0 <polling_update+0x94>)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	011b      	lsls	r3, r3, #4
 8001338:	4413      	add	r3, r2
 800133a:	681a      	ldr	r2, [r3, #0]
 800133c:	4918      	ldr	r1, [pc, #96]	@ (80013a0 <polling_update+0x94>)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	011b      	lsls	r3, r3, #4
 8001342:	440b      	add	r3, r1
 8001344:	3304      	adds	r3, #4
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	fbb3 f1f2 	udiv	r1, r3, r2
 800134c:	fb01 f202 	mul.w	r2, r1, r2
 8001350:	1a9a      	subs	r2, r3, r2
 8001352:	4913      	ldr	r1, [pc, #76]	@ (80013a0 <polling_update+0x94>)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	011b      	lsls	r3, r3, #4
 8001358:	440b      	add	r3, r1
 800135a:	3304      	adds	r3, #4
 800135c:	601a      	str	r2, [r3, #0]
		if (gThrObjs[i].count == 0) gThrObjs[i].flag = true;
 800135e:	4a10      	ldr	r2, [pc, #64]	@ (80013a0 <polling_update+0x94>)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	011b      	lsls	r3, r3, #4
 8001364:	4413      	add	r3, r2
 8001366:	3304      	adds	r3, #4
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d106      	bne.n	800137c <polling_update+0x70>
 800136e:	4a0c      	ldr	r2, [pc, #48]	@ (80013a0 <polling_update+0x94>)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	011b      	lsls	r3, r3, #4
 8001374:	4413      	add	r3, r2
 8001376:	3308      	adds	r3, #8
 8001378:	2201      	movs	r2, #1
 800137a:	701a      	strb	r2, [r3, #0]
	for (int i=0; gThrObjs[i].cbf != NULL; i++) {
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	3301      	adds	r3, #1
 8001380:	607b      	str	r3, [r7, #4]
 8001382:	4a07      	ldr	r2, [pc, #28]	@ (80013a0 <polling_update+0x94>)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	011b      	lsls	r3, r3, #4
 8001388:	4413      	add	r3, r2
 800138a:	330c      	adds	r3, #12
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d1c2      	bne.n	8001318 <polling_update+0xc>
	}
}
 8001392:	bf00      	nop
 8001394:	bf00      	nop
 8001396:	370c      	adds	r7, #12
 8001398:	46bd      	mov	sp, r7
 800139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139e:	4770      	bx	lr
 80013a0:	20000014 	.word	0x20000014

080013a4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b083      	sub	sp, #12
 80013a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013aa:	2300      	movs	r3, #0
 80013ac:	607b      	str	r3, [r7, #4]
 80013ae:	4b10      	ldr	r3, [pc, #64]	@ (80013f0 <HAL_MspInit+0x4c>)
 80013b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013b2:	4a0f      	ldr	r2, [pc, #60]	@ (80013f0 <HAL_MspInit+0x4c>)
 80013b4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80013ba:	4b0d      	ldr	r3, [pc, #52]	@ (80013f0 <HAL_MspInit+0x4c>)
 80013bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013c2:	607b      	str	r3, [r7, #4]
 80013c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013c6:	2300      	movs	r3, #0
 80013c8:	603b      	str	r3, [r7, #0]
 80013ca:	4b09      	ldr	r3, [pc, #36]	@ (80013f0 <HAL_MspInit+0x4c>)
 80013cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ce:	4a08      	ldr	r2, [pc, #32]	@ (80013f0 <HAL_MspInit+0x4c>)
 80013d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80013d6:	4b06      	ldr	r3, [pc, #24]	@ (80013f0 <HAL_MspInit+0x4c>)
 80013d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013de:	603b      	str	r3, [r7, #0]
 80013e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013e2:	bf00      	nop
 80013e4:	370c      	adds	r7, #12
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr
 80013ee:	bf00      	nop
 80013f0:	40023800 	.word	0x40023800

080013f4 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b08e      	sub	sp, #56	@ 0x38
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001400:	2200      	movs	r2, #0
 8001402:	601a      	str	r2, [r3, #0]
 8001404:	605a      	str	r2, [r3, #4]
 8001406:	609a      	str	r2, [r3, #8]
 8001408:	60da      	str	r2, [r3, #12]
 800140a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a55      	ldr	r2, [pc, #340]	@ (8001568 <HAL_ETH_MspInit+0x174>)
 8001412:	4293      	cmp	r3, r2
 8001414:	f040 80a4 	bne.w	8001560 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001418:	2300      	movs	r3, #0
 800141a:	623b      	str	r3, [r7, #32]
 800141c:	4b53      	ldr	r3, [pc, #332]	@ (800156c <HAL_ETH_MspInit+0x178>)
 800141e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001420:	4a52      	ldr	r2, [pc, #328]	@ (800156c <HAL_ETH_MspInit+0x178>)
 8001422:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001426:	6313      	str	r3, [r2, #48]	@ 0x30
 8001428:	4b50      	ldr	r3, [pc, #320]	@ (800156c <HAL_ETH_MspInit+0x178>)
 800142a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800142c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001430:	623b      	str	r3, [r7, #32]
 8001432:	6a3b      	ldr	r3, [r7, #32]
 8001434:	2300      	movs	r3, #0
 8001436:	61fb      	str	r3, [r7, #28]
 8001438:	4b4c      	ldr	r3, [pc, #304]	@ (800156c <HAL_ETH_MspInit+0x178>)
 800143a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800143c:	4a4b      	ldr	r2, [pc, #300]	@ (800156c <HAL_ETH_MspInit+0x178>)
 800143e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001442:	6313      	str	r3, [r2, #48]	@ 0x30
 8001444:	4b49      	ldr	r3, [pc, #292]	@ (800156c <HAL_ETH_MspInit+0x178>)
 8001446:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001448:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800144c:	61fb      	str	r3, [r7, #28]
 800144e:	69fb      	ldr	r3, [r7, #28]
 8001450:	2300      	movs	r3, #0
 8001452:	61bb      	str	r3, [r7, #24]
 8001454:	4b45      	ldr	r3, [pc, #276]	@ (800156c <HAL_ETH_MspInit+0x178>)
 8001456:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001458:	4a44      	ldr	r2, [pc, #272]	@ (800156c <HAL_ETH_MspInit+0x178>)
 800145a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800145e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001460:	4b42      	ldr	r3, [pc, #264]	@ (800156c <HAL_ETH_MspInit+0x178>)
 8001462:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001464:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001468:	61bb      	str	r3, [r7, #24]
 800146a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800146c:	2300      	movs	r3, #0
 800146e:	617b      	str	r3, [r7, #20]
 8001470:	4b3e      	ldr	r3, [pc, #248]	@ (800156c <HAL_ETH_MspInit+0x178>)
 8001472:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001474:	4a3d      	ldr	r2, [pc, #244]	@ (800156c <HAL_ETH_MspInit+0x178>)
 8001476:	f043 0304 	orr.w	r3, r3, #4
 800147a:	6313      	str	r3, [r2, #48]	@ 0x30
 800147c:	4b3b      	ldr	r3, [pc, #236]	@ (800156c <HAL_ETH_MspInit+0x178>)
 800147e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001480:	f003 0304 	and.w	r3, r3, #4
 8001484:	617b      	str	r3, [r7, #20]
 8001486:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001488:	2300      	movs	r3, #0
 800148a:	613b      	str	r3, [r7, #16]
 800148c:	4b37      	ldr	r3, [pc, #220]	@ (800156c <HAL_ETH_MspInit+0x178>)
 800148e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001490:	4a36      	ldr	r2, [pc, #216]	@ (800156c <HAL_ETH_MspInit+0x178>)
 8001492:	f043 0301 	orr.w	r3, r3, #1
 8001496:	6313      	str	r3, [r2, #48]	@ 0x30
 8001498:	4b34      	ldr	r3, [pc, #208]	@ (800156c <HAL_ETH_MspInit+0x178>)
 800149a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800149c:	f003 0301 	and.w	r3, r3, #1
 80014a0:	613b      	str	r3, [r7, #16]
 80014a2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014a4:	2300      	movs	r3, #0
 80014a6:	60fb      	str	r3, [r7, #12]
 80014a8:	4b30      	ldr	r3, [pc, #192]	@ (800156c <HAL_ETH_MspInit+0x178>)
 80014aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ac:	4a2f      	ldr	r2, [pc, #188]	@ (800156c <HAL_ETH_MspInit+0x178>)
 80014ae:	f043 0302 	orr.w	r3, r3, #2
 80014b2:	6313      	str	r3, [r2, #48]	@ 0x30
 80014b4:	4b2d      	ldr	r3, [pc, #180]	@ (800156c <HAL_ETH_MspInit+0x178>)
 80014b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014b8:	f003 0302 	and.w	r3, r3, #2
 80014bc:	60fb      	str	r3, [r7, #12]
 80014be:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80014c0:	2300      	movs	r3, #0
 80014c2:	60bb      	str	r3, [r7, #8]
 80014c4:	4b29      	ldr	r3, [pc, #164]	@ (800156c <HAL_ETH_MspInit+0x178>)
 80014c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014c8:	4a28      	ldr	r2, [pc, #160]	@ (800156c <HAL_ETH_MspInit+0x178>)
 80014ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80014ce:	6313      	str	r3, [r2, #48]	@ 0x30
 80014d0:	4b26      	ldr	r3, [pc, #152]	@ (800156c <HAL_ETH_MspInit+0x178>)
 80014d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80014d8:	60bb      	str	r3, [r7, #8]
 80014da:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80014dc:	2332      	movs	r3, #50	@ 0x32
 80014de:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e0:	2302      	movs	r3, #2
 80014e2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e4:	2300      	movs	r3, #0
 80014e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014e8:	2303      	movs	r3, #3
 80014ea:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80014ec:	230b      	movs	r3, #11
 80014ee:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014f4:	4619      	mov	r1, r3
 80014f6:	481e      	ldr	r0, [pc, #120]	@ (8001570 <HAL_ETH_MspInit+0x17c>)
 80014f8:	f001 f8d0 	bl	800269c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80014fc:	2386      	movs	r3, #134	@ 0x86
 80014fe:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001500:	2302      	movs	r3, #2
 8001502:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001504:	2300      	movs	r3, #0
 8001506:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001508:	2303      	movs	r3, #3
 800150a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800150c:	230b      	movs	r3, #11
 800150e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001510:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001514:	4619      	mov	r1, r3
 8001516:	4817      	ldr	r0, [pc, #92]	@ (8001574 <HAL_ETH_MspInit+0x180>)
 8001518:	f001 f8c0 	bl	800269c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800151c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001520:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001522:	2302      	movs	r3, #2
 8001524:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001526:	2300      	movs	r3, #0
 8001528:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800152a:	2303      	movs	r3, #3
 800152c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800152e:	230b      	movs	r3, #11
 8001530:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001532:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001536:	4619      	mov	r1, r3
 8001538:	480f      	ldr	r0, [pc, #60]	@ (8001578 <HAL_ETH_MspInit+0x184>)
 800153a:	f001 f8af 	bl	800269c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800153e:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8001542:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001544:	2302      	movs	r3, #2
 8001546:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001548:	2300      	movs	r3, #0
 800154a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800154c:	2303      	movs	r3, #3
 800154e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001550:	230b      	movs	r3, #11
 8001552:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001554:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001558:	4619      	mov	r1, r3
 800155a:	4808      	ldr	r0, [pc, #32]	@ (800157c <HAL_ETH_MspInit+0x188>)
 800155c:	f001 f89e 	bl	800269c <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001560:	bf00      	nop
 8001562:	3738      	adds	r7, #56	@ 0x38
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	40028000 	.word	0x40028000
 800156c:	40023800 	.word	0x40023800
 8001570:	40020800 	.word	0x40020800
 8001574:	40020000 	.word	0x40020000
 8001578:	40020400 	.word	0x40020400
 800157c:	40021800 	.word	0x40021800

08001580 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001580:	b480      	push	{r7}
 8001582:	b085      	sub	sp, #20
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a0b      	ldr	r2, [pc, #44]	@ (80015bc <HAL_TIM_Base_MspInit+0x3c>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d10d      	bne.n	80015ae <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001592:	2300      	movs	r3, #0
 8001594:	60fb      	str	r3, [r7, #12]
 8001596:	4b0a      	ldr	r3, [pc, #40]	@ (80015c0 <HAL_TIM_Base_MspInit+0x40>)
 8001598:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800159a:	4a09      	ldr	r2, [pc, #36]	@ (80015c0 <HAL_TIM_Base_MspInit+0x40>)
 800159c:	f043 0302 	orr.w	r3, r3, #2
 80015a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80015a2:	4b07      	ldr	r3, [pc, #28]	@ (80015c0 <HAL_TIM_Base_MspInit+0x40>)
 80015a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015a6:	f003 0302 	and.w	r3, r3, #2
 80015aa:	60fb      	str	r3, [r7, #12]
 80015ac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80015ae:	bf00      	nop
 80015b0:	3714      	adds	r7, #20
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr
 80015ba:	bf00      	nop
 80015bc:	40000400 	.word	0x40000400
 80015c0:	40023800 	.word	0x40023800

080015c4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b088      	sub	sp, #32
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015cc:	f107 030c 	add.w	r3, r7, #12
 80015d0:	2200      	movs	r2, #0
 80015d2:	601a      	str	r2, [r3, #0]
 80015d4:	605a      	str	r2, [r3, #4]
 80015d6:	609a      	str	r2, [r3, #8]
 80015d8:	60da      	str	r2, [r3, #12]
 80015da:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a12      	ldr	r2, [pc, #72]	@ (800162c <HAL_TIM_MspPostInit+0x68>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d11d      	bne.n	8001622 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015e6:	2300      	movs	r3, #0
 80015e8:	60bb      	str	r3, [r7, #8]
 80015ea:	4b11      	ldr	r3, [pc, #68]	@ (8001630 <HAL_TIM_MspPostInit+0x6c>)
 80015ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ee:	4a10      	ldr	r2, [pc, #64]	@ (8001630 <HAL_TIM_MspPostInit+0x6c>)
 80015f0:	f043 0302 	orr.w	r3, r3, #2
 80015f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80015f6:	4b0e      	ldr	r3, [pc, #56]	@ (8001630 <HAL_TIM_MspPostInit+0x6c>)
 80015f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015fa:	f003 0302 	and.w	r3, r3, #2
 80015fe:	60bb      	str	r3, [r7, #8]
 8001600:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001602:	2301      	movs	r3, #1
 8001604:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001606:	2302      	movs	r3, #2
 8001608:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160a:	2300      	movs	r3, #0
 800160c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800160e:	2300      	movs	r3, #0
 8001610:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001612:	2302      	movs	r3, #2
 8001614:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001616:	f107 030c 	add.w	r3, r7, #12
 800161a:	4619      	mov	r1, r3
 800161c:	4805      	ldr	r0, [pc, #20]	@ (8001634 <HAL_TIM_MspPostInit+0x70>)
 800161e:	f001 f83d 	bl	800269c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001622:	bf00      	nop
 8001624:	3720      	adds	r7, #32
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	40000400 	.word	0x40000400
 8001630:	40023800 	.word	0x40023800
 8001634:	40020400 	.word	0x40020400

08001638 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b08a      	sub	sp, #40	@ 0x28
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001640:	f107 0314 	add.w	r3, r7, #20
 8001644:	2200      	movs	r2, #0
 8001646:	601a      	str	r2, [r3, #0]
 8001648:	605a      	str	r2, [r3, #4]
 800164a:	609a      	str	r2, [r3, #8]
 800164c:	60da      	str	r2, [r3, #12]
 800164e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a1d      	ldr	r2, [pc, #116]	@ (80016cc <HAL_UART_MspInit+0x94>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d134      	bne.n	80016c4 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800165a:	2300      	movs	r3, #0
 800165c:	613b      	str	r3, [r7, #16]
 800165e:	4b1c      	ldr	r3, [pc, #112]	@ (80016d0 <HAL_UART_MspInit+0x98>)
 8001660:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001662:	4a1b      	ldr	r2, [pc, #108]	@ (80016d0 <HAL_UART_MspInit+0x98>)
 8001664:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001668:	6413      	str	r3, [r2, #64]	@ 0x40
 800166a:	4b19      	ldr	r3, [pc, #100]	@ (80016d0 <HAL_UART_MspInit+0x98>)
 800166c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800166e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001672:	613b      	str	r3, [r7, #16]
 8001674:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001676:	2300      	movs	r3, #0
 8001678:	60fb      	str	r3, [r7, #12]
 800167a:	4b15      	ldr	r3, [pc, #84]	@ (80016d0 <HAL_UART_MspInit+0x98>)
 800167c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800167e:	4a14      	ldr	r2, [pc, #80]	@ (80016d0 <HAL_UART_MspInit+0x98>)
 8001680:	f043 0308 	orr.w	r3, r3, #8
 8001684:	6313      	str	r3, [r2, #48]	@ 0x30
 8001686:	4b12      	ldr	r3, [pc, #72]	@ (80016d0 <HAL_UART_MspInit+0x98>)
 8001688:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800168a:	f003 0308 	and.w	r3, r3, #8
 800168e:	60fb      	str	r3, [r7, #12]
 8001690:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001692:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001696:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001698:	2302      	movs	r3, #2
 800169a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169c:	2300      	movs	r3, #0
 800169e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016a0:	2303      	movs	r3, #3
 80016a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80016a4:	2307      	movs	r3, #7
 80016a6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016a8:	f107 0314 	add.w	r3, r7, #20
 80016ac:	4619      	mov	r1, r3
 80016ae:	4809      	ldr	r0, [pc, #36]	@ (80016d4 <HAL_UART_MspInit+0x9c>)
 80016b0:	f000 fff4 	bl	800269c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 12, 0);
 80016b4:	2200      	movs	r2, #0
 80016b6:	210c      	movs	r1, #12
 80016b8:	2027      	movs	r0, #39	@ 0x27
 80016ba:	f000 fbfe 	bl	8001eba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80016be:	2027      	movs	r0, #39	@ 0x27
 80016c0:	f000 fc17 	bl	8001ef2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80016c4:	bf00      	nop
 80016c6:	3728      	adds	r7, #40	@ 0x28
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	40004800 	.word	0x40004800
 80016d0:	40023800 	.word	0x40023800
 80016d4:	40020c00 	.word	0x40020c00

080016d8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b08a      	sub	sp, #40	@ 0x28
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e0:	f107 0314 	add.w	r3, r7, #20
 80016e4:	2200      	movs	r2, #0
 80016e6:	601a      	str	r2, [r3, #0]
 80016e8:	605a      	str	r2, [r3, #4]
 80016ea:	609a      	str	r2, [r3, #8]
 80016ec:	60da      	str	r2, [r3, #12]
 80016ee:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80016f8:	d13f      	bne.n	800177a <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016fa:	2300      	movs	r3, #0
 80016fc:	613b      	str	r3, [r7, #16]
 80016fe:	4b21      	ldr	r3, [pc, #132]	@ (8001784 <HAL_PCD_MspInit+0xac>)
 8001700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001702:	4a20      	ldr	r2, [pc, #128]	@ (8001784 <HAL_PCD_MspInit+0xac>)
 8001704:	f043 0301 	orr.w	r3, r3, #1
 8001708:	6313      	str	r3, [r2, #48]	@ 0x30
 800170a:	4b1e      	ldr	r3, [pc, #120]	@ (8001784 <HAL_PCD_MspInit+0xac>)
 800170c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800170e:	f003 0301 	and.w	r3, r3, #1
 8001712:	613b      	str	r3, [r7, #16]
 8001714:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001716:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 800171a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800171c:	2302      	movs	r3, #2
 800171e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001720:	2300      	movs	r3, #0
 8001722:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001724:	2303      	movs	r3, #3
 8001726:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001728:	230a      	movs	r3, #10
 800172a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800172c:	f107 0314 	add.w	r3, r7, #20
 8001730:	4619      	mov	r1, r3
 8001732:	4815      	ldr	r0, [pc, #84]	@ (8001788 <HAL_PCD_MspInit+0xb0>)
 8001734:	f000 ffb2 	bl	800269c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001738:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800173c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800173e:	2300      	movs	r3, #0
 8001740:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001742:	2300      	movs	r3, #0
 8001744:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001746:	f107 0314 	add.w	r3, r7, #20
 800174a:	4619      	mov	r1, r3
 800174c:	480e      	ldr	r0, [pc, #56]	@ (8001788 <HAL_PCD_MspInit+0xb0>)
 800174e:	f000 ffa5 	bl	800269c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001752:	4b0c      	ldr	r3, [pc, #48]	@ (8001784 <HAL_PCD_MspInit+0xac>)
 8001754:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001756:	4a0b      	ldr	r2, [pc, #44]	@ (8001784 <HAL_PCD_MspInit+0xac>)
 8001758:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800175c:	6353      	str	r3, [r2, #52]	@ 0x34
 800175e:	2300      	movs	r3, #0
 8001760:	60fb      	str	r3, [r7, #12]
 8001762:	4b08      	ldr	r3, [pc, #32]	@ (8001784 <HAL_PCD_MspInit+0xac>)
 8001764:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001766:	4a07      	ldr	r2, [pc, #28]	@ (8001784 <HAL_PCD_MspInit+0xac>)
 8001768:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800176c:	6453      	str	r3, [r2, #68]	@ 0x44
 800176e:	4b05      	ldr	r3, [pc, #20]	@ (8001784 <HAL_PCD_MspInit+0xac>)
 8001770:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001772:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001776:	60fb      	str	r3, [r7, #12]
 8001778:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800177a:	bf00      	nop
 800177c:	3728      	adds	r7, #40	@ 0x28
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	40023800 	.word	0x40023800
 8001788:	40020000 	.word	0x40020000

0800178c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001790:	bf00      	nop
 8001792:	e7fd      	b.n	8001790 <NMI_Handler+0x4>

08001794 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001798:	bf00      	nop
 800179a:	e7fd      	b.n	8001798 <HardFault_Handler+0x4>

0800179c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017a0:	bf00      	nop
 80017a2:	e7fd      	b.n	80017a0 <MemManage_Handler+0x4>

080017a4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017a8:	bf00      	nop
 80017aa:	e7fd      	b.n	80017a8 <BusFault_Handler+0x4>

080017ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017b0:	bf00      	nop
 80017b2:	e7fd      	b.n	80017b0 <UsageFault_Handler+0x4>

080017b4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017b8:	bf00      	nop
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr

080017c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017c2:	b480      	push	{r7}
 80017c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017c6:	bf00      	nop
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr

080017d0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017d4:	bf00      	nop
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr

080017de <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017de:	b580      	push	{r7, lr}
 80017e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017e2:	f7ff f9eb 	bl	8000bbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017e6:	bf00      	nop
 80017e8:	bd80      	pop	{r7, pc}
	...

080017ec <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80017f0:	4802      	ldr	r0, [pc, #8]	@ (80017fc <USART3_IRQHandler+0x10>)
 80017f2:	f002 feed 	bl	80045d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80017f6:	bf00      	nop
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	20000404 	.word	0x20000404

08001800 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8001804:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001808:	f001 f926 	bl	8002a58 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800180c:	bf00      	nop
 800180e:	bd80      	pop	{r7, pc}

08001810 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  return 1;
 8001814:	2301      	movs	r3, #1
}
 8001816:	4618      	mov	r0, r3
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr

08001820 <_kill>:

int _kill(int pid, int sig)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800182a:	f004 fc79 	bl	8006120 <__errno>
 800182e:	4603      	mov	r3, r0
 8001830:	2216      	movs	r2, #22
 8001832:	601a      	str	r2, [r3, #0]
  return -1;
 8001834:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001838:	4618      	mov	r0, r3
 800183a:	3708      	adds	r7, #8
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}

08001840 <_exit>:

void _exit (int status)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001848:	f04f 31ff 	mov.w	r1, #4294967295
 800184c:	6878      	ldr	r0, [r7, #4]
 800184e:	f7ff ffe7 	bl	8001820 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001852:	bf00      	nop
 8001854:	e7fd      	b.n	8001852 <_exit+0x12>

08001856 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001856:	b580      	push	{r7, lr}
 8001858:	b086      	sub	sp, #24
 800185a:	af00      	add	r7, sp, #0
 800185c:	60f8      	str	r0, [r7, #12]
 800185e:	60b9      	str	r1, [r7, #8]
 8001860:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001862:	2300      	movs	r3, #0
 8001864:	617b      	str	r3, [r7, #20]
 8001866:	e00a      	b.n	800187e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001868:	f3af 8000 	nop.w
 800186c:	4601      	mov	r1, r0
 800186e:	68bb      	ldr	r3, [r7, #8]
 8001870:	1c5a      	adds	r2, r3, #1
 8001872:	60ba      	str	r2, [r7, #8]
 8001874:	b2ca      	uxtb	r2, r1
 8001876:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	3301      	adds	r3, #1
 800187c:	617b      	str	r3, [r7, #20]
 800187e:	697a      	ldr	r2, [r7, #20]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	429a      	cmp	r2, r3
 8001884:	dbf0      	blt.n	8001868 <_read+0x12>
  }

  return len;
 8001886:	687b      	ldr	r3, [r7, #4]
}
 8001888:	4618      	mov	r0, r3
 800188a:	3718      	adds	r7, #24
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}

08001890 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b086      	sub	sp, #24
 8001894:	af00      	add	r7, sp, #0
 8001896:	60f8      	str	r0, [r7, #12]
 8001898:	60b9      	str	r1, [r7, #8]
 800189a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800189c:	2300      	movs	r3, #0
 800189e:	617b      	str	r3, [r7, #20]
 80018a0:	e009      	b.n	80018b6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80018a2:	68bb      	ldr	r3, [r7, #8]
 80018a4:	1c5a      	adds	r2, r3, #1
 80018a6:	60ba      	str	r2, [r7, #8]
 80018a8:	781b      	ldrb	r3, [r3, #0]
 80018aa:	4618      	mov	r0, r3
 80018ac:	f7ff f974 	bl	8000b98 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	3301      	adds	r3, #1
 80018b4:	617b      	str	r3, [r7, #20]
 80018b6:	697a      	ldr	r2, [r7, #20]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	429a      	cmp	r2, r3
 80018bc:	dbf1      	blt.n	80018a2 <_write+0x12>
  }
  return len;
 80018be:	687b      	ldr	r3, [r7, #4]
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	3718      	adds	r7, #24
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}

080018c8 <_close>:

int _close(int file)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b083      	sub	sp, #12
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80018d0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	370c      	adds	r7, #12
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr

080018e0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b083      	sub	sp, #12
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
 80018e8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80018f0:	605a      	str	r2, [r3, #4]
  return 0;
 80018f2:	2300      	movs	r3, #0
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	370c      	adds	r7, #12
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr

08001900 <_isatty>:

int _isatty(int file)
{
 8001900:	b480      	push	{r7}
 8001902:	b083      	sub	sp, #12
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001908:	2301      	movs	r3, #1
}
 800190a:	4618      	mov	r0, r3
 800190c:	370c      	adds	r7, #12
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr

08001916 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001916:	b480      	push	{r7}
 8001918:	b085      	sub	sp, #20
 800191a:	af00      	add	r7, sp, #0
 800191c:	60f8      	str	r0, [r7, #12]
 800191e:	60b9      	str	r1, [r7, #8]
 8001920:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001922:	2300      	movs	r3, #0
}
 8001924:	4618      	mov	r0, r3
 8001926:	3714      	adds	r7, #20
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr

08001930 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b086      	sub	sp, #24
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001938:	4a14      	ldr	r2, [pc, #80]	@ (800198c <_sbrk+0x5c>)
 800193a:	4b15      	ldr	r3, [pc, #84]	@ (8001990 <_sbrk+0x60>)
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001944:	4b13      	ldr	r3, [pc, #76]	@ (8001994 <_sbrk+0x64>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d102      	bne.n	8001952 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800194c:	4b11      	ldr	r3, [pc, #68]	@ (8001994 <_sbrk+0x64>)
 800194e:	4a12      	ldr	r2, [pc, #72]	@ (8001998 <_sbrk+0x68>)
 8001950:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001952:	4b10      	ldr	r3, [pc, #64]	@ (8001994 <_sbrk+0x64>)
 8001954:	681a      	ldr	r2, [r3, #0]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	4413      	add	r3, r2
 800195a:	693a      	ldr	r2, [r7, #16]
 800195c:	429a      	cmp	r2, r3
 800195e:	d207      	bcs.n	8001970 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001960:	f004 fbde 	bl	8006120 <__errno>
 8001964:	4603      	mov	r3, r0
 8001966:	220c      	movs	r2, #12
 8001968:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800196a:	f04f 33ff 	mov.w	r3, #4294967295
 800196e:	e009      	b.n	8001984 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001970:	4b08      	ldr	r3, [pc, #32]	@ (8001994 <_sbrk+0x64>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001976:	4b07      	ldr	r3, [pc, #28]	@ (8001994 <_sbrk+0x64>)
 8001978:	681a      	ldr	r2, [r3, #0]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	4413      	add	r3, r2
 800197e:	4a05      	ldr	r2, [pc, #20]	@ (8001994 <_sbrk+0x64>)
 8001980:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001982:	68fb      	ldr	r3, [r7, #12]
}
 8001984:	4618      	mov	r0, r3
 8001986:	3718      	adds	r7, #24
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}
 800198c:	20030000 	.word	0x20030000
 8001990:	00000400 	.word	0x00000400
 8001994:	20000938 	.word	0x20000938
 8001998:	20000bd0 	.word	0x20000bd0

0800199c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019a0:	4b06      	ldr	r3, [pc, #24]	@ (80019bc <SystemInit+0x20>)
 80019a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80019a6:	4a05      	ldr	r2, [pc, #20]	@ (80019bc <SystemInit+0x20>)
 80019a8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80019ac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019b0:	bf00      	nop
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr
 80019ba:	bf00      	nop
 80019bc:	e000ed00 	.word	0xe000ed00

080019c0 <tim_init>:
void tim_duty_set(uint16_t duty);

extern TIM_HandleTypeDef htim3;

void tim_init(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start(&htim3);
 80019c4:	4804      	ldr	r0, [pc, #16]	@ (80019d8 <tim_init+0x18>)
 80019c6:	f001 fe57 	bl	8003678 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80019ca:	2108      	movs	r1, #8
 80019cc:	4802      	ldr	r0, [pc, #8]	@ (80019d8 <tim_init+0x18>)
 80019ce:	f001 ff15 	bl	80037fc <HAL_TIM_PWM_Start>
}
 80019d2:	bf00      	nop
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	200003bc 	.word	0x200003bc

080019dc <tim_thread>:

void tim_thread(void *arg)
{
 80019dc:	b480      	push	{r7}
 80019de:	b083      	sub	sp, #12
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
	//tim_duty_set((uint16_t)300);
}
 80019e4:	bf00      	nop
 80019e6:	370c      	adds	r7, #12
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr

080019f0 <tim_duty_set>:

void tim_duty_set(uint16_t duty)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b082      	sub	sp, #8
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	4603      	mov	r3, r0
 80019f8:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, duty);
 80019fa:	4b06      	ldr	r3, [pc, #24]	@ (8001a14 <tim_duty_set+0x24>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	88fa      	ldrh	r2, [r7, #6]
 8001a00:	63da      	str	r2, [r3, #60]	@ 0x3c
	printf("change duty : %d\r\n", duty);
 8001a02:	88fb      	ldrh	r3, [r7, #6]
 8001a04:	4619      	mov	r1, r3
 8001a06:	4804      	ldr	r0, [pc, #16]	@ (8001a18 <tim_duty_set+0x28>)
 8001a08:	f004 f97e 	bl	8005d08 <iprintf>
}
 8001a0c:	bf00      	nop
 8001a0e:	3708      	adds	r7, #8
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	200003bc 	.word	0x200003bc
 8001a18:	08006ef8 	.word	0x08006ef8

08001a1c <uart_init>:
static BUF_T gBufObjs[D_BUF_OBJ_MAX];

static void (*uart_cbf)(void *);

void uart_init(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b082      	sub	sp, #8
 8001a20:	af00      	add	r7, sp, #0
	for (int i=0; i<D_BUF_OBJ_MAX; i++) {
 8001a22:	2300      	movs	r3, #0
 8001a24:	607b      	str	r3, [r7, #4]
 8001a26:	e014      	b.n	8001a52 <uart_init+0x36>
		gBufObjs[i].idx = 0;
 8001a28:	4a10      	ldr	r2, [pc, #64]	@ (8001a6c <uart_init+0x50>)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2167      	movs	r1, #103	@ 0x67
 8001a2e:	fb01 f303 	mul.w	r3, r1, r3
 8001a32:	4413      	add	r3, r2
 8001a34:	3365      	adds	r3, #101	@ 0x65
 8001a36:	2200      	movs	r2, #0
 8001a38:	701a      	strb	r2, [r3, #0]
		gBufObjs[i].flag = false;
 8001a3a:	4a0c      	ldr	r2, [pc, #48]	@ (8001a6c <uart_init+0x50>)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2167      	movs	r1, #103	@ 0x67
 8001a40:	fb01 f303 	mul.w	r3, r1, r3
 8001a44:	4413      	add	r3, r2
 8001a46:	3366      	adds	r3, #102	@ 0x66
 8001a48:	2200      	movs	r2, #0
 8001a4a:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<D_BUF_OBJ_MAX; i++) {
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	3301      	adds	r3, #1
 8001a50:	607b      	str	r3, [r7, #4]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2b02      	cmp	r3, #2
 8001a56:	dde7      	ble.n	8001a28 <uart_init+0xc>
	}

	// 인터럽트 방식 수신 시작 : 1바이트
	HAL_UART_Receive_IT(&huart3, (uint8_t *)&rxdata[0], 1);
 8001a58:	2201      	movs	r2, #1
 8001a5a:	4905      	ldr	r1, [pc, #20]	@ (8001a70 <uart_init+0x54>)
 8001a5c:	4805      	ldr	r0, [pc, #20]	@ (8001a74 <uart_init+0x58>)
 8001a5e:	f002 fd92 	bl	8004586 <HAL_UART_Receive_IT>
}
 8001a62:	bf00      	nop
 8001a64:	3708      	adds	r7, #8
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	20000940 	.word	0x20000940
 8001a70:	2000093c 	.word	0x2000093c
 8001a74:	20000404 	.word	0x20000404

08001a78 <uart_regcbf>:

void uart_regcbf(void (*cbf)(void *))
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b083      	sub	sp, #12
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
	uart_cbf = cbf;
 8001a80:	4a04      	ldr	r2, [pc, #16]	@ (8001a94 <uart_regcbf+0x1c>)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6013      	str	r3, [r2, #0]
}
 8001a86:	bf00      	nop
 8001a88:	370c      	adds	r7, #12
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr
 8001a92:	bf00      	nop
 8001a94:	20000a78 	.word	0x20000a78

08001a98 <uart_thread>:

void uart_thread(void *arg)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b084      	sub	sp, #16
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
	for (int i=0; i<D_BUF_OBJ_MAX; i++) {
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	60fb      	str	r3, [r7, #12]
 8001aa4:	e02c      	b.n	8001b00 <uart_thread+0x68>
		if (gBufObjs[i].flag == true) {
 8001aa6:	4a1a      	ldr	r2, [pc, #104]	@ (8001b10 <uart_thread+0x78>)
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	2167      	movs	r1, #103	@ 0x67
 8001aac:	fb01 f303 	mul.w	r3, r1, r3
 8001ab0:	4413      	add	r3, r2
 8001ab2:	3366      	adds	r3, #102	@ 0x66
 8001ab4:	781b      	ldrb	r3, [r3, #0]
 8001ab6:	2b01      	cmp	r3, #1
 8001ab8:	d11f      	bne.n	8001afa <uart_thread+0x62>
			if (uart_cbf != NULL) uart_cbf((void *)&gBufObjs[i]);
 8001aba:	4b16      	ldr	r3, [pc, #88]	@ (8001b14 <uart_thread+0x7c>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d009      	beq.n	8001ad6 <uart_thread+0x3e>
 8001ac2:	4b14      	ldr	r3, [pc, #80]	@ (8001b14 <uart_thread+0x7c>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	68fa      	ldr	r2, [r7, #12]
 8001ac8:	2167      	movs	r1, #103	@ 0x67
 8001aca:	fb01 f202 	mul.w	r2, r1, r2
 8001ace:	4910      	ldr	r1, [pc, #64]	@ (8001b10 <uart_thread+0x78>)
 8001ad0:	440a      	add	r2, r1
 8001ad2:	4610      	mov	r0, r2
 8001ad4:	4798      	blx	r3
			gBufObjs[i].idx = 0;
 8001ad6:	4a0e      	ldr	r2, [pc, #56]	@ (8001b10 <uart_thread+0x78>)
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	2167      	movs	r1, #103	@ 0x67
 8001adc:	fb01 f303 	mul.w	r3, r1, r3
 8001ae0:	4413      	add	r3, r2
 8001ae2:	3365      	adds	r3, #101	@ 0x65
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	701a      	strb	r2, [r3, #0]
			gBufObjs[i].flag = false;
 8001ae8:	4a09      	ldr	r2, [pc, #36]	@ (8001b10 <uart_thread+0x78>)
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	2167      	movs	r1, #103	@ 0x67
 8001aee:	fb01 f303 	mul.w	r3, r1, r3
 8001af2:	4413      	add	r3, r2
 8001af4:	3366      	adds	r3, #102	@ 0x66
 8001af6:	2200      	movs	r2, #0
 8001af8:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<D_BUF_OBJ_MAX; i++) {
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	3301      	adds	r3, #1
 8001afe:	60fb      	str	r3, [r7, #12]
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	2b02      	cmp	r3, #2
 8001b04:	ddcf      	ble.n	8001aa6 <uart_thread+0xe>
		}
	}
}
 8001b06:	bf00      	nop
 8001b08:	bf00      	nop
 8001b0a:	3710      	adds	r7, #16
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	20000940 	.word	0x20000940
 8001b14:	20000a78 	.word	0x20000a78

08001b18 <HAL_UART_RxCpltCallback>:

// 인터럽트 서비스 루틴 (ISR)
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b084      	sub	sp, #16
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
	volatile uint8_t rxd;

	if (huart == &huart3) {
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	4a1f      	ldr	r2, [pc, #124]	@ (8001ba0 <HAL_UART_RxCpltCallback+0x88>)
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d136      	bne.n	8001b96 <HAL_UART_RxCpltCallback+0x7e>
		rxd = rxdata[0];
 8001b28:	4b1e      	ldr	r3, [pc, #120]	@ (8001ba4 <HAL_UART_RxCpltCallback+0x8c>)
 8001b2a:	781b      	ldrb	r3, [r3, #0]
 8001b2c:	72fb      	strb	r3, [r7, #11]
		HAL_UART_Receive_IT(huart, (uint8_t *)&rxdata[0], 1);
 8001b2e:	2201      	movs	r2, #1
 8001b30:	491c      	ldr	r1, [pc, #112]	@ (8001ba4 <HAL_UART_RxCpltCallback+0x8c>)
 8001b32:	6878      	ldr	r0, [r7, #4]
 8001b34:	f002 fd27 	bl	8004586 <HAL_UART_Receive_IT>

		BUF_T *p = (BUF_T *)&gBufObjs[0];
 8001b38:	4b1b      	ldr	r3, [pc, #108]	@ (8001ba8 <HAL_UART_RxCpltCallback+0x90>)
 8001b3a:	60fb      	str	r3, [r7, #12]
		if (p->flag == false) {
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	f893 3066 	ldrb.w	r3, [r3, #102]	@ 0x66
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d127      	bne.n	8001b96 <HAL_UART_RxCpltCallback+0x7e>
			p->buf[p->idx] = rxd;
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	f893 3065 	ldrb.w	r3, [r3, #101]	@ 0x65
 8001b4c:	461a      	mov	r2, r3
 8001b4e:	7afb      	ldrb	r3, [r7, #11]
 8001b50:	b2d9      	uxtb	r1, r3
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	5499      	strb	r1, [r3, r2]
			//p->idx++;
			//p->idx %= D_BUF_MAX;
			if (p->idx < D_BUF_MAX) p->idx++;
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	f893 3065 	ldrb.w	r3, [r3, #101]	@ 0x65
 8001b5c:	2b63      	cmp	r3, #99	@ 0x63
 8001b5e:	d807      	bhi.n	8001b70 <HAL_UART_RxCpltCallback+0x58>
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	f893 3065 	ldrb.w	r3, [r3, #101]	@ 0x65
 8001b66:	3301      	adds	r3, #1
 8001b68:	b2da      	uxtb	r2, r3
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65

			if (rxd == '\r' || rxd == '\n') {
 8001b70:	7afb      	ldrb	r3, [r7, #11]
 8001b72:	b2db      	uxtb	r3, r3
 8001b74:	2b0d      	cmp	r3, #13
 8001b76:	d003      	beq.n	8001b80 <HAL_UART_RxCpltCallback+0x68>
 8001b78:	7afb      	ldrb	r3, [r7, #11]
 8001b7a:	b2db      	uxtb	r3, r3
 8001b7c:	2b0a      	cmp	r3, #10
 8001b7e:	d10a      	bne.n	8001b96 <HAL_UART_RxCpltCallback+0x7e>
				p->buf[p->idx] = 0; //'\0';
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	f893 3065 	ldrb.w	r3, [r3, #101]	@ 0x65
 8001b86:	461a      	mov	r2, r3
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	2100      	movs	r1, #0
 8001b8c:	5499      	strb	r1, [r3, r2]
				p->flag = true;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	2201      	movs	r2, #1
 8001b92:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
			}
		}
	}
}
 8001b96:	bf00      	nop
 8001b98:	3710      	adds	r7, #16
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	20000404 	.word	0x20000404
 8001ba4:	2000093c 	.word	0x2000093c
 8001ba8:	20000940 	.word	0x20000940

08001bac <Reset_Handler>:
 8001bac:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001be4 <LoopFillZerobss+0xe>
 8001bb0:	f7ff fef4 	bl	800199c <SystemInit>
 8001bb4:	480c      	ldr	r0, [pc, #48]	@ (8001be8 <LoopFillZerobss+0x12>)
 8001bb6:	490d      	ldr	r1, [pc, #52]	@ (8001bec <LoopFillZerobss+0x16>)
 8001bb8:	4a0d      	ldr	r2, [pc, #52]	@ (8001bf0 <LoopFillZerobss+0x1a>)
 8001bba:	2300      	movs	r3, #0
 8001bbc:	e002      	b.n	8001bc4 <LoopCopyDataInit>

08001bbe <CopyDataInit>:
 8001bbe:	58d4      	ldr	r4, [r2, r3]
 8001bc0:	50c4      	str	r4, [r0, r3]
 8001bc2:	3304      	adds	r3, #4

08001bc4 <LoopCopyDataInit>:
 8001bc4:	18c4      	adds	r4, r0, r3
 8001bc6:	428c      	cmp	r4, r1
 8001bc8:	d3f9      	bcc.n	8001bbe <CopyDataInit>
 8001bca:	4a0a      	ldr	r2, [pc, #40]	@ (8001bf4 <LoopFillZerobss+0x1e>)
 8001bcc:	4c0a      	ldr	r4, [pc, #40]	@ (8001bf8 <LoopFillZerobss+0x22>)
 8001bce:	2300      	movs	r3, #0
 8001bd0:	e001      	b.n	8001bd6 <LoopFillZerobss>

08001bd2 <FillZerobss>:
 8001bd2:	6013      	str	r3, [r2, #0]
 8001bd4:	3204      	adds	r2, #4

08001bd6 <LoopFillZerobss>:
 8001bd6:	42a2      	cmp	r2, r4
 8001bd8:	d3fb      	bcc.n	8001bd2 <FillZerobss>
 8001bda:	f004 faa7 	bl	800612c <__libc_init_array>
 8001bde:	f7ff f8d7 	bl	8000d90 <main>
 8001be2:	4770      	bx	lr
 8001be4:	20030000 	.word	0x20030000
 8001be8:	20000000 	.word	0x20000000
 8001bec:	200000ac 	.word	0x200000ac
 8001bf0:	080071a0 	.word	0x080071a0
 8001bf4:	200000ac 	.word	0x200000ac
 8001bf8:	20000bcc 	.word	0x20000bcc

08001bfc <ADC_IRQHandler>:
 8001bfc:	e7fe      	b.n	8001bfc <ADC_IRQHandler>
	...

08001c00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c04:	4b0e      	ldr	r3, [pc, #56]	@ (8001c40 <HAL_Init+0x40>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a0d      	ldr	r2, [pc, #52]	@ (8001c40 <HAL_Init+0x40>)
 8001c0a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c0e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c10:	4b0b      	ldr	r3, [pc, #44]	@ (8001c40 <HAL_Init+0x40>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a0a      	ldr	r2, [pc, #40]	@ (8001c40 <HAL_Init+0x40>)
 8001c16:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001c1a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c1c:	4b08      	ldr	r3, [pc, #32]	@ (8001c40 <HAL_Init+0x40>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a07      	ldr	r2, [pc, #28]	@ (8001c40 <HAL_Init+0x40>)
 8001c22:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c26:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c28:	2003      	movs	r0, #3
 8001c2a:	f000 f93b 	bl	8001ea4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c2e:	2000      	movs	r0, #0
 8001c30:	f000 f808 	bl	8001c44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c34:	f7ff fbb6 	bl	80013a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c38:	2300      	movs	r3, #0
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	40023c00 	.word	0x40023c00

08001c44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b082      	sub	sp, #8
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c4c:	4b12      	ldr	r3, [pc, #72]	@ (8001c98 <HAL_InitTick+0x54>)
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	4b12      	ldr	r3, [pc, #72]	@ (8001c9c <HAL_InitTick+0x58>)
 8001c52:	781b      	ldrb	r3, [r3, #0]
 8001c54:	4619      	mov	r1, r3
 8001c56:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c62:	4618      	mov	r0, r3
 8001c64:	f000 f953 	bl	8001f0e <HAL_SYSTICK_Config>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d001      	beq.n	8001c72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e00e      	b.n	8001c90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2b0f      	cmp	r3, #15
 8001c76:	d80a      	bhi.n	8001c8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c78:	2200      	movs	r2, #0
 8001c7a:	6879      	ldr	r1, [r7, #4]
 8001c7c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c80:	f000 f91b 	bl	8001eba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c84:	4a06      	ldr	r2, [pc, #24]	@ (8001ca0 <HAL_InitTick+0x5c>)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	e000      	b.n	8001c90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	3708      	adds	r7, #8
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	20000044 	.word	0x20000044
 8001c9c:	2000004c 	.word	0x2000004c
 8001ca0:	20000048 	.word	0x20000048

08001ca4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ca8:	4b03      	ldr	r3, [pc, #12]	@ (8001cb8 <HAL_GetTick+0x14>)
 8001caa:	681b      	ldr	r3, [r3, #0]
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr
 8001cb6:	bf00      	nop
 8001cb8:	20000a7c 	.word	0x20000a7c

08001cbc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b084      	sub	sp, #16
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cc4:	f7ff ffee 	bl	8001ca4 <HAL_GetTick>
 8001cc8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cd4:	d005      	beq.n	8001ce2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cd6:	4b0a      	ldr	r3, [pc, #40]	@ (8001d00 <HAL_Delay+0x44>)
 8001cd8:	781b      	ldrb	r3, [r3, #0]
 8001cda:	461a      	mov	r2, r3
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	4413      	add	r3, r2
 8001ce0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001ce2:	bf00      	nop
 8001ce4:	f7ff ffde 	bl	8001ca4 <HAL_GetTick>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	68bb      	ldr	r3, [r7, #8]
 8001cec:	1ad3      	subs	r3, r2, r3
 8001cee:	68fa      	ldr	r2, [r7, #12]
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	d8f7      	bhi.n	8001ce4 <HAL_Delay+0x28>
  {
  }
}
 8001cf4:	bf00      	nop
 8001cf6:	bf00      	nop
 8001cf8:	3710      	adds	r7, #16
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	2000004c 	.word	0x2000004c

08001d04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b085      	sub	sp, #20
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	f003 0307 	and.w	r3, r3, #7
 8001d12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d14:	4b0c      	ldr	r3, [pc, #48]	@ (8001d48 <__NVIC_SetPriorityGrouping+0x44>)
 8001d16:	68db      	ldr	r3, [r3, #12]
 8001d18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d1a:	68ba      	ldr	r2, [r7, #8]
 8001d1c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001d20:	4013      	ands	r3, r2
 8001d22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d2c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001d30:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d36:	4a04      	ldr	r2, [pc, #16]	@ (8001d48 <__NVIC_SetPriorityGrouping+0x44>)
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	60d3      	str	r3, [r2, #12]
}
 8001d3c:	bf00      	nop
 8001d3e:	3714      	adds	r7, #20
 8001d40:	46bd      	mov	sp, r7
 8001d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d46:	4770      	bx	lr
 8001d48:	e000ed00 	.word	0xe000ed00

08001d4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d50:	4b04      	ldr	r3, [pc, #16]	@ (8001d64 <__NVIC_GetPriorityGrouping+0x18>)
 8001d52:	68db      	ldr	r3, [r3, #12]
 8001d54:	0a1b      	lsrs	r3, r3, #8
 8001d56:	f003 0307 	and.w	r3, r3, #7
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr
 8001d64:	e000ed00 	.word	0xe000ed00

08001d68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b083      	sub	sp, #12
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	4603      	mov	r3, r0
 8001d70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	db0b      	blt.n	8001d92 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d7a:	79fb      	ldrb	r3, [r7, #7]
 8001d7c:	f003 021f 	and.w	r2, r3, #31
 8001d80:	4907      	ldr	r1, [pc, #28]	@ (8001da0 <__NVIC_EnableIRQ+0x38>)
 8001d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d86:	095b      	lsrs	r3, r3, #5
 8001d88:	2001      	movs	r0, #1
 8001d8a:	fa00 f202 	lsl.w	r2, r0, r2
 8001d8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d92:	bf00      	nop
 8001d94:	370c      	adds	r7, #12
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr
 8001d9e:	bf00      	nop
 8001da0:	e000e100 	.word	0xe000e100

08001da4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b083      	sub	sp, #12
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	4603      	mov	r3, r0
 8001dac:	6039      	str	r1, [r7, #0]
 8001dae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001db0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	db0a      	blt.n	8001dce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	b2da      	uxtb	r2, r3
 8001dbc:	490c      	ldr	r1, [pc, #48]	@ (8001df0 <__NVIC_SetPriority+0x4c>)
 8001dbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dc2:	0112      	lsls	r2, r2, #4
 8001dc4:	b2d2      	uxtb	r2, r2
 8001dc6:	440b      	add	r3, r1
 8001dc8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001dcc:	e00a      	b.n	8001de4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	b2da      	uxtb	r2, r3
 8001dd2:	4908      	ldr	r1, [pc, #32]	@ (8001df4 <__NVIC_SetPriority+0x50>)
 8001dd4:	79fb      	ldrb	r3, [r7, #7]
 8001dd6:	f003 030f 	and.w	r3, r3, #15
 8001dda:	3b04      	subs	r3, #4
 8001ddc:	0112      	lsls	r2, r2, #4
 8001dde:	b2d2      	uxtb	r2, r2
 8001de0:	440b      	add	r3, r1
 8001de2:	761a      	strb	r2, [r3, #24]
}
 8001de4:	bf00      	nop
 8001de6:	370c      	adds	r7, #12
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr
 8001df0:	e000e100 	.word	0xe000e100
 8001df4:	e000ed00 	.word	0xe000ed00

08001df8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b089      	sub	sp, #36	@ 0x24
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	60f8      	str	r0, [r7, #12]
 8001e00:	60b9      	str	r1, [r7, #8]
 8001e02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	f003 0307 	and.w	r3, r3, #7
 8001e0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e0c:	69fb      	ldr	r3, [r7, #28]
 8001e0e:	f1c3 0307 	rsb	r3, r3, #7
 8001e12:	2b04      	cmp	r3, #4
 8001e14:	bf28      	it	cs
 8001e16:	2304      	movcs	r3, #4
 8001e18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e1a:	69fb      	ldr	r3, [r7, #28]
 8001e1c:	3304      	adds	r3, #4
 8001e1e:	2b06      	cmp	r3, #6
 8001e20:	d902      	bls.n	8001e28 <NVIC_EncodePriority+0x30>
 8001e22:	69fb      	ldr	r3, [r7, #28]
 8001e24:	3b03      	subs	r3, #3
 8001e26:	e000      	b.n	8001e2a <NVIC_EncodePriority+0x32>
 8001e28:	2300      	movs	r3, #0
 8001e2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e2c:	f04f 32ff 	mov.w	r2, #4294967295
 8001e30:	69bb      	ldr	r3, [r7, #24]
 8001e32:	fa02 f303 	lsl.w	r3, r2, r3
 8001e36:	43da      	mvns	r2, r3
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	401a      	ands	r2, r3
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e40:	f04f 31ff 	mov.w	r1, #4294967295
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	fa01 f303 	lsl.w	r3, r1, r3
 8001e4a:	43d9      	mvns	r1, r3
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e50:	4313      	orrs	r3, r2
         );
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	3724      	adds	r7, #36	@ 0x24
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr
	...

08001e60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b082      	sub	sp, #8
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	3b01      	subs	r3, #1
 8001e6c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e70:	d301      	bcc.n	8001e76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e72:	2301      	movs	r3, #1
 8001e74:	e00f      	b.n	8001e96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e76:	4a0a      	ldr	r2, [pc, #40]	@ (8001ea0 <SysTick_Config+0x40>)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	3b01      	subs	r3, #1
 8001e7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e7e:	210f      	movs	r1, #15
 8001e80:	f04f 30ff 	mov.w	r0, #4294967295
 8001e84:	f7ff ff8e 	bl	8001da4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e88:	4b05      	ldr	r3, [pc, #20]	@ (8001ea0 <SysTick_Config+0x40>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e8e:	4b04      	ldr	r3, [pc, #16]	@ (8001ea0 <SysTick_Config+0x40>)
 8001e90:	2207      	movs	r2, #7
 8001e92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e94:	2300      	movs	r3, #0
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3708      	adds	r7, #8
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	e000e010 	.word	0xe000e010

08001ea4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b082      	sub	sp, #8
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001eac:	6878      	ldr	r0, [r7, #4]
 8001eae:	f7ff ff29 	bl	8001d04 <__NVIC_SetPriorityGrouping>
}
 8001eb2:	bf00      	nop
 8001eb4:	3708      	adds	r7, #8
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}

08001eba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001eba:	b580      	push	{r7, lr}
 8001ebc:	b086      	sub	sp, #24
 8001ebe:	af00      	add	r7, sp, #0
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	60b9      	str	r1, [r7, #8]
 8001ec4:	607a      	str	r2, [r7, #4]
 8001ec6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ecc:	f7ff ff3e 	bl	8001d4c <__NVIC_GetPriorityGrouping>
 8001ed0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ed2:	687a      	ldr	r2, [r7, #4]
 8001ed4:	68b9      	ldr	r1, [r7, #8]
 8001ed6:	6978      	ldr	r0, [r7, #20]
 8001ed8:	f7ff ff8e 	bl	8001df8 <NVIC_EncodePriority>
 8001edc:	4602      	mov	r2, r0
 8001ede:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ee2:	4611      	mov	r1, r2
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f7ff ff5d 	bl	8001da4 <__NVIC_SetPriority>
}
 8001eea:	bf00      	nop
 8001eec:	3718      	adds	r7, #24
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}

08001ef2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ef2:	b580      	push	{r7, lr}
 8001ef4:	b082      	sub	sp, #8
 8001ef6:	af00      	add	r7, sp, #0
 8001ef8:	4603      	mov	r3, r0
 8001efa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001efc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f00:	4618      	mov	r0, r3
 8001f02:	f7ff ff31 	bl	8001d68 <__NVIC_EnableIRQ>
}
 8001f06:	bf00      	nop
 8001f08:	3708      	adds	r7, #8
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}

08001f0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f0e:	b580      	push	{r7, lr}
 8001f10:	b082      	sub	sp, #8
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f16:	6878      	ldr	r0, [r7, #4]
 8001f18:	f7ff ffa2 	bl	8001e60 <SysTick_Config>
 8001f1c:	4603      	mov	r3, r0
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	3708      	adds	r7, #8
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}

08001f26 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f26:	b580      	push	{r7, lr}
 8001f28:	b084      	sub	sp, #16
 8001f2a:	af00      	add	r7, sp, #0
 8001f2c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f32:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001f34:	f7ff feb6 	bl	8001ca4 <HAL_GetTick>
 8001f38:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001f40:	b2db      	uxtb	r3, r3
 8001f42:	2b02      	cmp	r3, #2
 8001f44:	d008      	beq.n	8001f58 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2280      	movs	r2, #128	@ 0x80
 8001f4a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2200      	movs	r2, #0
 8001f50:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001f54:	2301      	movs	r3, #1
 8001f56:	e052      	b.n	8001ffe <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f022 0216 	bic.w	r2, r2, #22
 8001f66:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	695a      	ldr	r2, [r3, #20]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001f76:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d103      	bne.n	8001f88 <HAL_DMA_Abort+0x62>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d007      	beq.n	8001f98 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f022 0208 	bic.w	r2, r2, #8
 8001f96:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	681a      	ldr	r2, [r3, #0]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f022 0201 	bic.w	r2, r2, #1
 8001fa6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fa8:	e013      	b.n	8001fd2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001faa:	f7ff fe7b 	bl	8001ca4 <HAL_GetTick>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	1ad3      	subs	r3, r2, r3
 8001fb4:	2b05      	cmp	r3, #5
 8001fb6:	d90c      	bls.n	8001fd2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2220      	movs	r2, #32
 8001fbc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2203      	movs	r2, #3
 8001fc2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001fce:	2303      	movs	r3, #3
 8001fd0:	e015      	b.n	8001ffe <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f003 0301 	and.w	r3, r3, #1
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d1e4      	bne.n	8001faa <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fe4:	223f      	movs	r2, #63	@ 0x3f
 8001fe6:	409a      	lsls	r2, r3
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2201      	movs	r2, #1
 8001ff0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001ffc:	2300      	movs	r3, #0
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	3710      	adds	r7, #16
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}

08002006 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002006:	b480      	push	{r7}
 8002008:	b083      	sub	sp, #12
 800200a:	af00      	add	r7, sp, #0
 800200c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002014:	b2db      	uxtb	r3, r3
 8002016:	2b02      	cmp	r3, #2
 8002018:	d004      	beq.n	8002024 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2280      	movs	r2, #128	@ 0x80
 800201e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002020:	2301      	movs	r3, #1
 8002022:	e00c      	b.n	800203e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2205      	movs	r2, #5
 8002028:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f022 0201 	bic.w	r2, r2, #1
 800203a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800203c:	2300      	movs	r3, #0
}
 800203e:	4618      	mov	r0, r3
 8002040:	370c      	adds	r7, #12
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr
	...

0800204c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b084      	sub	sp, #16
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d101      	bne.n	800205e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	e06c      	b.n	8002138 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002064:	2b00      	cmp	r3, #0
 8002066:	d106      	bne.n	8002076 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2223      	movs	r2, #35	@ 0x23
 800206c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002070:	6878      	ldr	r0, [r7, #4]
 8002072:	f7ff f9bf 	bl	80013f4 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002076:	2300      	movs	r3, #0
 8002078:	60bb      	str	r3, [r7, #8]
 800207a:	4b31      	ldr	r3, [pc, #196]	@ (8002140 <HAL_ETH_Init+0xf4>)
 800207c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800207e:	4a30      	ldr	r2, [pc, #192]	@ (8002140 <HAL_ETH_Init+0xf4>)
 8002080:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002084:	6453      	str	r3, [r2, #68]	@ 0x44
 8002086:	4b2e      	ldr	r3, [pc, #184]	@ (8002140 <HAL_ETH_Init+0xf4>)
 8002088:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800208a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800208e:	60bb      	str	r3, [r7, #8]
 8002090:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002092:	4b2c      	ldr	r3, [pc, #176]	@ (8002144 <HAL_ETH_Init+0xf8>)
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	4a2b      	ldr	r2, [pc, #172]	@ (8002144 <HAL_ETH_Init+0xf8>)
 8002098:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800209c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800209e:	4b29      	ldr	r3, [pc, #164]	@ (8002144 <HAL_ETH_Init+0xf8>)
 80020a0:	685a      	ldr	r2, [r3, #4]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	689b      	ldr	r3, [r3, #8]
 80020a6:	4927      	ldr	r1, [pc, #156]	@ (8002144 <HAL_ETH_Init+0xf8>)
 80020a8:	4313      	orrs	r3, r2
 80020aa:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80020ac:	4b25      	ldr	r3, [pc, #148]	@ (8002144 <HAL_ETH_Init+0xf8>)
 80020ae:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	687a      	ldr	r2, [r7, #4]
 80020bc:	6812      	ldr	r2, [r2, #0]
 80020be:	f043 0301 	orr.w	r3, r3, #1
 80020c2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80020c6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80020c8:	f7ff fdec 	bl	8001ca4 <HAL_GetTick>
 80020cc:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80020ce:	e011      	b.n	80020f4 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80020d0:	f7ff fde8 	bl	8001ca4 <HAL_GetTick>
 80020d4:	4602      	mov	r2, r0
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	1ad3      	subs	r3, r2, r3
 80020da:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80020de:	d909      	bls.n	80020f4 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2204      	movs	r2, #4
 80020e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	22e0      	movs	r2, #224	@ 0xe0
 80020ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80020f0:	2301      	movs	r3, #1
 80020f2:	e021      	b.n	8002138 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f003 0301 	and.w	r3, r3, #1
 8002102:	2b00      	cmp	r3, #0
 8002104:	d1e4      	bne.n	80020d0 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002106:	6878      	ldr	r0, [r7, #4]
 8002108:	f000 f958 	bl	80023bc <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800210c:	6878      	ldr	r0, [r7, #4]
 800210e:	f000 f9ff 	bl	8002510 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	f000 fa55 	bl	80025c2 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	461a      	mov	r2, r3
 800211e:	2100      	movs	r1, #0
 8002120:	6878      	ldr	r0, [r7, #4]
 8002122:	f000 f9bd 	bl	80024a0 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2200      	movs	r2, #0
 800212a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2210      	movs	r2, #16
 8002132:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8002136:	2300      	movs	r3, #0
}
 8002138:	4618      	mov	r0, r3
 800213a:	3710      	adds	r7, #16
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}
 8002140:	40023800 	.word	0x40023800
 8002144:	40013800 	.word	0x40013800

08002148 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b084      	sub	sp, #16
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
 8002150:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800215a:	68fa      	ldr	r2, [r7, #12]
 800215c:	4b51      	ldr	r3, [pc, #324]	@ (80022a4 <ETH_SetMACConfig+0x15c>)
 800215e:	4013      	ands	r3, r2
 8002160:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	7c1b      	ldrb	r3, [r3, #16]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d102      	bne.n	8002170 <ETH_SetMACConfig+0x28>
 800216a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800216e:	e000      	b.n	8002172 <ETH_SetMACConfig+0x2a>
 8002170:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	7c5b      	ldrb	r3, [r3, #17]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d102      	bne.n	8002180 <ETH_SetMACConfig+0x38>
 800217a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800217e:	e000      	b.n	8002182 <ETH_SetMACConfig+0x3a>
 8002180:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002182:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002188:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	7fdb      	ldrb	r3, [r3, #31]
 800218e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002190:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002196:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002198:	683a      	ldr	r2, [r7, #0]
 800219a:	7f92      	ldrb	r2, [r2, #30]
 800219c:	2a00      	cmp	r2, #0
 800219e:	d102      	bne.n	80021a6 <ETH_SetMACConfig+0x5e>
 80021a0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80021a4:	e000      	b.n	80021a8 <ETH_SetMACConfig+0x60>
 80021a6:	2200      	movs	r2, #0
                        macconf->Speed |
 80021a8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	7f1b      	ldrb	r3, [r3, #28]
 80021ae:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80021b0:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80021b6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	791b      	ldrb	r3, [r3, #4]
 80021bc:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80021be:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80021c0:	683a      	ldr	r2, [r7, #0]
 80021c2:	f892 2020 	ldrb.w	r2, [r2, #32]
 80021c6:	2a00      	cmp	r2, #0
 80021c8:	d102      	bne.n	80021d0 <ETH_SetMACConfig+0x88>
 80021ca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80021ce:	e000      	b.n	80021d2 <ETH_SetMACConfig+0x8a>
 80021d0:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80021d2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	7bdb      	ldrb	r3, [r3, #15]
 80021d8:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80021da:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80021e0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80021e8:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80021ea:	4313      	orrs	r3, r2
 80021ec:	68fa      	ldr	r2, [r7, #12]
 80021ee:	4313      	orrs	r3, r2
 80021f0:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	68fa      	ldr	r2, [r7, #12]
 80021f8:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002202:	2001      	movs	r0, #1
 8002204:	f7ff fd5a 	bl	8001cbc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	68fa      	ldr	r2, [r7, #12]
 800220e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	699b      	ldr	r3, [r3, #24]
 8002216:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002218:	68fa      	ldr	r2, [r7, #12]
 800221a:	f64f 7341 	movw	r3, #65345	@ 0xff41
 800221e:	4013      	ands	r3, r2
 8002220:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002226:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002228:	683a      	ldr	r2, [r7, #0]
 800222a:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 800222e:	2a00      	cmp	r2, #0
 8002230:	d101      	bne.n	8002236 <ETH_SetMACConfig+0xee>
 8002232:	2280      	movs	r2, #128	@ 0x80
 8002234:	e000      	b.n	8002238 <ETH_SetMACConfig+0xf0>
 8002236:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002238:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800223e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002240:	683a      	ldr	r2, [r7, #0]
 8002242:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8002246:	2a01      	cmp	r2, #1
 8002248:	d101      	bne.n	800224e <ETH_SetMACConfig+0x106>
 800224a:	2208      	movs	r2, #8
 800224c:	e000      	b.n	8002250 <ETH_SetMACConfig+0x108>
 800224e:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002250:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002252:	683a      	ldr	r2, [r7, #0]
 8002254:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8002258:	2a01      	cmp	r2, #1
 800225a:	d101      	bne.n	8002260 <ETH_SetMACConfig+0x118>
 800225c:	2204      	movs	r2, #4
 800225e:	e000      	b.n	8002262 <ETH_SetMACConfig+0x11a>
 8002260:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002262:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002264:	683a      	ldr	r2, [r7, #0]
 8002266:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 800226a:	2a01      	cmp	r2, #1
 800226c:	d101      	bne.n	8002272 <ETH_SetMACConfig+0x12a>
 800226e:	2202      	movs	r2, #2
 8002270:	e000      	b.n	8002274 <ETH_SetMACConfig+0x12c>
 8002272:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002274:	4313      	orrs	r3, r2
 8002276:	68fa      	ldr	r2, [r7, #12]
 8002278:	4313      	orrs	r3, r2
 800227a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	68fa      	ldr	r2, [r7, #12]
 8002282:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	699b      	ldr	r3, [r3, #24]
 800228a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800228c:	2001      	movs	r0, #1
 800228e:	f7ff fd15 	bl	8001cbc <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	68fa      	ldr	r2, [r7, #12]
 8002298:	619a      	str	r2, [r3, #24]
}
 800229a:	bf00      	nop
 800229c:	3710      	adds	r7, #16
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	ff20810f 	.word	0xff20810f

080022a8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b084      	sub	sp, #16
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
 80022b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80022ba:	699b      	ldr	r3, [r3, #24]
 80022bc:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80022be:	68fa      	ldr	r2, [r7, #12]
 80022c0:	4b3d      	ldr	r3, [pc, #244]	@ (80023b8 <ETH_SetDMAConfig+0x110>)
 80022c2:	4013      	ands	r3, r2
 80022c4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	7b1b      	ldrb	r3, [r3, #12]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d102      	bne.n	80022d4 <ETH_SetDMAConfig+0x2c>
 80022ce:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80022d2:	e000      	b.n	80022d6 <ETH_SetDMAConfig+0x2e>
 80022d4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	7b5b      	ldrb	r3, [r3, #13]
 80022da:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80022dc:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80022de:	683a      	ldr	r2, [r7, #0]
 80022e0:	7f52      	ldrb	r2, [r2, #29]
 80022e2:	2a00      	cmp	r2, #0
 80022e4:	d102      	bne.n	80022ec <ETH_SetDMAConfig+0x44>
 80022e6:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80022ea:	e000      	b.n	80022ee <ETH_SetDMAConfig+0x46>
 80022ec:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80022ee:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	7b9b      	ldrb	r3, [r3, #14]
 80022f4:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80022f6:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80022fc:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	7f1b      	ldrb	r3, [r3, #28]
 8002302:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002304:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	7f9b      	ldrb	r3, [r3, #30]
 800230a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800230c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002312:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800231a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800231c:	4313      	orrs	r3, r2
 800231e:	68fa      	ldr	r2, [r7, #12]
 8002320:	4313      	orrs	r3, r2
 8002322:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800232c:	461a      	mov	r2, r3
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800233a:	699b      	ldr	r3, [r3, #24]
 800233c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800233e:	2001      	movs	r0, #1
 8002340:	f7ff fcbc 	bl	8001cbc <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800234c:	461a      	mov	r2, r3
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	791b      	ldrb	r3, [r3, #4]
 8002356:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800235c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002362:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002368:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002370:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002372:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002378:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800237a:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002380:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002382:	687a      	ldr	r2, [r7, #4]
 8002384:	6812      	ldr	r2, [r2, #0]
 8002386:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800238a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800238e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800239c:	2001      	movs	r0, #1
 800239e:	f7ff fc8d 	bl	8001cbc <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80023aa:	461a      	mov	r2, r3
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	6013      	str	r3, [r2, #0]
}
 80023b0:	bf00      	nop
 80023b2:	3710      	adds	r7, #16
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}
 80023b8:	f8de3f23 	.word	0xf8de3f23

080023bc <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b0a6      	sub	sp, #152	@ 0x98
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80023c4:	2301      	movs	r3, #1
 80023c6:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 80023ca:	2301      	movs	r3, #1
 80023cc:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80023d0:	2300      	movs	r3, #0
 80023d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80023d4:	2300      	movs	r3, #0
 80023d6:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80023da:	2301      	movs	r3, #1
 80023dc:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80023e0:	2300      	movs	r3, #0
 80023e2:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80023e6:	2301      	movs	r3, #1
 80023e8:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80023ec:	2300      	movs	r3, #0
 80023ee:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80023f2:	2300      	movs	r3, #0
 80023f4:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80023f8:	2300      	movs	r3, #0
 80023fa:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80023fc:	2300      	movs	r3, #0
 80023fe:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002402:	2300      	movs	r3, #0
 8002404:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002406:	2300      	movs	r3, #0
 8002408:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800240c:	2300      	movs	r3, #0
 800240e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002412:	2300      	movs	r3, #0
 8002414:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002418:	2300      	movs	r3, #0
 800241a:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800241e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002422:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002424:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002428:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800242a:	2300      	movs	r3, #0
 800242c:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002430:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002434:	4619      	mov	r1, r3
 8002436:	6878      	ldr	r0, [r7, #4]
 8002438:	f7ff fe86 	bl	8002148 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 800243c:	2301      	movs	r3, #1
 800243e:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002440:	2301      	movs	r3, #1
 8002442:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002444:	2301      	movs	r3, #1
 8002446:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800244a:	2301      	movs	r3, #1
 800244c:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800244e:	2300      	movs	r3, #0
 8002450:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002452:	2300      	movs	r3, #0
 8002454:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002458:	2300      	movs	r3, #0
 800245a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800245e:	2300      	movs	r3, #0
 8002460:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002462:	2301      	movs	r3, #1
 8002464:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002468:	2301      	movs	r3, #1
 800246a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800246c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002470:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002472:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002476:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002478:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800247c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800247e:	2301      	movs	r3, #1
 8002480:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002484:	2300      	movs	r3, #0
 8002486:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002488:	2300      	movs	r3, #0
 800248a:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800248c:	f107 0308 	add.w	r3, r7, #8
 8002490:	4619      	mov	r1, r3
 8002492:	6878      	ldr	r0, [r7, #4]
 8002494:	f7ff ff08 	bl	80022a8 <ETH_SetDMAConfig>
}
 8002498:	bf00      	nop
 800249a:	3798      	adds	r7, #152	@ 0x98
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}

080024a0 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b087      	sub	sp, #28
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	60f8      	str	r0, [r7, #12]
 80024a8:	60b9      	str	r1, [r7, #8]
 80024aa:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	3305      	adds	r3, #5
 80024b0:	781b      	ldrb	r3, [r3, #0]
 80024b2:	021b      	lsls	r3, r3, #8
 80024b4:	687a      	ldr	r2, [r7, #4]
 80024b6:	3204      	adds	r2, #4
 80024b8:	7812      	ldrb	r2, [r2, #0]
 80024ba:	4313      	orrs	r3, r2
 80024bc:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80024be:	68ba      	ldr	r2, [r7, #8]
 80024c0:	4b11      	ldr	r3, [pc, #68]	@ (8002508 <ETH_MACAddressConfig+0x68>)
 80024c2:	4413      	add	r3, r2
 80024c4:	461a      	mov	r2, r3
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	3303      	adds	r3, #3
 80024ce:	781b      	ldrb	r3, [r3, #0]
 80024d0:	061a      	lsls	r2, r3, #24
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	3302      	adds	r3, #2
 80024d6:	781b      	ldrb	r3, [r3, #0]
 80024d8:	041b      	lsls	r3, r3, #16
 80024da:	431a      	orrs	r2, r3
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	3301      	adds	r3, #1
 80024e0:	781b      	ldrb	r3, [r3, #0]
 80024e2:	021b      	lsls	r3, r3, #8
 80024e4:	4313      	orrs	r3, r2
 80024e6:	687a      	ldr	r2, [r7, #4]
 80024e8:	7812      	ldrb	r2, [r2, #0]
 80024ea:	4313      	orrs	r3, r2
 80024ec:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80024ee:	68ba      	ldr	r2, [r7, #8]
 80024f0:	4b06      	ldr	r3, [pc, #24]	@ (800250c <ETH_MACAddressConfig+0x6c>)
 80024f2:	4413      	add	r3, r2
 80024f4:	461a      	mov	r2, r3
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	6013      	str	r3, [r2, #0]
}
 80024fa:	bf00      	nop
 80024fc:	371c      	adds	r7, #28
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr
 8002506:	bf00      	nop
 8002508:	40028040 	.word	0x40028040
 800250c:	40028044 	.word	0x40028044

08002510 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002510:	b480      	push	{r7}
 8002512:	b085      	sub	sp, #20
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002518:	2300      	movs	r3, #0
 800251a:	60fb      	str	r3, [r7, #12]
 800251c:	e03e      	b.n	800259c <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	68d9      	ldr	r1, [r3, #12]
 8002522:	68fa      	ldr	r2, [r7, #12]
 8002524:	4613      	mov	r3, r2
 8002526:	009b      	lsls	r3, r3, #2
 8002528:	4413      	add	r3, r2
 800252a:	00db      	lsls	r3, r3, #3
 800252c:	440b      	add	r3, r1
 800252e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	2200      	movs	r2, #0
 8002534:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	2200      	movs	r2, #0
 800253a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	2200      	movs	r2, #0
 8002540:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	2200      	movs	r2, #0
 8002546:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002548:	68b9      	ldr	r1, [r7, #8]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	68fa      	ldr	r2, [r7, #12]
 800254e:	3206      	adds	r2, #6
 8002550:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	2b02      	cmp	r3, #2
 8002564:	d80c      	bhi.n	8002580 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	68d9      	ldr	r1, [r3, #12]
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	1c5a      	adds	r2, r3, #1
 800256e:	4613      	mov	r3, r2
 8002570:	009b      	lsls	r3, r3, #2
 8002572:	4413      	add	r3, r2
 8002574:	00db      	lsls	r3, r3, #3
 8002576:	440b      	add	r3, r1
 8002578:	461a      	mov	r2, r3
 800257a:	68bb      	ldr	r3, [r7, #8]
 800257c:	60da      	str	r2, [r3, #12]
 800257e:	e004      	b.n	800258a <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	68db      	ldr	r3, [r3, #12]
 8002584:	461a      	mov	r2, r3
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8002592:	68bb      	ldr	r3, [r7, #8]
 8002594:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	3301      	adds	r3, #1
 800259a:	60fb      	str	r3, [r7, #12]
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	2b03      	cmp	r3, #3
 80025a0:	d9bd      	bls.n	800251e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2200      	movs	r2, #0
 80025a6:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	68da      	ldr	r2, [r3, #12]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80025b4:	611a      	str	r2, [r3, #16]
}
 80025b6:	bf00      	nop
 80025b8:	3714      	adds	r7, #20
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr

080025c2 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80025c2:	b480      	push	{r7}
 80025c4:	b085      	sub	sp, #20
 80025c6:	af00      	add	r7, sp, #0
 80025c8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80025ca:	2300      	movs	r3, #0
 80025cc:	60fb      	str	r3, [r7, #12]
 80025ce:	e046      	b.n	800265e <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6919      	ldr	r1, [r3, #16]
 80025d4:	68fa      	ldr	r2, [r7, #12]
 80025d6:	4613      	mov	r3, r2
 80025d8:	009b      	lsls	r3, r3, #2
 80025da:	4413      	add	r3, r2
 80025dc:	00db      	lsls	r3, r3, #3
 80025de:	440b      	add	r3, r1
 80025e0:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	2200      	movs	r2, #0
 80025e6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	2200      	movs	r2, #0
 80025ec:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	2200      	movs	r2, #0
 80025f2:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	2200      	movs	r2, #0
 80025f8:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	2200      	movs	r2, #0
 80025fe:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	2200      	movs	r2, #0
 8002604:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800260c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	f244 52f4 	movw	r2, #17908	@ 0x45f4
 8002614:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002622:	68b9      	ldr	r1, [r7, #8]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	68fa      	ldr	r2, [r7, #12]
 8002628:	3212      	adds	r2, #18
 800262a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	2b02      	cmp	r3, #2
 8002632:	d80c      	bhi.n	800264e <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6919      	ldr	r1, [r3, #16]
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	1c5a      	adds	r2, r3, #1
 800263c:	4613      	mov	r3, r2
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	4413      	add	r3, r2
 8002642:	00db      	lsls	r3, r3, #3
 8002644:	440b      	add	r3, r1
 8002646:	461a      	mov	r2, r3
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	60da      	str	r2, [r3, #12]
 800264c:	e004      	b.n	8002658 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	691b      	ldr	r3, [r3, #16]
 8002652:	461a      	mov	r2, r3
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	3301      	adds	r3, #1
 800265c:	60fb      	str	r3, [r7, #12]
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	2b03      	cmp	r3, #3
 8002662:	d9b5      	bls.n	80025d0 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2200      	movs	r2, #0
 8002668:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2200      	movs	r2, #0
 800266e:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2200      	movs	r2, #0
 8002674:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2200      	movs	r2, #0
 800267a:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2200      	movs	r2, #0
 8002680:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	691a      	ldr	r2, [r3, #16]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800268e:	60da      	str	r2, [r3, #12]
}
 8002690:	bf00      	nop
 8002692:	3714      	adds	r7, #20
 8002694:	46bd      	mov	sp, r7
 8002696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269a:	4770      	bx	lr

0800269c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800269c:	b480      	push	{r7}
 800269e:	b089      	sub	sp, #36	@ 0x24
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
 80026a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80026a6:	2300      	movs	r3, #0
 80026a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80026aa:	2300      	movs	r3, #0
 80026ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80026ae:	2300      	movs	r3, #0
 80026b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026b2:	2300      	movs	r3, #0
 80026b4:	61fb      	str	r3, [r7, #28]
 80026b6:	e177      	b.n	80029a8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80026b8:	2201      	movs	r2, #1
 80026ba:	69fb      	ldr	r3, [r7, #28]
 80026bc:	fa02 f303 	lsl.w	r3, r2, r3
 80026c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	697a      	ldr	r2, [r7, #20]
 80026c8:	4013      	ands	r3, r2
 80026ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80026cc:	693a      	ldr	r2, [r7, #16]
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	429a      	cmp	r2, r3
 80026d2:	f040 8166 	bne.w	80029a2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	f003 0303 	and.w	r3, r3, #3
 80026de:	2b01      	cmp	r3, #1
 80026e0:	d005      	beq.n	80026ee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026ea:	2b02      	cmp	r3, #2
 80026ec:	d130      	bne.n	8002750 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80026f4:	69fb      	ldr	r3, [r7, #28]
 80026f6:	005b      	lsls	r3, r3, #1
 80026f8:	2203      	movs	r2, #3
 80026fa:	fa02 f303 	lsl.w	r3, r2, r3
 80026fe:	43db      	mvns	r3, r3
 8002700:	69ba      	ldr	r2, [r7, #24]
 8002702:	4013      	ands	r3, r2
 8002704:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	68da      	ldr	r2, [r3, #12]
 800270a:	69fb      	ldr	r3, [r7, #28]
 800270c:	005b      	lsls	r3, r3, #1
 800270e:	fa02 f303 	lsl.w	r3, r2, r3
 8002712:	69ba      	ldr	r2, [r7, #24]
 8002714:	4313      	orrs	r3, r2
 8002716:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	69ba      	ldr	r2, [r7, #24]
 800271c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002724:	2201      	movs	r2, #1
 8002726:	69fb      	ldr	r3, [r7, #28]
 8002728:	fa02 f303 	lsl.w	r3, r2, r3
 800272c:	43db      	mvns	r3, r3
 800272e:	69ba      	ldr	r2, [r7, #24]
 8002730:	4013      	ands	r3, r2
 8002732:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	091b      	lsrs	r3, r3, #4
 800273a:	f003 0201 	and.w	r2, r3, #1
 800273e:	69fb      	ldr	r3, [r7, #28]
 8002740:	fa02 f303 	lsl.w	r3, r2, r3
 8002744:	69ba      	ldr	r2, [r7, #24]
 8002746:	4313      	orrs	r3, r2
 8002748:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	69ba      	ldr	r2, [r7, #24]
 800274e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	f003 0303 	and.w	r3, r3, #3
 8002758:	2b03      	cmp	r3, #3
 800275a:	d017      	beq.n	800278c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	68db      	ldr	r3, [r3, #12]
 8002760:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002762:	69fb      	ldr	r3, [r7, #28]
 8002764:	005b      	lsls	r3, r3, #1
 8002766:	2203      	movs	r2, #3
 8002768:	fa02 f303 	lsl.w	r3, r2, r3
 800276c:	43db      	mvns	r3, r3
 800276e:	69ba      	ldr	r2, [r7, #24]
 8002770:	4013      	ands	r3, r2
 8002772:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	689a      	ldr	r2, [r3, #8]
 8002778:	69fb      	ldr	r3, [r7, #28]
 800277a:	005b      	lsls	r3, r3, #1
 800277c:	fa02 f303 	lsl.w	r3, r2, r3
 8002780:	69ba      	ldr	r2, [r7, #24]
 8002782:	4313      	orrs	r3, r2
 8002784:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	69ba      	ldr	r2, [r7, #24]
 800278a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	f003 0303 	and.w	r3, r3, #3
 8002794:	2b02      	cmp	r3, #2
 8002796:	d123      	bne.n	80027e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002798:	69fb      	ldr	r3, [r7, #28]
 800279a:	08da      	lsrs	r2, r3, #3
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	3208      	adds	r2, #8
 80027a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80027a6:	69fb      	ldr	r3, [r7, #28]
 80027a8:	f003 0307 	and.w	r3, r3, #7
 80027ac:	009b      	lsls	r3, r3, #2
 80027ae:	220f      	movs	r2, #15
 80027b0:	fa02 f303 	lsl.w	r3, r2, r3
 80027b4:	43db      	mvns	r3, r3
 80027b6:	69ba      	ldr	r2, [r7, #24]
 80027b8:	4013      	ands	r3, r2
 80027ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	691a      	ldr	r2, [r3, #16]
 80027c0:	69fb      	ldr	r3, [r7, #28]
 80027c2:	f003 0307 	and.w	r3, r3, #7
 80027c6:	009b      	lsls	r3, r3, #2
 80027c8:	fa02 f303 	lsl.w	r3, r2, r3
 80027cc:	69ba      	ldr	r2, [r7, #24]
 80027ce:	4313      	orrs	r3, r2
 80027d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80027d2:	69fb      	ldr	r3, [r7, #28]
 80027d4:	08da      	lsrs	r2, r3, #3
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	3208      	adds	r2, #8
 80027da:	69b9      	ldr	r1, [r7, #24]
 80027dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80027e6:	69fb      	ldr	r3, [r7, #28]
 80027e8:	005b      	lsls	r3, r3, #1
 80027ea:	2203      	movs	r2, #3
 80027ec:	fa02 f303 	lsl.w	r3, r2, r3
 80027f0:	43db      	mvns	r3, r3
 80027f2:	69ba      	ldr	r2, [r7, #24]
 80027f4:	4013      	ands	r3, r2
 80027f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	f003 0203 	and.w	r2, r3, #3
 8002800:	69fb      	ldr	r3, [r7, #28]
 8002802:	005b      	lsls	r3, r3, #1
 8002804:	fa02 f303 	lsl.w	r3, r2, r3
 8002808:	69ba      	ldr	r2, [r7, #24]
 800280a:	4313      	orrs	r3, r2
 800280c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	69ba      	ldr	r2, [r7, #24]
 8002812:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800281c:	2b00      	cmp	r3, #0
 800281e:	f000 80c0 	beq.w	80029a2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002822:	2300      	movs	r3, #0
 8002824:	60fb      	str	r3, [r7, #12]
 8002826:	4b66      	ldr	r3, [pc, #408]	@ (80029c0 <HAL_GPIO_Init+0x324>)
 8002828:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800282a:	4a65      	ldr	r2, [pc, #404]	@ (80029c0 <HAL_GPIO_Init+0x324>)
 800282c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002830:	6453      	str	r3, [r2, #68]	@ 0x44
 8002832:	4b63      	ldr	r3, [pc, #396]	@ (80029c0 <HAL_GPIO_Init+0x324>)
 8002834:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002836:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800283a:	60fb      	str	r3, [r7, #12]
 800283c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800283e:	4a61      	ldr	r2, [pc, #388]	@ (80029c4 <HAL_GPIO_Init+0x328>)
 8002840:	69fb      	ldr	r3, [r7, #28]
 8002842:	089b      	lsrs	r3, r3, #2
 8002844:	3302      	adds	r3, #2
 8002846:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800284a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800284c:	69fb      	ldr	r3, [r7, #28]
 800284e:	f003 0303 	and.w	r3, r3, #3
 8002852:	009b      	lsls	r3, r3, #2
 8002854:	220f      	movs	r2, #15
 8002856:	fa02 f303 	lsl.w	r3, r2, r3
 800285a:	43db      	mvns	r3, r3
 800285c:	69ba      	ldr	r2, [r7, #24]
 800285e:	4013      	ands	r3, r2
 8002860:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	4a58      	ldr	r2, [pc, #352]	@ (80029c8 <HAL_GPIO_Init+0x32c>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d037      	beq.n	80028da <HAL_GPIO_Init+0x23e>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	4a57      	ldr	r2, [pc, #348]	@ (80029cc <HAL_GPIO_Init+0x330>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d031      	beq.n	80028d6 <HAL_GPIO_Init+0x23a>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	4a56      	ldr	r2, [pc, #344]	@ (80029d0 <HAL_GPIO_Init+0x334>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d02b      	beq.n	80028d2 <HAL_GPIO_Init+0x236>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	4a55      	ldr	r2, [pc, #340]	@ (80029d4 <HAL_GPIO_Init+0x338>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d025      	beq.n	80028ce <HAL_GPIO_Init+0x232>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	4a54      	ldr	r2, [pc, #336]	@ (80029d8 <HAL_GPIO_Init+0x33c>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d01f      	beq.n	80028ca <HAL_GPIO_Init+0x22e>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	4a53      	ldr	r2, [pc, #332]	@ (80029dc <HAL_GPIO_Init+0x340>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d019      	beq.n	80028c6 <HAL_GPIO_Init+0x22a>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	4a52      	ldr	r2, [pc, #328]	@ (80029e0 <HAL_GPIO_Init+0x344>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d013      	beq.n	80028c2 <HAL_GPIO_Init+0x226>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	4a51      	ldr	r2, [pc, #324]	@ (80029e4 <HAL_GPIO_Init+0x348>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d00d      	beq.n	80028be <HAL_GPIO_Init+0x222>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	4a50      	ldr	r2, [pc, #320]	@ (80029e8 <HAL_GPIO_Init+0x34c>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d007      	beq.n	80028ba <HAL_GPIO_Init+0x21e>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	4a4f      	ldr	r2, [pc, #316]	@ (80029ec <HAL_GPIO_Init+0x350>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d101      	bne.n	80028b6 <HAL_GPIO_Init+0x21a>
 80028b2:	2309      	movs	r3, #9
 80028b4:	e012      	b.n	80028dc <HAL_GPIO_Init+0x240>
 80028b6:	230a      	movs	r3, #10
 80028b8:	e010      	b.n	80028dc <HAL_GPIO_Init+0x240>
 80028ba:	2308      	movs	r3, #8
 80028bc:	e00e      	b.n	80028dc <HAL_GPIO_Init+0x240>
 80028be:	2307      	movs	r3, #7
 80028c0:	e00c      	b.n	80028dc <HAL_GPIO_Init+0x240>
 80028c2:	2306      	movs	r3, #6
 80028c4:	e00a      	b.n	80028dc <HAL_GPIO_Init+0x240>
 80028c6:	2305      	movs	r3, #5
 80028c8:	e008      	b.n	80028dc <HAL_GPIO_Init+0x240>
 80028ca:	2304      	movs	r3, #4
 80028cc:	e006      	b.n	80028dc <HAL_GPIO_Init+0x240>
 80028ce:	2303      	movs	r3, #3
 80028d0:	e004      	b.n	80028dc <HAL_GPIO_Init+0x240>
 80028d2:	2302      	movs	r3, #2
 80028d4:	e002      	b.n	80028dc <HAL_GPIO_Init+0x240>
 80028d6:	2301      	movs	r3, #1
 80028d8:	e000      	b.n	80028dc <HAL_GPIO_Init+0x240>
 80028da:	2300      	movs	r3, #0
 80028dc:	69fa      	ldr	r2, [r7, #28]
 80028de:	f002 0203 	and.w	r2, r2, #3
 80028e2:	0092      	lsls	r2, r2, #2
 80028e4:	4093      	lsls	r3, r2
 80028e6:	69ba      	ldr	r2, [r7, #24]
 80028e8:	4313      	orrs	r3, r2
 80028ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80028ec:	4935      	ldr	r1, [pc, #212]	@ (80029c4 <HAL_GPIO_Init+0x328>)
 80028ee:	69fb      	ldr	r3, [r7, #28]
 80028f0:	089b      	lsrs	r3, r3, #2
 80028f2:	3302      	adds	r3, #2
 80028f4:	69ba      	ldr	r2, [r7, #24]
 80028f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80028fa:	4b3d      	ldr	r3, [pc, #244]	@ (80029f0 <HAL_GPIO_Init+0x354>)
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	43db      	mvns	r3, r3
 8002904:	69ba      	ldr	r2, [r7, #24]
 8002906:	4013      	ands	r3, r2
 8002908:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002912:	2b00      	cmp	r3, #0
 8002914:	d003      	beq.n	800291e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002916:	69ba      	ldr	r2, [r7, #24]
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	4313      	orrs	r3, r2
 800291c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800291e:	4a34      	ldr	r2, [pc, #208]	@ (80029f0 <HAL_GPIO_Init+0x354>)
 8002920:	69bb      	ldr	r3, [r7, #24]
 8002922:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002924:	4b32      	ldr	r3, [pc, #200]	@ (80029f0 <HAL_GPIO_Init+0x354>)
 8002926:	68db      	ldr	r3, [r3, #12]
 8002928:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	43db      	mvns	r3, r3
 800292e:	69ba      	ldr	r2, [r7, #24]
 8002930:	4013      	ands	r3, r2
 8002932:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800293c:	2b00      	cmp	r3, #0
 800293e:	d003      	beq.n	8002948 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002940:	69ba      	ldr	r2, [r7, #24]
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	4313      	orrs	r3, r2
 8002946:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002948:	4a29      	ldr	r2, [pc, #164]	@ (80029f0 <HAL_GPIO_Init+0x354>)
 800294a:	69bb      	ldr	r3, [r7, #24]
 800294c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800294e:	4b28      	ldr	r3, [pc, #160]	@ (80029f0 <HAL_GPIO_Init+0x354>)
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	43db      	mvns	r3, r3
 8002958:	69ba      	ldr	r2, [r7, #24]
 800295a:	4013      	ands	r3, r2
 800295c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002966:	2b00      	cmp	r3, #0
 8002968:	d003      	beq.n	8002972 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800296a:	69ba      	ldr	r2, [r7, #24]
 800296c:	693b      	ldr	r3, [r7, #16]
 800296e:	4313      	orrs	r3, r2
 8002970:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002972:	4a1f      	ldr	r2, [pc, #124]	@ (80029f0 <HAL_GPIO_Init+0x354>)
 8002974:	69bb      	ldr	r3, [r7, #24]
 8002976:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002978:	4b1d      	ldr	r3, [pc, #116]	@ (80029f0 <HAL_GPIO_Init+0x354>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	43db      	mvns	r3, r3
 8002982:	69ba      	ldr	r2, [r7, #24]
 8002984:	4013      	ands	r3, r2
 8002986:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002990:	2b00      	cmp	r3, #0
 8002992:	d003      	beq.n	800299c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002994:	69ba      	ldr	r2, [r7, #24]
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	4313      	orrs	r3, r2
 800299a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800299c:	4a14      	ldr	r2, [pc, #80]	@ (80029f0 <HAL_GPIO_Init+0x354>)
 800299e:	69bb      	ldr	r3, [r7, #24]
 80029a0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029a2:	69fb      	ldr	r3, [r7, #28]
 80029a4:	3301      	adds	r3, #1
 80029a6:	61fb      	str	r3, [r7, #28]
 80029a8:	69fb      	ldr	r3, [r7, #28]
 80029aa:	2b0f      	cmp	r3, #15
 80029ac:	f67f ae84 	bls.w	80026b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80029b0:	bf00      	nop
 80029b2:	bf00      	nop
 80029b4:	3724      	adds	r7, #36	@ 0x24
 80029b6:	46bd      	mov	sp, r7
 80029b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029bc:	4770      	bx	lr
 80029be:	bf00      	nop
 80029c0:	40023800 	.word	0x40023800
 80029c4:	40013800 	.word	0x40013800
 80029c8:	40020000 	.word	0x40020000
 80029cc:	40020400 	.word	0x40020400
 80029d0:	40020800 	.word	0x40020800
 80029d4:	40020c00 	.word	0x40020c00
 80029d8:	40021000 	.word	0x40021000
 80029dc:	40021400 	.word	0x40021400
 80029e0:	40021800 	.word	0x40021800
 80029e4:	40021c00 	.word	0x40021c00
 80029e8:	40022000 	.word	0x40022000
 80029ec:	40022400 	.word	0x40022400
 80029f0:	40013c00 	.word	0x40013c00

080029f4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b085      	sub	sp, #20
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
 80029fc:	460b      	mov	r3, r1
 80029fe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	691a      	ldr	r2, [r3, #16]
 8002a04:	887b      	ldrh	r3, [r7, #2]
 8002a06:	4013      	ands	r3, r2
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d002      	beq.n	8002a12 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	73fb      	strb	r3, [r7, #15]
 8002a10:	e001      	b.n	8002a16 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002a12:	2300      	movs	r3, #0
 8002a14:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002a16:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	3714      	adds	r7, #20
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a22:	4770      	bx	lr

08002a24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b083      	sub	sp, #12
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
 8002a2c:	460b      	mov	r3, r1
 8002a2e:	807b      	strh	r3, [r7, #2]
 8002a30:	4613      	mov	r3, r2
 8002a32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a34:	787b      	ldrb	r3, [r7, #1]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d003      	beq.n	8002a42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a3a:	887a      	ldrh	r2, [r7, #2]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002a40:	e003      	b.n	8002a4a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002a42:	887b      	ldrh	r3, [r7, #2]
 8002a44:	041a      	lsls	r2, r3, #16
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	619a      	str	r2, [r3, #24]
}
 8002a4a:	bf00      	nop
 8002a4c:	370c      	adds	r7, #12
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a54:	4770      	bx	lr
	...

08002a58 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b082      	sub	sp, #8
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	4603      	mov	r3, r0
 8002a60:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002a62:	4b08      	ldr	r3, [pc, #32]	@ (8002a84 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a64:	695a      	ldr	r2, [r3, #20]
 8002a66:	88fb      	ldrh	r3, [r7, #6]
 8002a68:	4013      	ands	r3, r2
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d006      	beq.n	8002a7c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002a6e:	4a05      	ldr	r2, [pc, #20]	@ (8002a84 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a70:	88fb      	ldrh	r3, [r7, #6]
 8002a72:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002a74:	88fb      	ldrh	r3, [r7, #6]
 8002a76:	4618      	mov	r0, r3
 8002a78:	f7fe f90e 	bl	8000c98 <HAL_GPIO_EXTI_Callback>
  }
}
 8002a7c:	bf00      	nop
 8002a7e:	3708      	adds	r7, #8
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}
 8002a84:	40013c00 	.word	0x40013c00

08002a88 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b086      	sub	sp, #24
 8002a8c:	af02      	add	r7, sp, #8
 8002a8e:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d101      	bne.n	8002a9a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	e101      	b.n	8002c9e <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002aa6:	b2db      	uxtb	r3, r3
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d106      	bne.n	8002aba <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002ab4:	6878      	ldr	r0, [r7, #4]
 8002ab6:	f7fe fe0f 	bl	80016d8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2203      	movs	r2, #3
 8002abe:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002ac8:	d102      	bne.n	8002ad0 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2200      	movs	r2, #0
 8002ace:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f002 fd35 	bl	8005544 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6818      	ldr	r0, [r3, #0]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	7c1a      	ldrb	r2, [r3, #16]
 8002ae2:	f88d 2000 	strb.w	r2, [sp]
 8002ae6:	3304      	adds	r3, #4
 8002ae8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002aea:	f002 fcc7 	bl	800547c <USB_CoreInit>
 8002aee:	4603      	mov	r3, r0
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d005      	beq.n	8002b00 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2202      	movs	r2, #2
 8002af8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002afc:	2301      	movs	r3, #1
 8002afe:	e0ce      	b.n	8002c9e <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	2100      	movs	r1, #0
 8002b06:	4618      	mov	r0, r3
 8002b08:	f002 fd2d 	bl	8005566 <USB_SetCurrentMode>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d005      	beq.n	8002b1e <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2202      	movs	r2, #2
 8002b16:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e0bf      	b.n	8002c9e <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b1e:	2300      	movs	r3, #0
 8002b20:	73fb      	strb	r3, [r7, #15]
 8002b22:	e04a      	b.n	8002bba <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002b24:	7bfa      	ldrb	r2, [r7, #15]
 8002b26:	6879      	ldr	r1, [r7, #4]
 8002b28:	4613      	mov	r3, r2
 8002b2a:	00db      	lsls	r3, r3, #3
 8002b2c:	4413      	add	r3, r2
 8002b2e:	009b      	lsls	r3, r3, #2
 8002b30:	440b      	add	r3, r1
 8002b32:	3315      	adds	r3, #21
 8002b34:	2201      	movs	r2, #1
 8002b36:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002b38:	7bfa      	ldrb	r2, [r7, #15]
 8002b3a:	6879      	ldr	r1, [r7, #4]
 8002b3c:	4613      	mov	r3, r2
 8002b3e:	00db      	lsls	r3, r3, #3
 8002b40:	4413      	add	r3, r2
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	440b      	add	r3, r1
 8002b46:	3314      	adds	r3, #20
 8002b48:	7bfa      	ldrb	r2, [r7, #15]
 8002b4a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002b4c:	7bfa      	ldrb	r2, [r7, #15]
 8002b4e:	7bfb      	ldrb	r3, [r7, #15]
 8002b50:	b298      	uxth	r0, r3
 8002b52:	6879      	ldr	r1, [r7, #4]
 8002b54:	4613      	mov	r3, r2
 8002b56:	00db      	lsls	r3, r3, #3
 8002b58:	4413      	add	r3, r2
 8002b5a:	009b      	lsls	r3, r3, #2
 8002b5c:	440b      	add	r3, r1
 8002b5e:	332e      	adds	r3, #46	@ 0x2e
 8002b60:	4602      	mov	r2, r0
 8002b62:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002b64:	7bfa      	ldrb	r2, [r7, #15]
 8002b66:	6879      	ldr	r1, [r7, #4]
 8002b68:	4613      	mov	r3, r2
 8002b6a:	00db      	lsls	r3, r3, #3
 8002b6c:	4413      	add	r3, r2
 8002b6e:	009b      	lsls	r3, r3, #2
 8002b70:	440b      	add	r3, r1
 8002b72:	3318      	adds	r3, #24
 8002b74:	2200      	movs	r2, #0
 8002b76:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002b78:	7bfa      	ldrb	r2, [r7, #15]
 8002b7a:	6879      	ldr	r1, [r7, #4]
 8002b7c:	4613      	mov	r3, r2
 8002b7e:	00db      	lsls	r3, r3, #3
 8002b80:	4413      	add	r3, r2
 8002b82:	009b      	lsls	r3, r3, #2
 8002b84:	440b      	add	r3, r1
 8002b86:	331c      	adds	r3, #28
 8002b88:	2200      	movs	r2, #0
 8002b8a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002b8c:	7bfa      	ldrb	r2, [r7, #15]
 8002b8e:	6879      	ldr	r1, [r7, #4]
 8002b90:	4613      	mov	r3, r2
 8002b92:	00db      	lsls	r3, r3, #3
 8002b94:	4413      	add	r3, r2
 8002b96:	009b      	lsls	r3, r3, #2
 8002b98:	440b      	add	r3, r1
 8002b9a:	3320      	adds	r3, #32
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002ba0:	7bfa      	ldrb	r2, [r7, #15]
 8002ba2:	6879      	ldr	r1, [r7, #4]
 8002ba4:	4613      	mov	r3, r2
 8002ba6:	00db      	lsls	r3, r3, #3
 8002ba8:	4413      	add	r3, r2
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	440b      	add	r3, r1
 8002bae:	3324      	adds	r3, #36	@ 0x24
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bb4:	7bfb      	ldrb	r3, [r7, #15]
 8002bb6:	3301      	adds	r3, #1
 8002bb8:	73fb      	strb	r3, [r7, #15]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	791b      	ldrb	r3, [r3, #4]
 8002bbe:	7bfa      	ldrb	r2, [r7, #15]
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	d3af      	bcc.n	8002b24 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	73fb      	strb	r3, [r7, #15]
 8002bc8:	e044      	b.n	8002c54 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002bca:	7bfa      	ldrb	r2, [r7, #15]
 8002bcc:	6879      	ldr	r1, [r7, #4]
 8002bce:	4613      	mov	r3, r2
 8002bd0:	00db      	lsls	r3, r3, #3
 8002bd2:	4413      	add	r3, r2
 8002bd4:	009b      	lsls	r3, r3, #2
 8002bd6:	440b      	add	r3, r1
 8002bd8:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002bdc:	2200      	movs	r2, #0
 8002bde:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002be0:	7bfa      	ldrb	r2, [r7, #15]
 8002be2:	6879      	ldr	r1, [r7, #4]
 8002be4:	4613      	mov	r3, r2
 8002be6:	00db      	lsls	r3, r3, #3
 8002be8:	4413      	add	r3, r2
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	440b      	add	r3, r1
 8002bee:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002bf2:	7bfa      	ldrb	r2, [r7, #15]
 8002bf4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002bf6:	7bfa      	ldrb	r2, [r7, #15]
 8002bf8:	6879      	ldr	r1, [r7, #4]
 8002bfa:	4613      	mov	r3, r2
 8002bfc:	00db      	lsls	r3, r3, #3
 8002bfe:	4413      	add	r3, r2
 8002c00:	009b      	lsls	r3, r3, #2
 8002c02:	440b      	add	r3, r1
 8002c04:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002c08:	2200      	movs	r2, #0
 8002c0a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002c0c:	7bfa      	ldrb	r2, [r7, #15]
 8002c0e:	6879      	ldr	r1, [r7, #4]
 8002c10:	4613      	mov	r3, r2
 8002c12:	00db      	lsls	r3, r3, #3
 8002c14:	4413      	add	r3, r2
 8002c16:	009b      	lsls	r3, r3, #2
 8002c18:	440b      	add	r3, r1
 8002c1a:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002c1e:	2200      	movs	r2, #0
 8002c20:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002c22:	7bfa      	ldrb	r2, [r7, #15]
 8002c24:	6879      	ldr	r1, [r7, #4]
 8002c26:	4613      	mov	r3, r2
 8002c28:	00db      	lsls	r3, r3, #3
 8002c2a:	4413      	add	r3, r2
 8002c2c:	009b      	lsls	r3, r3, #2
 8002c2e:	440b      	add	r3, r1
 8002c30:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002c34:	2200      	movs	r2, #0
 8002c36:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002c38:	7bfa      	ldrb	r2, [r7, #15]
 8002c3a:	6879      	ldr	r1, [r7, #4]
 8002c3c:	4613      	mov	r3, r2
 8002c3e:	00db      	lsls	r3, r3, #3
 8002c40:	4413      	add	r3, r2
 8002c42:	009b      	lsls	r3, r3, #2
 8002c44:	440b      	add	r3, r1
 8002c46:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c4e:	7bfb      	ldrb	r3, [r7, #15]
 8002c50:	3301      	adds	r3, #1
 8002c52:	73fb      	strb	r3, [r7, #15]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	791b      	ldrb	r3, [r3, #4]
 8002c58:	7bfa      	ldrb	r2, [r7, #15]
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	d3b5      	bcc.n	8002bca <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6818      	ldr	r0, [r3, #0]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	7c1a      	ldrb	r2, [r3, #16]
 8002c66:	f88d 2000 	strb.w	r2, [sp]
 8002c6a:	3304      	adds	r3, #4
 8002c6c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c6e:	f002 fcc7 	bl	8005600 <USB_DevInit>
 8002c72:	4603      	mov	r3, r0
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d005      	beq.n	8002c84 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2202      	movs	r2, #2
 8002c7c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	e00c      	b.n	8002c9e <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2200      	movs	r2, #0
 8002c88:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4618      	mov	r0, r3
 8002c98:	f002 fe8f 	bl	80059ba <USB_DevDisconnect>

  return HAL_OK;
 8002c9c:	2300      	movs	r3, #0
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3710      	adds	r7, #16
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}
	...

08002ca8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b086      	sub	sp, #24
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d101      	bne.n	8002cba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e267      	b.n	800318a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 0301 	and.w	r3, r3, #1
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d075      	beq.n	8002db2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002cc6:	4b88      	ldr	r3, [pc, #544]	@ (8002ee8 <HAL_RCC_OscConfig+0x240>)
 8002cc8:	689b      	ldr	r3, [r3, #8]
 8002cca:	f003 030c 	and.w	r3, r3, #12
 8002cce:	2b04      	cmp	r3, #4
 8002cd0:	d00c      	beq.n	8002cec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cd2:	4b85      	ldr	r3, [pc, #532]	@ (8002ee8 <HAL_RCC_OscConfig+0x240>)
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002cda:	2b08      	cmp	r3, #8
 8002cdc:	d112      	bne.n	8002d04 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cde:	4b82      	ldr	r3, [pc, #520]	@ (8002ee8 <HAL_RCC_OscConfig+0x240>)
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ce6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002cea:	d10b      	bne.n	8002d04 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cec:	4b7e      	ldr	r3, [pc, #504]	@ (8002ee8 <HAL_RCC_OscConfig+0x240>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d05b      	beq.n	8002db0 <HAL_RCC_OscConfig+0x108>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d157      	bne.n	8002db0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
 8002d02:	e242      	b.n	800318a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d0c:	d106      	bne.n	8002d1c <HAL_RCC_OscConfig+0x74>
 8002d0e:	4b76      	ldr	r3, [pc, #472]	@ (8002ee8 <HAL_RCC_OscConfig+0x240>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a75      	ldr	r2, [pc, #468]	@ (8002ee8 <HAL_RCC_OscConfig+0x240>)
 8002d14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d18:	6013      	str	r3, [r2, #0]
 8002d1a:	e01d      	b.n	8002d58 <HAL_RCC_OscConfig+0xb0>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002d24:	d10c      	bne.n	8002d40 <HAL_RCC_OscConfig+0x98>
 8002d26:	4b70      	ldr	r3, [pc, #448]	@ (8002ee8 <HAL_RCC_OscConfig+0x240>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a6f      	ldr	r2, [pc, #444]	@ (8002ee8 <HAL_RCC_OscConfig+0x240>)
 8002d2c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002d30:	6013      	str	r3, [r2, #0]
 8002d32:	4b6d      	ldr	r3, [pc, #436]	@ (8002ee8 <HAL_RCC_OscConfig+0x240>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a6c      	ldr	r2, [pc, #432]	@ (8002ee8 <HAL_RCC_OscConfig+0x240>)
 8002d38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d3c:	6013      	str	r3, [r2, #0]
 8002d3e:	e00b      	b.n	8002d58 <HAL_RCC_OscConfig+0xb0>
 8002d40:	4b69      	ldr	r3, [pc, #420]	@ (8002ee8 <HAL_RCC_OscConfig+0x240>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a68      	ldr	r2, [pc, #416]	@ (8002ee8 <HAL_RCC_OscConfig+0x240>)
 8002d46:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d4a:	6013      	str	r3, [r2, #0]
 8002d4c:	4b66      	ldr	r3, [pc, #408]	@ (8002ee8 <HAL_RCC_OscConfig+0x240>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a65      	ldr	r2, [pc, #404]	@ (8002ee8 <HAL_RCC_OscConfig+0x240>)
 8002d52:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002d56:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d013      	beq.n	8002d88 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d60:	f7fe ffa0 	bl	8001ca4 <HAL_GetTick>
 8002d64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d66:	e008      	b.n	8002d7a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d68:	f7fe ff9c 	bl	8001ca4 <HAL_GetTick>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	1ad3      	subs	r3, r2, r3
 8002d72:	2b64      	cmp	r3, #100	@ 0x64
 8002d74:	d901      	bls.n	8002d7a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002d76:	2303      	movs	r3, #3
 8002d78:	e207      	b.n	800318a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d7a:	4b5b      	ldr	r3, [pc, #364]	@ (8002ee8 <HAL_RCC_OscConfig+0x240>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d0f0      	beq.n	8002d68 <HAL_RCC_OscConfig+0xc0>
 8002d86:	e014      	b.n	8002db2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d88:	f7fe ff8c 	bl	8001ca4 <HAL_GetTick>
 8002d8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d8e:	e008      	b.n	8002da2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d90:	f7fe ff88 	bl	8001ca4 <HAL_GetTick>
 8002d94:	4602      	mov	r2, r0
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	1ad3      	subs	r3, r2, r3
 8002d9a:	2b64      	cmp	r3, #100	@ 0x64
 8002d9c:	d901      	bls.n	8002da2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d9e:	2303      	movs	r3, #3
 8002da0:	e1f3      	b.n	800318a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002da2:	4b51      	ldr	r3, [pc, #324]	@ (8002ee8 <HAL_RCC_OscConfig+0x240>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d1f0      	bne.n	8002d90 <HAL_RCC_OscConfig+0xe8>
 8002dae:	e000      	b.n	8002db2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002db0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 0302 	and.w	r3, r3, #2
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d063      	beq.n	8002e86 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002dbe:	4b4a      	ldr	r3, [pc, #296]	@ (8002ee8 <HAL_RCC_OscConfig+0x240>)
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	f003 030c 	and.w	r3, r3, #12
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d00b      	beq.n	8002de2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dca:	4b47      	ldr	r3, [pc, #284]	@ (8002ee8 <HAL_RCC_OscConfig+0x240>)
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002dd2:	2b08      	cmp	r3, #8
 8002dd4:	d11c      	bne.n	8002e10 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dd6:	4b44      	ldr	r3, [pc, #272]	@ (8002ee8 <HAL_RCC_OscConfig+0x240>)
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d116      	bne.n	8002e10 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002de2:	4b41      	ldr	r3, [pc, #260]	@ (8002ee8 <HAL_RCC_OscConfig+0x240>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 0302 	and.w	r3, r3, #2
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d005      	beq.n	8002dfa <HAL_RCC_OscConfig+0x152>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	68db      	ldr	r3, [r3, #12]
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	d001      	beq.n	8002dfa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e1c7      	b.n	800318a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dfa:	4b3b      	ldr	r3, [pc, #236]	@ (8002ee8 <HAL_RCC_OscConfig+0x240>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	691b      	ldr	r3, [r3, #16]
 8002e06:	00db      	lsls	r3, r3, #3
 8002e08:	4937      	ldr	r1, [pc, #220]	@ (8002ee8 <HAL_RCC_OscConfig+0x240>)
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e0e:	e03a      	b.n	8002e86 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	68db      	ldr	r3, [r3, #12]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d020      	beq.n	8002e5a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e18:	4b34      	ldr	r3, [pc, #208]	@ (8002eec <HAL_RCC_OscConfig+0x244>)
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e1e:	f7fe ff41 	bl	8001ca4 <HAL_GetTick>
 8002e22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e24:	e008      	b.n	8002e38 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e26:	f7fe ff3d 	bl	8001ca4 <HAL_GetTick>
 8002e2a:	4602      	mov	r2, r0
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	1ad3      	subs	r3, r2, r3
 8002e30:	2b02      	cmp	r3, #2
 8002e32:	d901      	bls.n	8002e38 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002e34:	2303      	movs	r3, #3
 8002e36:	e1a8      	b.n	800318a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e38:	4b2b      	ldr	r3, [pc, #172]	@ (8002ee8 <HAL_RCC_OscConfig+0x240>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f003 0302 	and.w	r3, r3, #2
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d0f0      	beq.n	8002e26 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e44:	4b28      	ldr	r3, [pc, #160]	@ (8002ee8 <HAL_RCC_OscConfig+0x240>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	691b      	ldr	r3, [r3, #16]
 8002e50:	00db      	lsls	r3, r3, #3
 8002e52:	4925      	ldr	r1, [pc, #148]	@ (8002ee8 <HAL_RCC_OscConfig+0x240>)
 8002e54:	4313      	orrs	r3, r2
 8002e56:	600b      	str	r3, [r1, #0]
 8002e58:	e015      	b.n	8002e86 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e5a:	4b24      	ldr	r3, [pc, #144]	@ (8002eec <HAL_RCC_OscConfig+0x244>)
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e60:	f7fe ff20 	bl	8001ca4 <HAL_GetTick>
 8002e64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e66:	e008      	b.n	8002e7a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e68:	f7fe ff1c 	bl	8001ca4 <HAL_GetTick>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	1ad3      	subs	r3, r2, r3
 8002e72:	2b02      	cmp	r3, #2
 8002e74:	d901      	bls.n	8002e7a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002e76:	2303      	movs	r3, #3
 8002e78:	e187      	b.n	800318a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e7a:	4b1b      	ldr	r3, [pc, #108]	@ (8002ee8 <HAL_RCC_OscConfig+0x240>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 0302 	and.w	r3, r3, #2
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d1f0      	bne.n	8002e68 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 0308 	and.w	r3, r3, #8
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d036      	beq.n	8002f00 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	695b      	ldr	r3, [r3, #20]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d016      	beq.n	8002ec8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e9a:	4b15      	ldr	r3, [pc, #84]	@ (8002ef0 <HAL_RCC_OscConfig+0x248>)
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ea0:	f7fe ff00 	bl	8001ca4 <HAL_GetTick>
 8002ea4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ea6:	e008      	b.n	8002eba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ea8:	f7fe fefc 	bl	8001ca4 <HAL_GetTick>
 8002eac:	4602      	mov	r2, r0
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	1ad3      	subs	r3, r2, r3
 8002eb2:	2b02      	cmp	r3, #2
 8002eb4:	d901      	bls.n	8002eba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002eb6:	2303      	movs	r3, #3
 8002eb8:	e167      	b.n	800318a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002eba:	4b0b      	ldr	r3, [pc, #44]	@ (8002ee8 <HAL_RCC_OscConfig+0x240>)
 8002ebc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ebe:	f003 0302 	and.w	r3, r3, #2
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d0f0      	beq.n	8002ea8 <HAL_RCC_OscConfig+0x200>
 8002ec6:	e01b      	b.n	8002f00 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ec8:	4b09      	ldr	r3, [pc, #36]	@ (8002ef0 <HAL_RCC_OscConfig+0x248>)
 8002eca:	2200      	movs	r2, #0
 8002ecc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ece:	f7fe fee9 	bl	8001ca4 <HAL_GetTick>
 8002ed2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ed4:	e00e      	b.n	8002ef4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ed6:	f7fe fee5 	bl	8001ca4 <HAL_GetTick>
 8002eda:	4602      	mov	r2, r0
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	1ad3      	subs	r3, r2, r3
 8002ee0:	2b02      	cmp	r3, #2
 8002ee2:	d907      	bls.n	8002ef4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002ee4:	2303      	movs	r3, #3
 8002ee6:	e150      	b.n	800318a <HAL_RCC_OscConfig+0x4e2>
 8002ee8:	40023800 	.word	0x40023800
 8002eec:	42470000 	.word	0x42470000
 8002ef0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ef4:	4b88      	ldr	r3, [pc, #544]	@ (8003118 <HAL_RCC_OscConfig+0x470>)
 8002ef6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ef8:	f003 0302 	and.w	r3, r3, #2
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d1ea      	bne.n	8002ed6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f003 0304 	and.w	r3, r3, #4
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	f000 8097 	beq.w	800303c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f12:	4b81      	ldr	r3, [pc, #516]	@ (8003118 <HAL_RCC_OscConfig+0x470>)
 8002f14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d10f      	bne.n	8002f3e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f1e:	2300      	movs	r3, #0
 8002f20:	60bb      	str	r3, [r7, #8]
 8002f22:	4b7d      	ldr	r3, [pc, #500]	@ (8003118 <HAL_RCC_OscConfig+0x470>)
 8002f24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f26:	4a7c      	ldr	r2, [pc, #496]	@ (8003118 <HAL_RCC_OscConfig+0x470>)
 8002f28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f2e:	4b7a      	ldr	r3, [pc, #488]	@ (8003118 <HAL_RCC_OscConfig+0x470>)
 8002f30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f36:	60bb      	str	r3, [r7, #8]
 8002f38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f3e:	4b77      	ldr	r3, [pc, #476]	@ (800311c <HAL_RCC_OscConfig+0x474>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d118      	bne.n	8002f7c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f4a:	4b74      	ldr	r3, [pc, #464]	@ (800311c <HAL_RCC_OscConfig+0x474>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a73      	ldr	r2, [pc, #460]	@ (800311c <HAL_RCC_OscConfig+0x474>)
 8002f50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f56:	f7fe fea5 	bl	8001ca4 <HAL_GetTick>
 8002f5a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f5c:	e008      	b.n	8002f70 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f5e:	f7fe fea1 	bl	8001ca4 <HAL_GetTick>
 8002f62:	4602      	mov	r2, r0
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	1ad3      	subs	r3, r2, r3
 8002f68:	2b02      	cmp	r3, #2
 8002f6a:	d901      	bls.n	8002f70 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002f6c:	2303      	movs	r3, #3
 8002f6e:	e10c      	b.n	800318a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f70:	4b6a      	ldr	r3, [pc, #424]	@ (800311c <HAL_RCC_OscConfig+0x474>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d0f0      	beq.n	8002f5e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	d106      	bne.n	8002f92 <HAL_RCC_OscConfig+0x2ea>
 8002f84:	4b64      	ldr	r3, [pc, #400]	@ (8003118 <HAL_RCC_OscConfig+0x470>)
 8002f86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f88:	4a63      	ldr	r2, [pc, #396]	@ (8003118 <HAL_RCC_OscConfig+0x470>)
 8002f8a:	f043 0301 	orr.w	r3, r3, #1
 8002f8e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f90:	e01c      	b.n	8002fcc <HAL_RCC_OscConfig+0x324>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	2b05      	cmp	r3, #5
 8002f98:	d10c      	bne.n	8002fb4 <HAL_RCC_OscConfig+0x30c>
 8002f9a:	4b5f      	ldr	r3, [pc, #380]	@ (8003118 <HAL_RCC_OscConfig+0x470>)
 8002f9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f9e:	4a5e      	ldr	r2, [pc, #376]	@ (8003118 <HAL_RCC_OscConfig+0x470>)
 8002fa0:	f043 0304 	orr.w	r3, r3, #4
 8002fa4:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fa6:	4b5c      	ldr	r3, [pc, #368]	@ (8003118 <HAL_RCC_OscConfig+0x470>)
 8002fa8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002faa:	4a5b      	ldr	r2, [pc, #364]	@ (8003118 <HAL_RCC_OscConfig+0x470>)
 8002fac:	f043 0301 	orr.w	r3, r3, #1
 8002fb0:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fb2:	e00b      	b.n	8002fcc <HAL_RCC_OscConfig+0x324>
 8002fb4:	4b58      	ldr	r3, [pc, #352]	@ (8003118 <HAL_RCC_OscConfig+0x470>)
 8002fb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fb8:	4a57      	ldr	r2, [pc, #348]	@ (8003118 <HAL_RCC_OscConfig+0x470>)
 8002fba:	f023 0301 	bic.w	r3, r3, #1
 8002fbe:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fc0:	4b55      	ldr	r3, [pc, #340]	@ (8003118 <HAL_RCC_OscConfig+0x470>)
 8002fc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fc4:	4a54      	ldr	r2, [pc, #336]	@ (8003118 <HAL_RCC_OscConfig+0x470>)
 8002fc6:	f023 0304 	bic.w	r3, r3, #4
 8002fca:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d015      	beq.n	8003000 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fd4:	f7fe fe66 	bl	8001ca4 <HAL_GetTick>
 8002fd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fda:	e00a      	b.n	8002ff2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fdc:	f7fe fe62 	bl	8001ca4 <HAL_GetTick>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	1ad3      	subs	r3, r2, r3
 8002fe6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d901      	bls.n	8002ff2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002fee:	2303      	movs	r3, #3
 8002ff0:	e0cb      	b.n	800318a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ff2:	4b49      	ldr	r3, [pc, #292]	@ (8003118 <HAL_RCC_OscConfig+0x470>)
 8002ff4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ff6:	f003 0302 	and.w	r3, r3, #2
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d0ee      	beq.n	8002fdc <HAL_RCC_OscConfig+0x334>
 8002ffe:	e014      	b.n	800302a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003000:	f7fe fe50 	bl	8001ca4 <HAL_GetTick>
 8003004:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003006:	e00a      	b.n	800301e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003008:	f7fe fe4c 	bl	8001ca4 <HAL_GetTick>
 800300c:	4602      	mov	r2, r0
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	1ad3      	subs	r3, r2, r3
 8003012:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003016:	4293      	cmp	r3, r2
 8003018:	d901      	bls.n	800301e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800301a:	2303      	movs	r3, #3
 800301c:	e0b5      	b.n	800318a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800301e:	4b3e      	ldr	r3, [pc, #248]	@ (8003118 <HAL_RCC_OscConfig+0x470>)
 8003020:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003022:	f003 0302 	and.w	r3, r3, #2
 8003026:	2b00      	cmp	r3, #0
 8003028:	d1ee      	bne.n	8003008 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800302a:	7dfb      	ldrb	r3, [r7, #23]
 800302c:	2b01      	cmp	r3, #1
 800302e:	d105      	bne.n	800303c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003030:	4b39      	ldr	r3, [pc, #228]	@ (8003118 <HAL_RCC_OscConfig+0x470>)
 8003032:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003034:	4a38      	ldr	r2, [pc, #224]	@ (8003118 <HAL_RCC_OscConfig+0x470>)
 8003036:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800303a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	699b      	ldr	r3, [r3, #24]
 8003040:	2b00      	cmp	r3, #0
 8003042:	f000 80a1 	beq.w	8003188 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003046:	4b34      	ldr	r3, [pc, #208]	@ (8003118 <HAL_RCC_OscConfig+0x470>)
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	f003 030c 	and.w	r3, r3, #12
 800304e:	2b08      	cmp	r3, #8
 8003050:	d05c      	beq.n	800310c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	699b      	ldr	r3, [r3, #24]
 8003056:	2b02      	cmp	r3, #2
 8003058:	d141      	bne.n	80030de <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800305a:	4b31      	ldr	r3, [pc, #196]	@ (8003120 <HAL_RCC_OscConfig+0x478>)
 800305c:	2200      	movs	r2, #0
 800305e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003060:	f7fe fe20 	bl	8001ca4 <HAL_GetTick>
 8003064:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003066:	e008      	b.n	800307a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003068:	f7fe fe1c 	bl	8001ca4 <HAL_GetTick>
 800306c:	4602      	mov	r2, r0
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	1ad3      	subs	r3, r2, r3
 8003072:	2b02      	cmp	r3, #2
 8003074:	d901      	bls.n	800307a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003076:	2303      	movs	r3, #3
 8003078:	e087      	b.n	800318a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800307a:	4b27      	ldr	r3, [pc, #156]	@ (8003118 <HAL_RCC_OscConfig+0x470>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003082:	2b00      	cmp	r3, #0
 8003084:	d1f0      	bne.n	8003068 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	69da      	ldr	r2, [r3, #28]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6a1b      	ldr	r3, [r3, #32]
 800308e:	431a      	orrs	r2, r3
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003094:	019b      	lsls	r3, r3, #6
 8003096:	431a      	orrs	r2, r3
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800309c:	085b      	lsrs	r3, r3, #1
 800309e:	3b01      	subs	r3, #1
 80030a0:	041b      	lsls	r3, r3, #16
 80030a2:	431a      	orrs	r2, r3
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030a8:	061b      	lsls	r3, r3, #24
 80030aa:	491b      	ldr	r1, [pc, #108]	@ (8003118 <HAL_RCC_OscConfig+0x470>)
 80030ac:	4313      	orrs	r3, r2
 80030ae:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030b0:	4b1b      	ldr	r3, [pc, #108]	@ (8003120 <HAL_RCC_OscConfig+0x478>)
 80030b2:	2201      	movs	r2, #1
 80030b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030b6:	f7fe fdf5 	bl	8001ca4 <HAL_GetTick>
 80030ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030bc:	e008      	b.n	80030d0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030be:	f7fe fdf1 	bl	8001ca4 <HAL_GetTick>
 80030c2:	4602      	mov	r2, r0
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	1ad3      	subs	r3, r2, r3
 80030c8:	2b02      	cmp	r3, #2
 80030ca:	d901      	bls.n	80030d0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80030cc:	2303      	movs	r3, #3
 80030ce:	e05c      	b.n	800318a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030d0:	4b11      	ldr	r3, [pc, #68]	@ (8003118 <HAL_RCC_OscConfig+0x470>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d0f0      	beq.n	80030be <HAL_RCC_OscConfig+0x416>
 80030dc:	e054      	b.n	8003188 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030de:	4b10      	ldr	r3, [pc, #64]	@ (8003120 <HAL_RCC_OscConfig+0x478>)
 80030e0:	2200      	movs	r2, #0
 80030e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030e4:	f7fe fdde 	bl	8001ca4 <HAL_GetTick>
 80030e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030ea:	e008      	b.n	80030fe <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030ec:	f7fe fdda 	bl	8001ca4 <HAL_GetTick>
 80030f0:	4602      	mov	r2, r0
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	1ad3      	subs	r3, r2, r3
 80030f6:	2b02      	cmp	r3, #2
 80030f8:	d901      	bls.n	80030fe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80030fa:	2303      	movs	r3, #3
 80030fc:	e045      	b.n	800318a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030fe:	4b06      	ldr	r3, [pc, #24]	@ (8003118 <HAL_RCC_OscConfig+0x470>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003106:	2b00      	cmp	r3, #0
 8003108:	d1f0      	bne.n	80030ec <HAL_RCC_OscConfig+0x444>
 800310a:	e03d      	b.n	8003188 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	699b      	ldr	r3, [r3, #24]
 8003110:	2b01      	cmp	r3, #1
 8003112:	d107      	bne.n	8003124 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	e038      	b.n	800318a <HAL_RCC_OscConfig+0x4e2>
 8003118:	40023800 	.word	0x40023800
 800311c:	40007000 	.word	0x40007000
 8003120:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003124:	4b1b      	ldr	r3, [pc, #108]	@ (8003194 <HAL_RCC_OscConfig+0x4ec>)
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	699b      	ldr	r3, [r3, #24]
 800312e:	2b01      	cmp	r3, #1
 8003130:	d028      	beq.n	8003184 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800313c:	429a      	cmp	r2, r3
 800313e:	d121      	bne.n	8003184 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800314a:	429a      	cmp	r2, r3
 800314c:	d11a      	bne.n	8003184 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800314e:	68fa      	ldr	r2, [r7, #12]
 8003150:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003154:	4013      	ands	r3, r2
 8003156:	687a      	ldr	r2, [r7, #4]
 8003158:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800315a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800315c:	4293      	cmp	r3, r2
 800315e:	d111      	bne.n	8003184 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800316a:	085b      	lsrs	r3, r3, #1
 800316c:	3b01      	subs	r3, #1
 800316e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003170:	429a      	cmp	r2, r3
 8003172:	d107      	bne.n	8003184 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800317e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003180:	429a      	cmp	r2, r3
 8003182:	d001      	beq.n	8003188 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003184:	2301      	movs	r3, #1
 8003186:	e000      	b.n	800318a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003188:	2300      	movs	r3, #0
}
 800318a:	4618      	mov	r0, r3
 800318c:	3718      	adds	r7, #24
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}
 8003192:	bf00      	nop
 8003194:	40023800 	.word	0x40023800

08003198 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b084      	sub	sp, #16
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
 80031a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d101      	bne.n	80031ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031a8:	2301      	movs	r3, #1
 80031aa:	e0cc      	b.n	8003346 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80031ac:	4b68      	ldr	r3, [pc, #416]	@ (8003350 <HAL_RCC_ClockConfig+0x1b8>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f003 030f 	and.w	r3, r3, #15
 80031b4:	683a      	ldr	r2, [r7, #0]
 80031b6:	429a      	cmp	r2, r3
 80031b8:	d90c      	bls.n	80031d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031ba:	4b65      	ldr	r3, [pc, #404]	@ (8003350 <HAL_RCC_ClockConfig+0x1b8>)
 80031bc:	683a      	ldr	r2, [r7, #0]
 80031be:	b2d2      	uxtb	r2, r2
 80031c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031c2:	4b63      	ldr	r3, [pc, #396]	@ (8003350 <HAL_RCC_ClockConfig+0x1b8>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 030f 	and.w	r3, r3, #15
 80031ca:	683a      	ldr	r2, [r7, #0]
 80031cc:	429a      	cmp	r2, r3
 80031ce:	d001      	beq.n	80031d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
 80031d2:	e0b8      	b.n	8003346 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f003 0302 	and.w	r3, r3, #2
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d020      	beq.n	8003222 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f003 0304 	and.w	r3, r3, #4
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d005      	beq.n	80031f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80031ec:	4b59      	ldr	r3, [pc, #356]	@ (8003354 <HAL_RCC_ClockConfig+0x1bc>)
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	4a58      	ldr	r2, [pc, #352]	@ (8003354 <HAL_RCC_ClockConfig+0x1bc>)
 80031f2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80031f6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f003 0308 	and.w	r3, r3, #8
 8003200:	2b00      	cmp	r3, #0
 8003202:	d005      	beq.n	8003210 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003204:	4b53      	ldr	r3, [pc, #332]	@ (8003354 <HAL_RCC_ClockConfig+0x1bc>)
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	4a52      	ldr	r2, [pc, #328]	@ (8003354 <HAL_RCC_ClockConfig+0x1bc>)
 800320a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800320e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003210:	4b50      	ldr	r3, [pc, #320]	@ (8003354 <HAL_RCC_ClockConfig+0x1bc>)
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	494d      	ldr	r1, [pc, #308]	@ (8003354 <HAL_RCC_ClockConfig+0x1bc>)
 800321e:	4313      	orrs	r3, r2
 8003220:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 0301 	and.w	r3, r3, #1
 800322a:	2b00      	cmp	r3, #0
 800322c:	d044      	beq.n	80032b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	2b01      	cmp	r3, #1
 8003234:	d107      	bne.n	8003246 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003236:	4b47      	ldr	r3, [pc, #284]	@ (8003354 <HAL_RCC_ClockConfig+0x1bc>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800323e:	2b00      	cmp	r3, #0
 8003240:	d119      	bne.n	8003276 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	e07f      	b.n	8003346 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	2b02      	cmp	r3, #2
 800324c:	d003      	beq.n	8003256 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003252:	2b03      	cmp	r3, #3
 8003254:	d107      	bne.n	8003266 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003256:	4b3f      	ldr	r3, [pc, #252]	@ (8003354 <HAL_RCC_ClockConfig+0x1bc>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800325e:	2b00      	cmp	r3, #0
 8003260:	d109      	bne.n	8003276 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	e06f      	b.n	8003346 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003266:	4b3b      	ldr	r3, [pc, #236]	@ (8003354 <HAL_RCC_ClockConfig+0x1bc>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f003 0302 	and.w	r3, r3, #2
 800326e:	2b00      	cmp	r3, #0
 8003270:	d101      	bne.n	8003276 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	e067      	b.n	8003346 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003276:	4b37      	ldr	r3, [pc, #220]	@ (8003354 <HAL_RCC_ClockConfig+0x1bc>)
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	f023 0203 	bic.w	r2, r3, #3
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	4934      	ldr	r1, [pc, #208]	@ (8003354 <HAL_RCC_ClockConfig+0x1bc>)
 8003284:	4313      	orrs	r3, r2
 8003286:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003288:	f7fe fd0c 	bl	8001ca4 <HAL_GetTick>
 800328c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800328e:	e00a      	b.n	80032a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003290:	f7fe fd08 	bl	8001ca4 <HAL_GetTick>
 8003294:	4602      	mov	r2, r0
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	1ad3      	subs	r3, r2, r3
 800329a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800329e:	4293      	cmp	r3, r2
 80032a0:	d901      	bls.n	80032a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80032a2:	2303      	movs	r3, #3
 80032a4:	e04f      	b.n	8003346 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032a6:	4b2b      	ldr	r3, [pc, #172]	@ (8003354 <HAL_RCC_ClockConfig+0x1bc>)
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	f003 020c 	and.w	r2, r3, #12
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	009b      	lsls	r3, r3, #2
 80032b4:	429a      	cmp	r2, r3
 80032b6:	d1eb      	bne.n	8003290 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80032b8:	4b25      	ldr	r3, [pc, #148]	@ (8003350 <HAL_RCC_ClockConfig+0x1b8>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f003 030f 	and.w	r3, r3, #15
 80032c0:	683a      	ldr	r2, [r7, #0]
 80032c2:	429a      	cmp	r2, r3
 80032c4:	d20c      	bcs.n	80032e0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032c6:	4b22      	ldr	r3, [pc, #136]	@ (8003350 <HAL_RCC_ClockConfig+0x1b8>)
 80032c8:	683a      	ldr	r2, [r7, #0]
 80032ca:	b2d2      	uxtb	r2, r2
 80032cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032ce:	4b20      	ldr	r3, [pc, #128]	@ (8003350 <HAL_RCC_ClockConfig+0x1b8>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f003 030f 	and.w	r3, r3, #15
 80032d6:	683a      	ldr	r2, [r7, #0]
 80032d8:	429a      	cmp	r2, r3
 80032da:	d001      	beq.n	80032e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80032dc:	2301      	movs	r3, #1
 80032de:	e032      	b.n	8003346 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f003 0304 	and.w	r3, r3, #4
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d008      	beq.n	80032fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032ec:	4b19      	ldr	r3, [pc, #100]	@ (8003354 <HAL_RCC_ClockConfig+0x1bc>)
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	68db      	ldr	r3, [r3, #12]
 80032f8:	4916      	ldr	r1, [pc, #88]	@ (8003354 <HAL_RCC_ClockConfig+0x1bc>)
 80032fa:	4313      	orrs	r3, r2
 80032fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f003 0308 	and.w	r3, r3, #8
 8003306:	2b00      	cmp	r3, #0
 8003308:	d009      	beq.n	800331e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800330a:	4b12      	ldr	r3, [pc, #72]	@ (8003354 <HAL_RCC_ClockConfig+0x1bc>)
 800330c:	689b      	ldr	r3, [r3, #8]
 800330e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	691b      	ldr	r3, [r3, #16]
 8003316:	00db      	lsls	r3, r3, #3
 8003318:	490e      	ldr	r1, [pc, #56]	@ (8003354 <HAL_RCC_ClockConfig+0x1bc>)
 800331a:	4313      	orrs	r3, r2
 800331c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800331e:	f000 f821 	bl	8003364 <HAL_RCC_GetSysClockFreq>
 8003322:	4602      	mov	r2, r0
 8003324:	4b0b      	ldr	r3, [pc, #44]	@ (8003354 <HAL_RCC_ClockConfig+0x1bc>)
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	091b      	lsrs	r3, r3, #4
 800332a:	f003 030f 	and.w	r3, r3, #15
 800332e:	490a      	ldr	r1, [pc, #40]	@ (8003358 <HAL_RCC_ClockConfig+0x1c0>)
 8003330:	5ccb      	ldrb	r3, [r1, r3]
 8003332:	fa22 f303 	lsr.w	r3, r2, r3
 8003336:	4a09      	ldr	r2, [pc, #36]	@ (800335c <HAL_RCC_ClockConfig+0x1c4>)
 8003338:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800333a:	4b09      	ldr	r3, [pc, #36]	@ (8003360 <HAL_RCC_ClockConfig+0x1c8>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4618      	mov	r0, r3
 8003340:	f7fe fc80 	bl	8001c44 <HAL_InitTick>

  return HAL_OK;
 8003344:	2300      	movs	r3, #0
}
 8003346:	4618      	mov	r0, r3
 8003348:	3710      	adds	r7, #16
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}
 800334e:	bf00      	nop
 8003350:	40023c00 	.word	0x40023c00
 8003354:	40023800 	.word	0x40023800
 8003358:	08006f94 	.word	0x08006f94
 800335c:	20000044 	.word	0x20000044
 8003360:	20000048 	.word	0x20000048

08003364 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003364:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003368:	b094      	sub	sp, #80	@ 0x50
 800336a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800336c:	2300      	movs	r3, #0
 800336e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003370:	2300      	movs	r3, #0
 8003372:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003374:	2300      	movs	r3, #0
 8003376:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003378:	2300      	movs	r3, #0
 800337a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800337c:	4b79      	ldr	r3, [pc, #484]	@ (8003564 <HAL_RCC_GetSysClockFreq+0x200>)
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	f003 030c 	and.w	r3, r3, #12
 8003384:	2b08      	cmp	r3, #8
 8003386:	d00d      	beq.n	80033a4 <HAL_RCC_GetSysClockFreq+0x40>
 8003388:	2b08      	cmp	r3, #8
 800338a:	f200 80e1 	bhi.w	8003550 <HAL_RCC_GetSysClockFreq+0x1ec>
 800338e:	2b00      	cmp	r3, #0
 8003390:	d002      	beq.n	8003398 <HAL_RCC_GetSysClockFreq+0x34>
 8003392:	2b04      	cmp	r3, #4
 8003394:	d003      	beq.n	800339e <HAL_RCC_GetSysClockFreq+0x3a>
 8003396:	e0db      	b.n	8003550 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003398:	4b73      	ldr	r3, [pc, #460]	@ (8003568 <HAL_RCC_GetSysClockFreq+0x204>)
 800339a:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 800339c:	e0db      	b.n	8003556 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800339e:	4b73      	ldr	r3, [pc, #460]	@ (800356c <HAL_RCC_GetSysClockFreq+0x208>)
 80033a0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80033a2:	e0d8      	b.n	8003556 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80033a4:	4b6f      	ldr	r3, [pc, #444]	@ (8003564 <HAL_RCC_GetSysClockFreq+0x200>)
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80033ac:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80033ae:	4b6d      	ldr	r3, [pc, #436]	@ (8003564 <HAL_RCC_GetSysClockFreq+0x200>)
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d063      	beq.n	8003482 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033ba:	4b6a      	ldr	r3, [pc, #424]	@ (8003564 <HAL_RCC_GetSysClockFreq+0x200>)
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	099b      	lsrs	r3, r3, #6
 80033c0:	2200      	movs	r2, #0
 80033c2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80033c4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80033c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033cc:	633b      	str	r3, [r7, #48]	@ 0x30
 80033ce:	2300      	movs	r3, #0
 80033d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80033d2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80033d6:	4622      	mov	r2, r4
 80033d8:	462b      	mov	r3, r5
 80033da:	f04f 0000 	mov.w	r0, #0
 80033de:	f04f 0100 	mov.w	r1, #0
 80033e2:	0159      	lsls	r1, r3, #5
 80033e4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80033e8:	0150      	lsls	r0, r2, #5
 80033ea:	4602      	mov	r2, r0
 80033ec:	460b      	mov	r3, r1
 80033ee:	4621      	mov	r1, r4
 80033f0:	1a51      	subs	r1, r2, r1
 80033f2:	6139      	str	r1, [r7, #16]
 80033f4:	4629      	mov	r1, r5
 80033f6:	eb63 0301 	sbc.w	r3, r3, r1
 80033fa:	617b      	str	r3, [r7, #20]
 80033fc:	f04f 0200 	mov.w	r2, #0
 8003400:	f04f 0300 	mov.w	r3, #0
 8003404:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003408:	4659      	mov	r1, fp
 800340a:	018b      	lsls	r3, r1, #6
 800340c:	4651      	mov	r1, sl
 800340e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003412:	4651      	mov	r1, sl
 8003414:	018a      	lsls	r2, r1, #6
 8003416:	4651      	mov	r1, sl
 8003418:	ebb2 0801 	subs.w	r8, r2, r1
 800341c:	4659      	mov	r1, fp
 800341e:	eb63 0901 	sbc.w	r9, r3, r1
 8003422:	f04f 0200 	mov.w	r2, #0
 8003426:	f04f 0300 	mov.w	r3, #0
 800342a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800342e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003432:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003436:	4690      	mov	r8, r2
 8003438:	4699      	mov	r9, r3
 800343a:	4623      	mov	r3, r4
 800343c:	eb18 0303 	adds.w	r3, r8, r3
 8003440:	60bb      	str	r3, [r7, #8]
 8003442:	462b      	mov	r3, r5
 8003444:	eb49 0303 	adc.w	r3, r9, r3
 8003448:	60fb      	str	r3, [r7, #12]
 800344a:	f04f 0200 	mov.w	r2, #0
 800344e:	f04f 0300 	mov.w	r3, #0
 8003452:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003456:	4629      	mov	r1, r5
 8003458:	024b      	lsls	r3, r1, #9
 800345a:	4621      	mov	r1, r4
 800345c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003460:	4621      	mov	r1, r4
 8003462:	024a      	lsls	r2, r1, #9
 8003464:	4610      	mov	r0, r2
 8003466:	4619      	mov	r1, r3
 8003468:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800346a:	2200      	movs	r2, #0
 800346c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800346e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003470:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003474:	f7fc ff1c 	bl	80002b0 <__aeabi_uldivmod>
 8003478:	4602      	mov	r2, r0
 800347a:	460b      	mov	r3, r1
 800347c:	4613      	mov	r3, r2
 800347e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003480:	e058      	b.n	8003534 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003482:	4b38      	ldr	r3, [pc, #224]	@ (8003564 <HAL_RCC_GetSysClockFreq+0x200>)
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	099b      	lsrs	r3, r3, #6
 8003488:	2200      	movs	r2, #0
 800348a:	4618      	mov	r0, r3
 800348c:	4611      	mov	r1, r2
 800348e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003492:	623b      	str	r3, [r7, #32]
 8003494:	2300      	movs	r3, #0
 8003496:	627b      	str	r3, [r7, #36]	@ 0x24
 8003498:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800349c:	4642      	mov	r2, r8
 800349e:	464b      	mov	r3, r9
 80034a0:	f04f 0000 	mov.w	r0, #0
 80034a4:	f04f 0100 	mov.w	r1, #0
 80034a8:	0159      	lsls	r1, r3, #5
 80034aa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80034ae:	0150      	lsls	r0, r2, #5
 80034b0:	4602      	mov	r2, r0
 80034b2:	460b      	mov	r3, r1
 80034b4:	4641      	mov	r1, r8
 80034b6:	ebb2 0a01 	subs.w	sl, r2, r1
 80034ba:	4649      	mov	r1, r9
 80034bc:	eb63 0b01 	sbc.w	fp, r3, r1
 80034c0:	f04f 0200 	mov.w	r2, #0
 80034c4:	f04f 0300 	mov.w	r3, #0
 80034c8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80034cc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80034d0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80034d4:	ebb2 040a 	subs.w	r4, r2, sl
 80034d8:	eb63 050b 	sbc.w	r5, r3, fp
 80034dc:	f04f 0200 	mov.w	r2, #0
 80034e0:	f04f 0300 	mov.w	r3, #0
 80034e4:	00eb      	lsls	r3, r5, #3
 80034e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80034ea:	00e2      	lsls	r2, r4, #3
 80034ec:	4614      	mov	r4, r2
 80034ee:	461d      	mov	r5, r3
 80034f0:	4643      	mov	r3, r8
 80034f2:	18e3      	adds	r3, r4, r3
 80034f4:	603b      	str	r3, [r7, #0]
 80034f6:	464b      	mov	r3, r9
 80034f8:	eb45 0303 	adc.w	r3, r5, r3
 80034fc:	607b      	str	r3, [r7, #4]
 80034fe:	f04f 0200 	mov.w	r2, #0
 8003502:	f04f 0300 	mov.w	r3, #0
 8003506:	e9d7 4500 	ldrd	r4, r5, [r7]
 800350a:	4629      	mov	r1, r5
 800350c:	028b      	lsls	r3, r1, #10
 800350e:	4621      	mov	r1, r4
 8003510:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003514:	4621      	mov	r1, r4
 8003516:	028a      	lsls	r2, r1, #10
 8003518:	4610      	mov	r0, r2
 800351a:	4619      	mov	r1, r3
 800351c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800351e:	2200      	movs	r2, #0
 8003520:	61bb      	str	r3, [r7, #24]
 8003522:	61fa      	str	r2, [r7, #28]
 8003524:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003528:	f7fc fec2 	bl	80002b0 <__aeabi_uldivmod>
 800352c:	4602      	mov	r2, r0
 800352e:	460b      	mov	r3, r1
 8003530:	4613      	mov	r3, r2
 8003532:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003534:	4b0b      	ldr	r3, [pc, #44]	@ (8003564 <HAL_RCC_GetSysClockFreq+0x200>)
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	0c1b      	lsrs	r3, r3, #16
 800353a:	f003 0303 	and.w	r3, r3, #3
 800353e:	3301      	adds	r3, #1
 8003540:	005b      	lsls	r3, r3, #1
 8003542:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8003544:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003546:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003548:	fbb2 f3f3 	udiv	r3, r2, r3
 800354c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800354e:	e002      	b.n	8003556 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003550:	4b05      	ldr	r3, [pc, #20]	@ (8003568 <HAL_RCC_GetSysClockFreq+0x204>)
 8003552:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003554:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003556:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003558:	4618      	mov	r0, r3
 800355a:	3750      	adds	r7, #80	@ 0x50
 800355c:	46bd      	mov	sp, r7
 800355e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003562:	bf00      	nop
 8003564:	40023800 	.word	0x40023800
 8003568:	00f42400 	.word	0x00f42400
 800356c:	007a1200 	.word	0x007a1200

08003570 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003570:	b480      	push	{r7}
 8003572:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003574:	4b03      	ldr	r3, [pc, #12]	@ (8003584 <HAL_RCC_GetHCLKFreq+0x14>)
 8003576:	681b      	ldr	r3, [r3, #0]
}
 8003578:	4618      	mov	r0, r3
 800357a:	46bd      	mov	sp, r7
 800357c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003580:	4770      	bx	lr
 8003582:	bf00      	nop
 8003584:	20000044 	.word	0x20000044

08003588 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800358c:	f7ff fff0 	bl	8003570 <HAL_RCC_GetHCLKFreq>
 8003590:	4602      	mov	r2, r0
 8003592:	4b05      	ldr	r3, [pc, #20]	@ (80035a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	0a9b      	lsrs	r3, r3, #10
 8003598:	f003 0307 	and.w	r3, r3, #7
 800359c:	4903      	ldr	r1, [pc, #12]	@ (80035ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800359e:	5ccb      	ldrb	r3, [r1, r3]
 80035a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	bd80      	pop	{r7, pc}
 80035a8:	40023800 	.word	0x40023800
 80035ac:	08006fa4 	.word	0x08006fa4

080035b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80035b4:	f7ff ffdc 	bl	8003570 <HAL_RCC_GetHCLKFreq>
 80035b8:	4602      	mov	r2, r0
 80035ba:	4b05      	ldr	r3, [pc, #20]	@ (80035d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80035bc:	689b      	ldr	r3, [r3, #8]
 80035be:	0b5b      	lsrs	r3, r3, #13
 80035c0:	f003 0307 	and.w	r3, r3, #7
 80035c4:	4903      	ldr	r1, [pc, #12]	@ (80035d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80035c6:	5ccb      	ldrb	r3, [r1, r3]
 80035c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035cc:	4618      	mov	r0, r3
 80035ce:	bd80      	pop	{r7, pc}
 80035d0:	40023800 	.word	0x40023800
 80035d4:	08006fa4 	.word	0x08006fa4

080035d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b082      	sub	sp, #8
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d101      	bne.n	80035ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	e041      	b.n	800366e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035f0:	b2db      	uxtb	r3, r3
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d106      	bne.n	8003604 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2200      	movs	r2, #0
 80035fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	f7fd ffbe 	bl	8001580 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2202      	movs	r2, #2
 8003608:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	3304      	adds	r3, #4
 8003614:	4619      	mov	r1, r3
 8003616:	4610      	mov	r0, r2
 8003618:	f000 fb42 	bl	8003ca0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2201      	movs	r2, #1
 8003620:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2201      	movs	r2, #1
 8003628:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2201      	movs	r2, #1
 8003630:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2201      	movs	r2, #1
 8003638:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2201      	movs	r2, #1
 8003640:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2201      	movs	r2, #1
 8003648:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2201      	movs	r2, #1
 8003650:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2201      	movs	r2, #1
 8003658:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2201      	movs	r2, #1
 8003660:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2201      	movs	r2, #1
 8003668:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800366c:	2300      	movs	r3, #0
}
 800366e:	4618      	mov	r0, r3
 8003670:	3708      	adds	r7, #8
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}
	...

08003678 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003678:	b480      	push	{r7}
 800367a:	b085      	sub	sp, #20
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003686:	b2db      	uxtb	r3, r3
 8003688:	2b01      	cmp	r3, #1
 800368a:	d001      	beq.n	8003690 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	e046      	b.n	800371e <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2202      	movs	r2, #2
 8003694:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a23      	ldr	r2, [pc, #140]	@ (800372c <HAL_TIM_Base_Start+0xb4>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d022      	beq.n	80036e8 <HAL_TIM_Base_Start+0x70>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036aa:	d01d      	beq.n	80036e8 <HAL_TIM_Base_Start+0x70>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a1f      	ldr	r2, [pc, #124]	@ (8003730 <HAL_TIM_Base_Start+0xb8>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d018      	beq.n	80036e8 <HAL_TIM_Base_Start+0x70>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a1e      	ldr	r2, [pc, #120]	@ (8003734 <HAL_TIM_Base_Start+0xbc>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d013      	beq.n	80036e8 <HAL_TIM_Base_Start+0x70>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a1c      	ldr	r2, [pc, #112]	@ (8003738 <HAL_TIM_Base_Start+0xc0>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d00e      	beq.n	80036e8 <HAL_TIM_Base_Start+0x70>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a1b      	ldr	r2, [pc, #108]	@ (800373c <HAL_TIM_Base_Start+0xc4>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d009      	beq.n	80036e8 <HAL_TIM_Base_Start+0x70>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a19      	ldr	r2, [pc, #100]	@ (8003740 <HAL_TIM_Base_Start+0xc8>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d004      	beq.n	80036e8 <HAL_TIM_Base_Start+0x70>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a18      	ldr	r2, [pc, #96]	@ (8003744 <HAL_TIM_Base_Start+0xcc>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d111      	bne.n	800370c <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	f003 0307 	and.w	r3, r3, #7
 80036f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	2b06      	cmp	r3, #6
 80036f8:	d010      	beq.n	800371c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	681a      	ldr	r2, [r3, #0]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f042 0201 	orr.w	r2, r2, #1
 8003708:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800370a:	e007      	b.n	800371c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	681a      	ldr	r2, [r3, #0]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f042 0201 	orr.w	r2, r2, #1
 800371a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800371c:	2300      	movs	r3, #0
}
 800371e:	4618      	mov	r0, r3
 8003720:	3714      	adds	r7, #20
 8003722:	46bd      	mov	sp, r7
 8003724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003728:	4770      	bx	lr
 800372a:	bf00      	nop
 800372c:	40010000 	.word	0x40010000
 8003730:	40000400 	.word	0x40000400
 8003734:	40000800 	.word	0x40000800
 8003738:	40000c00 	.word	0x40000c00
 800373c:	40010400 	.word	0x40010400
 8003740:	40014000 	.word	0x40014000
 8003744:	40001800 	.word	0x40001800

08003748 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b082      	sub	sp, #8
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d101      	bne.n	800375a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	e041      	b.n	80037de <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003760:	b2db      	uxtb	r3, r3
 8003762:	2b00      	cmp	r3, #0
 8003764:	d106      	bne.n	8003774 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2200      	movs	r2, #0
 800376a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	f000 f839 	bl	80037e6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2202      	movs	r2, #2
 8003778:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681a      	ldr	r2, [r3, #0]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	3304      	adds	r3, #4
 8003784:	4619      	mov	r1, r3
 8003786:	4610      	mov	r0, r2
 8003788:	f000 fa8a 	bl	8003ca0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2201      	movs	r2, #1
 8003790:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2201      	movs	r2, #1
 8003798:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2201      	movs	r2, #1
 80037a0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2201      	movs	r2, #1
 80037a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2201      	movs	r2, #1
 80037b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2201      	movs	r2, #1
 80037b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2201      	movs	r2, #1
 80037c0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2201      	movs	r2, #1
 80037c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2201      	movs	r2, #1
 80037d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2201      	movs	r2, #1
 80037d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80037dc:	2300      	movs	r3, #0
}
 80037de:	4618      	mov	r0, r3
 80037e0:	3708      	adds	r7, #8
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}

080037e6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80037e6:	b480      	push	{r7}
 80037e8:	b083      	sub	sp, #12
 80037ea:	af00      	add	r7, sp, #0
 80037ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80037ee:	bf00      	nop
 80037f0:	370c      	adds	r7, #12
 80037f2:	46bd      	mov	sp, r7
 80037f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f8:	4770      	bx	lr
	...

080037fc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b084      	sub	sp, #16
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
 8003804:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d109      	bne.n	8003820 <HAL_TIM_PWM_Start+0x24>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003812:	b2db      	uxtb	r3, r3
 8003814:	2b01      	cmp	r3, #1
 8003816:	bf14      	ite	ne
 8003818:	2301      	movne	r3, #1
 800381a:	2300      	moveq	r3, #0
 800381c:	b2db      	uxtb	r3, r3
 800381e:	e022      	b.n	8003866 <HAL_TIM_PWM_Start+0x6a>
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	2b04      	cmp	r3, #4
 8003824:	d109      	bne.n	800383a <HAL_TIM_PWM_Start+0x3e>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800382c:	b2db      	uxtb	r3, r3
 800382e:	2b01      	cmp	r3, #1
 8003830:	bf14      	ite	ne
 8003832:	2301      	movne	r3, #1
 8003834:	2300      	moveq	r3, #0
 8003836:	b2db      	uxtb	r3, r3
 8003838:	e015      	b.n	8003866 <HAL_TIM_PWM_Start+0x6a>
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	2b08      	cmp	r3, #8
 800383e:	d109      	bne.n	8003854 <HAL_TIM_PWM_Start+0x58>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003846:	b2db      	uxtb	r3, r3
 8003848:	2b01      	cmp	r3, #1
 800384a:	bf14      	ite	ne
 800384c:	2301      	movne	r3, #1
 800384e:	2300      	moveq	r3, #0
 8003850:	b2db      	uxtb	r3, r3
 8003852:	e008      	b.n	8003866 <HAL_TIM_PWM_Start+0x6a>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800385a:	b2db      	uxtb	r3, r3
 800385c:	2b01      	cmp	r3, #1
 800385e:	bf14      	ite	ne
 8003860:	2301      	movne	r3, #1
 8003862:	2300      	moveq	r3, #0
 8003864:	b2db      	uxtb	r3, r3
 8003866:	2b00      	cmp	r3, #0
 8003868:	d001      	beq.n	800386e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	e07c      	b.n	8003968 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d104      	bne.n	800387e <HAL_TIM_PWM_Start+0x82>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2202      	movs	r2, #2
 8003878:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800387c:	e013      	b.n	80038a6 <HAL_TIM_PWM_Start+0xaa>
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	2b04      	cmp	r3, #4
 8003882:	d104      	bne.n	800388e <HAL_TIM_PWM_Start+0x92>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2202      	movs	r2, #2
 8003888:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800388c:	e00b      	b.n	80038a6 <HAL_TIM_PWM_Start+0xaa>
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	2b08      	cmp	r3, #8
 8003892:	d104      	bne.n	800389e <HAL_TIM_PWM_Start+0xa2>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2202      	movs	r2, #2
 8003898:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800389c:	e003      	b.n	80038a6 <HAL_TIM_PWM_Start+0xaa>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2202      	movs	r2, #2
 80038a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	2201      	movs	r2, #1
 80038ac:	6839      	ldr	r1, [r7, #0]
 80038ae:	4618      	mov	r0, r3
 80038b0:	f000 fcec 	bl	800428c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a2d      	ldr	r2, [pc, #180]	@ (8003970 <HAL_TIM_PWM_Start+0x174>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d004      	beq.n	80038c8 <HAL_TIM_PWM_Start+0xcc>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a2c      	ldr	r2, [pc, #176]	@ (8003974 <HAL_TIM_PWM_Start+0x178>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d101      	bne.n	80038cc <HAL_TIM_PWM_Start+0xd0>
 80038c8:	2301      	movs	r3, #1
 80038ca:	e000      	b.n	80038ce <HAL_TIM_PWM_Start+0xd2>
 80038cc:	2300      	movs	r3, #0
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d007      	beq.n	80038e2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80038e0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a22      	ldr	r2, [pc, #136]	@ (8003970 <HAL_TIM_PWM_Start+0x174>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d022      	beq.n	8003932 <HAL_TIM_PWM_Start+0x136>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038f4:	d01d      	beq.n	8003932 <HAL_TIM_PWM_Start+0x136>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a1f      	ldr	r2, [pc, #124]	@ (8003978 <HAL_TIM_PWM_Start+0x17c>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d018      	beq.n	8003932 <HAL_TIM_PWM_Start+0x136>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a1d      	ldr	r2, [pc, #116]	@ (800397c <HAL_TIM_PWM_Start+0x180>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d013      	beq.n	8003932 <HAL_TIM_PWM_Start+0x136>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a1c      	ldr	r2, [pc, #112]	@ (8003980 <HAL_TIM_PWM_Start+0x184>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d00e      	beq.n	8003932 <HAL_TIM_PWM_Start+0x136>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a16      	ldr	r2, [pc, #88]	@ (8003974 <HAL_TIM_PWM_Start+0x178>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d009      	beq.n	8003932 <HAL_TIM_PWM_Start+0x136>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a18      	ldr	r2, [pc, #96]	@ (8003984 <HAL_TIM_PWM_Start+0x188>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d004      	beq.n	8003932 <HAL_TIM_PWM_Start+0x136>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a16      	ldr	r2, [pc, #88]	@ (8003988 <HAL_TIM_PWM_Start+0x18c>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d111      	bne.n	8003956 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	689b      	ldr	r3, [r3, #8]
 8003938:	f003 0307 	and.w	r3, r3, #7
 800393c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	2b06      	cmp	r3, #6
 8003942:	d010      	beq.n	8003966 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	681a      	ldr	r2, [r3, #0]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f042 0201 	orr.w	r2, r2, #1
 8003952:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003954:	e007      	b.n	8003966 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	681a      	ldr	r2, [r3, #0]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f042 0201 	orr.w	r2, r2, #1
 8003964:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003966:	2300      	movs	r3, #0
}
 8003968:	4618      	mov	r0, r3
 800396a:	3710      	adds	r7, #16
 800396c:	46bd      	mov	sp, r7
 800396e:	bd80      	pop	{r7, pc}
 8003970:	40010000 	.word	0x40010000
 8003974:	40010400 	.word	0x40010400
 8003978:	40000400 	.word	0x40000400
 800397c:	40000800 	.word	0x40000800
 8003980:	40000c00 	.word	0x40000c00
 8003984:	40014000 	.word	0x40014000
 8003988:	40001800 	.word	0x40001800

0800398c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b086      	sub	sp, #24
 8003990:	af00      	add	r7, sp, #0
 8003992:	60f8      	str	r0, [r7, #12]
 8003994:	60b9      	str	r1, [r7, #8]
 8003996:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003998:	2300      	movs	r3, #0
 800399a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80039a2:	2b01      	cmp	r3, #1
 80039a4:	d101      	bne.n	80039aa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80039a6:	2302      	movs	r3, #2
 80039a8:	e0ae      	b.n	8003b08 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2201      	movs	r2, #1
 80039ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2b0c      	cmp	r3, #12
 80039b6:	f200 809f 	bhi.w	8003af8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80039ba:	a201      	add	r2, pc, #4	@ (adr r2, 80039c0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80039bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039c0:	080039f5 	.word	0x080039f5
 80039c4:	08003af9 	.word	0x08003af9
 80039c8:	08003af9 	.word	0x08003af9
 80039cc:	08003af9 	.word	0x08003af9
 80039d0:	08003a35 	.word	0x08003a35
 80039d4:	08003af9 	.word	0x08003af9
 80039d8:	08003af9 	.word	0x08003af9
 80039dc:	08003af9 	.word	0x08003af9
 80039e0:	08003a77 	.word	0x08003a77
 80039e4:	08003af9 	.word	0x08003af9
 80039e8:	08003af9 	.word	0x08003af9
 80039ec:	08003af9 	.word	0x08003af9
 80039f0:	08003ab7 	.word	0x08003ab7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	68b9      	ldr	r1, [r7, #8]
 80039fa:	4618      	mov	r0, r3
 80039fc:	f000 f9fc 	bl	8003df8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	699a      	ldr	r2, [r3, #24]
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f042 0208 	orr.w	r2, r2, #8
 8003a0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	699a      	ldr	r2, [r3, #24]
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f022 0204 	bic.w	r2, r2, #4
 8003a1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	6999      	ldr	r1, [r3, #24]
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	691a      	ldr	r2, [r3, #16]
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	430a      	orrs	r2, r1
 8003a30:	619a      	str	r2, [r3, #24]
      break;
 8003a32:	e064      	b.n	8003afe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	68b9      	ldr	r1, [r7, #8]
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f000 fa4c 	bl	8003ed8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	699a      	ldr	r2, [r3, #24]
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003a4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	699a      	ldr	r2, [r3, #24]
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	6999      	ldr	r1, [r3, #24]
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	691b      	ldr	r3, [r3, #16]
 8003a6a:	021a      	lsls	r2, r3, #8
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	430a      	orrs	r2, r1
 8003a72:	619a      	str	r2, [r3, #24]
      break;
 8003a74:	e043      	b.n	8003afe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	68b9      	ldr	r1, [r7, #8]
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	f000 faa1 	bl	8003fc4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	69da      	ldr	r2, [r3, #28]
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f042 0208 	orr.w	r2, r2, #8
 8003a90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	69da      	ldr	r2, [r3, #28]
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f022 0204 	bic.w	r2, r2, #4
 8003aa0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	69d9      	ldr	r1, [r3, #28]
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	691a      	ldr	r2, [r3, #16]
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	430a      	orrs	r2, r1
 8003ab2:	61da      	str	r2, [r3, #28]
      break;
 8003ab4:	e023      	b.n	8003afe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	68b9      	ldr	r1, [r7, #8]
 8003abc:	4618      	mov	r0, r3
 8003abe:	f000 faf5 	bl	80040ac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	69da      	ldr	r2, [r3, #28]
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003ad0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	69da      	ldr	r2, [r3, #28]
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ae0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	69d9      	ldr	r1, [r3, #28]
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	691b      	ldr	r3, [r3, #16]
 8003aec:	021a      	lsls	r2, r3, #8
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	430a      	orrs	r2, r1
 8003af4:	61da      	str	r2, [r3, #28]
      break;
 8003af6:	e002      	b.n	8003afe <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003af8:	2301      	movs	r3, #1
 8003afa:	75fb      	strb	r3, [r7, #23]
      break;
 8003afc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	2200      	movs	r2, #0
 8003b02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003b06:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	3718      	adds	r7, #24
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}

08003b10 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b084      	sub	sp, #16
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
 8003b18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b24:	2b01      	cmp	r3, #1
 8003b26:	d101      	bne.n	8003b2c <HAL_TIM_ConfigClockSource+0x1c>
 8003b28:	2302      	movs	r3, #2
 8003b2a:	e0b4      	b.n	8003c96 <HAL_TIM_ConfigClockSource+0x186>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2201      	movs	r2, #1
 8003b30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2202      	movs	r2, #2
 8003b38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003b4a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003b52:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	68ba      	ldr	r2, [r7, #8]
 8003b5a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b64:	d03e      	beq.n	8003be4 <HAL_TIM_ConfigClockSource+0xd4>
 8003b66:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b6a:	f200 8087 	bhi.w	8003c7c <HAL_TIM_ConfigClockSource+0x16c>
 8003b6e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b72:	f000 8086 	beq.w	8003c82 <HAL_TIM_ConfigClockSource+0x172>
 8003b76:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b7a:	d87f      	bhi.n	8003c7c <HAL_TIM_ConfigClockSource+0x16c>
 8003b7c:	2b70      	cmp	r3, #112	@ 0x70
 8003b7e:	d01a      	beq.n	8003bb6 <HAL_TIM_ConfigClockSource+0xa6>
 8003b80:	2b70      	cmp	r3, #112	@ 0x70
 8003b82:	d87b      	bhi.n	8003c7c <HAL_TIM_ConfigClockSource+0x16c>
 8003b84:	2b60      	cmp	r3, #96	@ 0x60
 8003b86:	d050      	beq.n	8003c2a <HAL_TIM_ConfigClockSource+0x11a>
 8003b88:	2b60      	cmp	r3, #96	@ 0x60
 8003b8a:	d877      	bhi.n	8003c7c <HAL_TIM_ConfigClockSource+0x16c>
 8003b8c:	2b50      	cmp	r3, #80	@ 0x50
 8003b8e:	d03c      	beq.n	8003c0a <HAL_TIM_ConfigClockSource+0xfa>
 8003b90:	2b50      	cmp	r3, #80	@ 0x50
 8003b92:	d873      	bhi.n	8003c7c <HAL_TIM_ConfigClockSource+0x16c>
 8003b94:	2b40      	cmp	r3, #64	@ 0x40
 8003b96:	d058      	beq.n	8003c4a <HAL_TIM_ConfigClockSource+0x13a>
 8003b98:	2b40      	cmp	r3, #64	@ 0x40
 8003b9a:	d86f      	bhi.n	8003c7c <HAL_TIM_ConfigClockSource+0x16c>
 8003b9c:	2b30      	cmp	r3, #48	@ 0x30
 8003b9e:	d064      	beq.n	8003c6a <HAL_TIM_ConfigClockSource+0x15a>
 8003ba0:	2b30      	cmp	r3, #48	@ 0x30
 8003ba2:	d86b      	bhi.n	8003c7c <HAL_TIM_ConfigClockSource+0x16c>
 8003ba4:	2b20      	cmp	r3, #32
 8003ba6:	d060      	beq.n	8003c6a <HAL_TIM_ConfigClockSource+0x15a>
 8003ba8:	2b20      	cmp	r3, #32
 8003baa:	d867      	bhi.n	8003c7c <HAL_TIM_ConfigClockSource+0x16c>
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d05c      	beq.n	8003c6a <HAL_TIM_ConfigClockSource+0x15a>
 8003bb0:	2b10      	cmp	r3, #16
 8003bb2:	d05a      	beq.n	8003c6a <HAL_TIM_ConfigClockSource+0x15a>
 8003bb4:	e062      	b.n	8003c7c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003bc6:	f000 fb41 	bl	800424c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003bd8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	68ba      	ldr	r2, [r7, #8]
 8003be0:	609a      	str	r2, [r3, #8]
      break;
 8003be2:	e04f      	b.n	8003c84 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003bf4:	f000 fb2a 	bl	800424c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	689a      	ldr	r2, [r3, #8]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003c06:	609a      	str	r2, [r3, #8]
      break;
 8003c08:	e03c      	b.n	8003c84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c16:	461a      	mov	r2, r3
 8003c18:	f000 fa9e 	bl	8004158 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	2150      	movs	r1, #80	@ 0x50
 8003c22:	4618      	mov	r0, r3
 8003c24:	f000 faf7 	bl	8004216 <TIM_ITRx_SetConfig>
      break;
 8003c28:	e02c      	b.n	8003c84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c36:	461a      	mov	r2, r3
 8003c38:	f000 fabd 	bl	80041b6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	2160      	movs	r1, #96	@ 0x60
 8003c42:	4618      	mov	r0, r3
 8003c44:	f000 fae7 	bl	8004216 <TIM_ITRx_SetConfig>
      break;
 8003c48:	e01c      	b.n	8003c84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c56:	461a      	mov	r2, r3
 8003c58:	f000 fa7e 	bl	8004158 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	2140      	movs	r1, #64	@ 0x40
 8003c62:	4618      	mov	r0, r3
 8003c64:	f000 fad7 	bl	8004216 <TIM_ITRx_SetConfig>
      break;
 8003c68:	e00c      	b.n	8003c84 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681a      	ldr	r2, [r3, #0]
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4619      	mov	r1, r3
 8003c74:	4610      	mov	r0, r2
 8003c76:	f000 face 	bl	8004216 <TIM_ITRx_SetConfig>
      break;
 8003c7a:	e003      	b.n	8003c84 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	73fb      	strb	r3, [r7, #15]
      break;
 8003c80:	e000      	b.n	8003c84 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003c82:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2201      	movs	r2, #1
 8003c88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003c94:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	3710      	adds	r7, #16
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}
	...

08003ca0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b085      	sub	sp, #20
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
 8003ca8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	4a46      	ldr	r2, [pc, #280]	@ (8003dcc <TIM_Base_SetConfig+0x12c>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d013      	beq.n	8003ce0 <TIM_Base_SetConfig+0x40>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003cbe:	d00f      	beq.n	8003ce0 <TIM_Base_SetConfig+0x40>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	4a43      	ldr	r2, [pc, #268]	@ (8003dd0 <TIM_Base_SetConfig+0x130>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d00b      	beq.n	8003ce0 <TIM_Base_SetConfig+0x40>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	4a42      	ldr	r2, [pc, #264]	@ (8003dd4 <TIM_Base_SetConfig+0x134>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d007      	beq.n	8003ce0 <TIM_Base_SetConfig+0x40>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	4a41      	ldr	r2, [pc, #260]	@ (8003dd8 <TIM_Base_SetConfig+0x138>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d003      	beq.n	8003ce0 <TIM_Base_SetConfig+0x40>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	4a40      	ldr	r2, [pc, #256]	@ (8003ddc <TIM_Base_SetConfig+0x13c>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d108      	bne.n	8003cf2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ce6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	68fa      	ldr	r2, [r7, #12]
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	4a35      	ldr	r2, [pc, #212]	@ (8003dcc <TIM_Base_SetConfig+0x12c>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d02b      	beq.n	8003d52 <TIM_Base_SetConfig+0xb2>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d00:	d027      	beq.n	8003d52 <TIM_Base_SetConfig+0xb2>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	4a32      	ldr	r2, [pc, #200]	@ (8003dd0 <TIM_Base_SetConfig+0x130>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d023      	beq.n	8003d52 <TIM_Base_SetConfig+0xb2>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	4a31      	ldr	r2, [pc, #196]	@ (8003dd4 <TIM_Base_SetConfig+0x134>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d01f      	beq.n	8003d52 <TIM_Base_SetConfig+0xb2>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	4a30      	ldr	r2, [pc, #192]	@ (8003dd8 <TIM_Base_SetConfig+0x138>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d01b      	beq.n	8003d52 <TIM_Base_SetConfig+0xb2>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	4a2f      	ldr	r2, [pc, #188]	@ (8003ddc <TIM_Base_SetConfig+0x13c>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d017      	beq.n	8003d52 <TIM_Base_SetConfig+0xb2>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	4a2e      	ldr	r2, [pc, #184]	@ (8003de0 <TIM_Base_SetConfig+0x140>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d013      	beq.n	8003d52 <TIM_Base_SetConfig+0xb2>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	4a2d      	ldr	r2, [pc, #180]	@ (8003de4 <TIM_Base_SetConfig+0x144>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d00f      	beq.n	8003d52 <TIM_Base_SetConfig+0xb2>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	4a2c      	ldr	r2, [pc, #176]	@ (8003de8 <TIM_Base_SetConfig+0x148>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d00b      	beq.n	8003d52 <TIM_Base_SetConfig+0xb2>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	4a2b      	ldr	r2, [pc, #172]	@ (8003dec <TIM_Base_SetConfig+0x14c>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d007      	beq.n	8003d52 <TIM_Base_SetConfig+0xb2>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	4a2a      	ldr	r2, [pc, #168]	@ (8003df0 <TIM_Base_SetConfig+0x150>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d003      	beq.n	8003d52 <TIM_Base_SetConfig+0xb2>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	4a29      	ldr	r2, [pc, #164]	@ (8003df4 <TIM_Base_SetConfig+0x154>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d108      	bne.n	8003d64 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	68db      	ldr	r3, [r3, #12]
 8003d5e:	68fa      	ldr	r2, [r7, #12]
 8003d60:	4313      	orrs	r3, r2
 8003d62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	695b      	ldr	r3, [r3, #20]
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	68fa      	ldr	r2, [r7, #12]
 8003d76:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	689a      	ldr	r2, [r3, #8]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	681a      	ldr	r2, [r3, #0]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	4a10      	ldr	r2, [pc, #64]	@ (8003dcc <TIM_Base_SetConfig+0x12c>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d003      	beq.n	8003d98 <TIM_Base_SetConfig+0xf8>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	4a12      	ldr	r2, [pc, #72]	@ (8003ddc <TIM_Base_SetConfig+0x13c>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d103      	bne.n	8003da0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	691a      	ldr	r2, [r3, #16]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2201      	movs	r2, #1
 8003da4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	691b      	ldr	r3, [r3, #16]
 8003daa:	f003 0301 	and.w	r3, r3, #1
 8003dae:	2b01      	cmp	r3, #1
 8003db0:	d105      	bne.n	8003dbe <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	691b      	ldr	r3, [r3, #16]
 8003db6:	f023 0201 	bic.w	r2, r3, #1
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	611a      	str	r2, [r3, #16]
  }
}
 8003dbe:	bf00      	nop
 8003dc0:	3714      	adds	r7, #20
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc8:	4770      	bx	lr
 8003dca:	bf00      	nop
 8003dcc:	40010000 	.word	0x40010000
 8003dd0:	40000400 	.word	0x40000400
 8003dd4:	40000800 	.word	0x40000800
 8003dd8:	40000c00 	.word	0x40000c00
 8003ddc:	40010400 	.word	0x40010400
 8003de0:	40014000 	.word	0x40014000
 8003de4:	40014400 	.word	0x40014400
 8003de8:	40014800 	.word	0x40014800
 8003dec:	40001800 	.word	0x40001800
 8003df0:	40001c00 	.word	0x40001c00
 8003df4:	40002000 	.word	0x40002000

08003df8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b087      	sub	sp, #28
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
 8003e00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6a1b      	ldr	r3, [r3, #32]
 8003e06:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6a1b      	ldr	r3, [r3, #32]
 8003e0c:	f023 0201 	bic.w	r2, r3, #1
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	699b      	ldr	r3, [r3, #24]
 8003e1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	f023 0303 	bic.w	r3, r3, #3
 8003e2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	68fa      	ldr	r2, [r7, #12]
 8003e36:	4313      	orrs	r3, r2
 8003e38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003e3a:	697b      	ldr	r3, [r7, #20]
 8003e3c:	f023 0302 	bic.w	r3, r3, #2
 8003e40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	689b      	ldr	r3, [r3, #8]
 8003e46:	697a      	ldr	r2, [r7, #20]
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	4a20      	ldr	r2, [pc, #128]	@ (8003ed0 <TIM_OC1_SetConfig+0xd8>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d003      	beq.n	8003e5c <TIM_OC1_SetConfig+0x64>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	4a1f      	ldr	r2, [pc, #124]	@ (8003ed4 <TIM_OC1_SetConfig+0xdc>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d10c      	bne.n	8003e76 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	f023 0308 	bic.w	r3, r3, #8
 8003e62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	68db      	ldr	r3, [r3, #12]
 8003e68:	697a      	ldr	r2, [r7, #20]
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	f023 0304 	bic.w	r3, r3, #4
 8003e74:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	4a15      	ldr	r2, [pc, #84]	@ (8003ed0 <TIM_OC1_SetConfig+0xd8>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d003      	beq.n	8003e86 <TIM_OC1_SetConfig+0x8e>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	4a14      	ldr	r2, [pc, #80]	@ (8003ed4 <TIM_OC1_SetConfig+0xdc>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d111      	bne.n	8003eaa <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003e8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003e94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	695b      	ldr	r3, [r3, #20]
 8003e9a:	693a      	ldr	r2, [r7, #16]
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	699b      	ldr	r3, [r3, #24]
 8003ea4:	693a      	ldr	r2, [r7, #16]
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	693a      	ldr	r2, [r7, #16]
 8003eae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	68fa      	ldr	r2, [r7, #12]
 8003eb4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	685a      	ldr	r2, [r3, #4]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	697a      	ldr	r2, [r7, #20]
 8003ec2:	621a      	str	r2, [r3, #32]
}
 8003ec4:	bf00      	nop
 8003ec6:	371c      	adds	r7, #28
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ece:	4770      	bx	lr
 8003ed0:	40010000 	.word	0x40010000
 8003ed4:	40010400 	.word	0x40010400

08003ed8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b087      	sub	sp, #28
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
 8003ee0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6a1b      	ldr	r3, [r3, #32]
 8003ee6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6a1b      	ldr	r3, [r3, #32]
 8003eec:	f023 0210 	bic.w	r2, r3, #16
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	699b      	ldr	r3, [r3, #24]
 8003efe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003f06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	021b      	lsls	r3, r3, #8
 8003f16:	68fa      	ldr	r2, [r7, #12]
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	f023 0320 	bic.w	r3, r3, #32
 8003f22:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	689b      	ldr	r3, [r3, #8]
 8003f28:	011b      	lsls	r3, r3, #4
 8003f2a:	697a      	ldr	r2, [r7, #20]
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	4a22      	ldr	r2, [pc, #136]	@ (8003fbc <TIM_OC2_SetConfig+0xe4>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d003      	beq.n	8003f40 <TIM_OC2_SetConfig+0x68>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	4a21      	ldr	r2, [pc, #132]	@ (8003fc0 <TIM_OC2_SetConfig+0xe8>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d10d      	bne.n	8003f5c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003f40:	697b      	ldr	r3, [r7, #20]
 8003f42:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003f46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	68db      	ldr	r3, [r3, #12]
 8003f4c:	011b      	lsls	r3, r3, #4
 8003f4e:	697a      	ldr	r2, [r7, #20]
 8003f50:	4313      	orrs	r3, r2
 8003f52:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003f5a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	4a17      	ldr	r2, [pc, #92]	@ (8003fbc <TIM_OC2_SetConfig+0xe4>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d003      	beq.n	8003f6c <TIM_OC2_SetConfig+0x94>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	4a16      	ldr	r2, [pc, #88]	@ (8003fc0 <TIM_OC2_SetConfig+0xe8>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d113      	bne.n	8003f94 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003f6c:	693b      	ldr	r3, [r7, #16]
 8003f6e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003f72:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003f74:	693b      	ldr	r3, [r7, #16]
 8003f76:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003f7a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	695b      	ldr	r3, [r3, #20]
 8003f80:	009b      	lsls	r3, r3, #2
 8003f82:	693a      	ldr	r2, [r7, #16]
 8003f84:	4313      	orrs	r3, r2
 8003f86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	699b      	ldr	r3, [r3, #24]
 8003f8c:	009b      	lsls	r3, r3, #2
 8003f8e:	693a      	ldr	r2, [r7, #16]
 8003f90:	4313      	orrs	r3, r2
 8003f92:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	693a      	ldr	r2, [r7, #16]
 8003f98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	68fa      	ldr	r2, [r7, #12]
 8003f9e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	685a      	ldr	r2, [r3, #4]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	697a      	ldr	r2, [r7, #20]
 8003fac:	621a      	str	r2, [r3, #32]
}
 8003fae:	bf00      	nop
 8003fb0:	371c      	adds	r7, #28
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb8:	4770      	bx	lr
 8003fba:	bf00      	nop
 8003fbc:	40010000 	.word	0x40010000
 8003fc0:	40010400 	.word	0x40010400

08003fc4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b087      	sub	sp, #28
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
 8003fcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6a1b      	ldr	r3, [r3, #32]
 8003fd2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6a1b      	ldr	r3, [r3, #32]
 8003fd8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	69db      	ldr	r3, [r3, #28]
 8003fea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ff2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	f023 0303 	bic.w	r3, r3, #3
 8003ffa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	68fa      	ldr	r2, [r7, #12]
 8004002:	4313      	orrs	r3, r2
 8004004:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800400c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	021b      	lsls	r3, r3, #8
 8004014:	697a      	ldr	r2, [r7, #20]
 8004016:	4313      	orrs	r3, r2
 8004018:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	4a21      	ldr	r2, [pc, #132]	@ (80040a4 <TIM_OC3_SetConfig+0xe0>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d003      	beq.n	800402a <TIM_OC3_SetConfig+0x66>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	4a20      	ldr	r2, [pc, #128]	@ (80040a8 <TIM_OC3_SetConfig+0xe4>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d10d      	bne.n	8004046 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800402a:	697b      	ldr	r3, [r7, #20]
 800402c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004030:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	68db      	ldr	r3, [r3, #12]
 8004036:	021b      	lsls	r3, r3, #8
 8004038:	697a      	ldr	r2, [r7, #20]
 800403a:	4313      	orrs	r3, r2
 800403c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800403e:	697b      	ldr	r3, [r7, #20]
 8004040:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004044:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	4a16      	ldr	r2, [pc, #88]	@ (80040a4 <TIM_OC3_SetConfig+0xe0>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d003      	beq.n	8004056 <TIM_OC3_SetConfig+0x92>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	4a15      	ldr	r2, [pc, #84]	@ (80040a8 <TIM_OC3_SetConfig+0xe4>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d113      	bne.n	800407e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800405c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800405e:	693b      	ldr	r3, [r7, #16]
 8004060:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004064:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	695b      	ldr	r3, [r3, #20]
 800406a:	011b      	lsls	r3, r3, #4
 800406c:	693a      	ldr	r2, [r7, #16]
 800406e:	4313      	orrs	r3, r2
 8004070:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	699b      	ldr	r3, [r3, #24]
 8004076:	011b      	lsls	r3, r3, #4
 8004078:	693a      	ldr	r2, [r7, #16]
 800407a:	4313      	orrs	r3, r2
 800407c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	693a      	ldr	r2, [r7, #16]
 8004082:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	68fa      	ldr	r2, [r7, #12]
 8004088:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	685a      	ldr	r2, [r3, #4]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	697a      	ldr	r2, [r7, #20]
 8004096:	621a      	str	r2, [r3, #32]
}
 8004098:	bf00      	nop
 800409a:	371c      	adds	r7, #28
 800409c:	46bd      	mov	sp, r7
 800409e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a2:	4770      	bx	lr
 80040a4:	40010000 	.word	0x40010000
 80040a8:	40010400 	.word	0x40010400

080040ac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80040ac:	b480      	push	{r7}
 80040ae:	b087      	sub	sp, #28
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
 80040b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6a1b      	ldr	r3, [r3, #32]
 80040ba:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6a1b      	ldr	r3, [r3, #32]
 80040c0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	69db      	ldr	r3, [r3, #28]
 80040d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80040da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80040e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	021b      	lsls	r3, r3, #8
 80040ea:	68fa      	ldr	r2, [r7, #12]
 80040ec:	4313      	orrs	r3, r2
 80040ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80040f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	031b      	lsls	r3, r3, #12
 80040fe:	693a      	ldr	r2, [r7, #16]
 8004100:	4313      	orrs	r3, r2
 8004102:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	4a12      	ldr	r2, [pc, #72]	@ (8004150 <TIM_OC4_SetConfig+0xa4>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d003      	beq.n	8004114 <TIM_OC4_SetConfig+0x68>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	4a11      	ldr	r2, [pc, #68]	@ (8004154 <TIM_OC4_SetConfig+0xa8>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d109      	bne.n	8004128 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004114:	697b      	ldr	r3, [r7, #20]
 8004116:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800411a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	695b      	ldr	r3, [r3, #20]
 8004120:	019b      	lsls	r3, r3, #6
 8004122:	697a      	ldr	r2, [r7, #20]
 8004124:	4313      	orrs	r3, r2
 8004126:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	697a      	ldr	r2, [r7, #20]
 800412c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	68fa      	ldr	r2, [r7, #12]
 8004132:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	685a      	ldr	r2, [r3, #4]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	693a      	ldr	r2, [r7, #16]
 8004140:	621a      	str	r2, [r3, #32]
}
 8004142:	bf00      	nop
 8004144:	371c      	adds	r7, #28
 8004146:	46bd      	mov	sp, r7
 8004148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414c:	4770      	bx	lr
 800414e:	bf00      	nop
 8004150:	40010000 	.word	0x40010000
 8004154:	40010400 	.word	0x40010400

08004158 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004158:	b480      	push	{r7}
 800415a:	b087      	sub	sp, #28
 800415c:	af00      	add	r7, sp, #0
 800415e:	60f8      	str	r0, [r7, #12]
 8004160:	60b9      	str	r1, [r7, #8]
 8004162:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	6a1b      	ldr	r3, [r3, #32]
 8004168:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	6a1b      	ldr	r3, [r3, #32]
 800416e:	f023 0201 	bic.w	r2, r3, #1
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	699b      	ldr	r3, [r3, #24]
 800417a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800417c:	693b      	ldr	r3, [r7, #16]
 800417e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004182:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	011b      	lsls	r3, r3, #4
 8004188:	693a      	ldr	r2, [r7, #16]
 800418a:	4313      	orrs	r3, r2
 800418c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	f023 030a 	bic.w	r3, r3, #10
 8004194:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004196:	697a      	ldr	r2, [r7, #20]
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	4313      	orrs	r3, r2
 800419c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	693a      	ldr	r2, [r7, #16]
 80041a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	697a      	ldr	r2, [r7, #20]
 80041a8:	621a      	str	r2, [r3, #32]
}
 80041aa:	bf00      	nop
 80041ac:	371c      	adds	r7, #28
 80041ae:	46bd      	mov	sp, r7
 80041b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b4:	4770      	bx	lr

080041b6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80041b6:	b480      	push	{r7}
 80041b8:	b087      	sub	sp, #28
 80041ba:	af00      	add	r7, sp, #0
 80041bc:	60f8      	str	r0, [r7, #12]
 80041be:	60b9      	str	r1, [r7, #8]
 80041c0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	6a1b      	ldr	r3, [r3, #32]
 80041c6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	6a1b      	ldr	r3, [r3, #32]
 80041cc:	f023 0210 	bic.w	r2, r3, #16
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	699b      	ldr	r3, [r3, #24]
 80041d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80041e0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	031b      	lsls	r3, r3, #12
 80041e6:	693a      	ldr	r2, [r7, #16]
 80041e8:	4313      	orrs	r3, r2
 80041ea:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80041f2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	011b      	lsls	r3, r3, #4
 80041f8:	697a      	ldr	r2, [r7, #20]
 80041fa:	4313      	orrs	r3, r2
 80041fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	693a      	ldr	r2, [r7, #16]
 8004202:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	697a      	ldr	r2, [r7, #20]
 8004208:	621a      	str	r2, [r3, #32]
}
 800420a:	bf00      	nop
 800420c:	371c      	adds	r7, #28
 800420e:	46bd      	mov	sp, r7
 8004210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004214:	4770      	bx	lr

08004216 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004216:	b480      	push	{r7}
 8004218:	b085      	sub	sp, #20
 800421a:	af00      	add	r7, sp, #0
 800421c:	6078      	str	r0, [r7, #4]
 800421e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	689b      	ldr	r3, [r3, #8]
 8004224:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800422c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800422e:	683a      	ldr	r2, [r7, #0]
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	4313      	orrs	r3, r2
 8004234:	f043 0307 	orr.w	r3, r3, #7
 8004238:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	68fa      	ldr	r2, [r7, #12]
 800423e:	609a      	str	r2, [r3, #8]
}
 8004240:	bf00      	nop
 8004242:	3714      	adds	r7, #20
 8004244:	46bd      	mov	sp, r7
 8004246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424a:	4770      	bx	lr

0800424c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800424c:	b480      	push	{r7}
 800424e:	b087      	sub	sp, #28
 8004250:	af00      	add	r7, sp, #0
 8004252:	60f8      	str	r0, [r7, #12]
 8004254:	60b9      	str	r1, [r7, #8]
 8004256:	607a      	str	r2, [r7, #4]
 8004258:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	689b      	ldr	r3, [r3, #8]
 800425e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004260:	697b      	ldr	r3, [r7, #20]
 8004262:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004266:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	021a      	lsls	r2, r3, #8
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	431a      	orrs	r2, r3
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	4313      	orrs	r3, r2
 8004274:	697a      	ldr	r2, [r7, #20]
 8004276:	4313      	orrs	r3, r2
 8004278:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	697a      	ldr	r2, [r7, #20]
 800427e:	609a      	str	r2, [r3, #8]
}
 8004280:	bf00      	nop
 8004282:	371c      	adds	r7, #28
 8004284:	46bd      	mov	sp, r7
 8004286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428a:	4770      	bx	lr

0800428c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800428c:	b480      	push	{r7}
 800428e:	b087      	sub	sp, #28
 8004290:	af00      	add	r7, sp, #0
 8004292:	60f8      	str	r0, [r7, #12]
 8004294:	60b9      	str	r1, [r7, #8]
 8004296:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	f003 031f 	and.w	r3, r3, #31
 800429e:	2201      	movs	r2, #1
 80042a0:	fa02 f303 	lsl.w	r3, r2, r3
 80042a4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	6a1a      	ldr	r2, [r3, #32]
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	43db      	mvns	r3, r3
 80042ae:	401a      	ands	r2, r3
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	6a1a      	ldr	r2, [r3, #32]
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	f003 031f 	and.w	r3, r3, #31
 80042be:	6879      	ldr	r1, [r7, #4]
 80042c0:	fa01 f303 	lsl.w	r3, r1, r3
 80042c4:	431a      	orrs	r2, r3
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	621a      	str	r2, [r3, #32]
}
 80042ca:	bf00      	nop
 80042cc:	371c      	adds	r7, #28
 80042ce:	46bd      	mov	sp, r7
 80042d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d4:	4770      	bx	lr
	...

080042d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80042d8:	b480      	push	{r7}
 80042da:	b085      	sub	sp, #20
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
 80042e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80042e8:	2b01      	cmp	r3, #1
 80042ea:	d101      	bne.n	80042f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80042ec:	2302      	movs	r3, #2
 80042ee:	e05a      	b.n	80043a6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2201      	movs	r2, #1
 80042f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2202      	movs	r2, #2
 80042fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004316:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	68fa      	ldr	r2, [r7, #12]
 800431e:	4313      	orrs	r3, r2
 8004320:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	68fa      	ldr	r2, [r7, #12]
 8004328:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4a21      	ldr	r2, [pc, #132]	@ (80043b4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d022      	beq.n	800437a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800433c:	d01d      	beq.n	800437a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a1d      	ldr	r2, [pc, #116]	@ (80043b8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d018      	beq.n	800437a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a1b      	ldr	r2, [pc, #108]	@ (80043bc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d013      	beq.n	800437a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a1a      	ldr	r2, [pc, #104]	@ (80043c0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d00e      	beq.n	800437a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a18      	ldr	r2, [pc, #96]	@ (80043c4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d009      	beq.n	800437a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4a17      	ldr	r2, [pc, #92]	@ (80043c8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d004      	beq.n	800437a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a15      	ldr	r2, [pc, #84]	@ (80043cc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d10c      	bne.n	8004394 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004380:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	68ba      	ldr	r2, [r7, #8]
 8004388:	4313      	orrs	r3, r2
 800438a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	68ba      	ldr	r2, [r7, #8]
 8004392:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2201      	movs	r2, #1
 8004398:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2200      	movs	r2, #0
 80043a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80043a4:	2300      	movs	r3, #0
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	3714      	adds	r7, #20
 80043aa:	46bd      	mov	sp, r7
 80043ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b0:	4770      	bx	lr
 80043b2:	bf00      	nop
 80043b4:	40010000 	.word	0x40010000
 80043b8:	40000400 	.word	0x40000400
 80043bc:	40000800 	.word	0x40000800
 80043c0:	40000c00 	.word	0x40000c00
 80043c4:	40010400 	.word	0x40010400
 80043c8:	40014000 	.word	0x40014000
 80043cc:	40001800 	.word	0x40001800

080043d0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b082      	sub	sp, #8
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d101      	bne.n	80043e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80043de:	2301      	movs	r3, #1
 80043e0:	e042      	b.n	8004468 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80043e8:	b2db      	uxtb	r3, r3
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d106      	bne.n	80043fc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2200      	movs	r2, #0
 80043f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	f7fd f91e 	bl	8001638 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2224      	movs	r2, #36	@ 0x24
 8004400:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	68da      	ldr	r2, [r3, #12]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004412:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004414:	6878      	ldr	r0, [r7, #4]
 8004416:	f000 fdbd 	bl	8004f94 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	691a      	ldr	r2, [r3, #16]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004428:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	695a      	ldr	r2, [r3, #20]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004438:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	68da      	ldr	r2, [r3, #12]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004448:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2200      	movs	r2, #0
 800444e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2220      	movs	r2, #32
 8004454:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2220      	movs	r2, #32
 800445c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2200      	movs	r2, #0
 8004464:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004466:	2300      	movs	r3, #0
}
 8004468:	4618      	mov	r0, r3
 800446a:	3708      	adds	r7, #8
 800446c:	46bd      	mov	sp, r7
 800446e:	bd80      	pop	{r7, pc}

08004470 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b08a      	sub	sp, #40	@ 0x28
 8004474:	af02      	add	r7, sp, #8
 8004476:	60f8      	str	r0, [r7, #12]
 8004478:	60b9      	str	r1, [r7, #8]
 800447a:	603b      	str	r3, [r7, #0]
 800447c:	4613      	mov	r3, r2
 800447e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004480:	2300      	movs	r3, #0
 8004482:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800448a:	b2db      	uxtb	r3, r3
 800448c:	2b20      	cmp	r3, #32
 800448e:	d175      	bne.n	800457c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d002      	beq.n	800449c <HAL_UART_Transmit+0x2c>
 8004496:	88fb      	ldrh	r3, [r7, #6]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d101      	bne.n	80044a0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800449c:	2301      	movs	r3, #1
 800449e:	e06e      	b.n	800457e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	2200      	movs	r2, #0
 80044a4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	2221      	movs	r2, #33	@ 0x21
 80044aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80044ae:	f7fd fbf9 	bl	8001ca4 <HAL_GetTick>
 80044b2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	88fa      	ldrh	r2, [r7, #6]
 80044b8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	88fa      	ldrh	r2, [r7, #6]
 80044be:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	689b      	ldr	r3, [r3, #8]
 80044c4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80044c8:	d108      	bne.n	80044dc <HAL_UART_Transmit+0x6c>
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	691b      	ldr	r3, [r3, #16]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d104      	bne.n	80044dc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80044d2:	2300      	movs	r3, #0
 80044d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80044d6:	68bb      	ldr	r3, [r7, #8]
 80044d8:	61bb      	str	r3, [r7, #24]
 80044da:	e003      	b.n	80044e4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80044e0:	2300      	movs	r3, #0
 80044e2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80044e4:	e02e      	b.n	8004544 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	9300      	str	r3, [sp, #0]
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	2200      	movs	r2, #0
 80044ee:	2180      	movs	r1, #128	@ 0x80
 80044f0:	68f8      	ldr	r0, [r7, #12]
 80044f2:	f000 fb1f 	bl	8004b34 <UART_WaitOnFlagUntilTimeout>
 80044f6:	4603      	mov	r3, r0
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d005      	beq.n	8004508 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	2220      	movs	r2, #32
 8004500:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004504:	2303      	movs	r3, #3
 8004506:	e03a      	b.n	800457e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004508:	69fb      	ldr	r3, [r7, #28]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d10b      	bne.n	8004526 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800450e:	69bb      	ldr	r3, [r7, #24]
 8004510:	881b      	ldrh	r3, [r3, #0]
 8004512:	461a      	mov	r2, r3
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800451c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800451e:	69bb      	ldr	r3, [r7, #24]
 8004520:	3302      	adds	r3, #2
 8004522:	61bb      	str	r3, [r7, #24]
 8004524:	e007      	b.n	8004536 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004526:	69fb      	ldr	r3, [r7, #28]
 8004528:	781a      	ldrb	r2, [r3, #0]
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004530:	69fb      	ldr	r3, [r7, #28]
 8004532:	3301      	adds	r3, #1
 8004534:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800453a:	b29b      	uxth	r3, r3
 800453c:	3b01      	subs	r3, #1
 800453e:	b29a      	uxth	r2, r3
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004548:	b29b      	uxth	r3, r3
 800454a:	2b00      	cmp	r3, #0
 800454c:	d1cb      	bne.n	80044e6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	9300      	str	r3, [sp, #0]
 8004552:	697b      	ldr	r3, [r7, #20]
 8004554:	2200      	movs	r2, #0
 8004556:	2140      	movs	r1, #64	@ 0x40
 8004558:	68f8      	ldr	r0, [r7, #12]
 800455a:	f000 faeb 	bl	8004b34 <UART_WaitOnFlagUntilTimeout>
 800455e:	4603      	mov	r3, r0
 8004560:	2b00      	cmp	r3, #0
 8004562:	d005      	beq.n	8004570 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2220      	movs	r2, #32
 8004568:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800456c:	2303      	movs	r3, #3
 800456e:	e006      	b.n	800457e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	2220      	movs	r2, #32
 8004574:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004578:	2300      	movs	r3, #0
 800457a:	e000      	b.n	800457e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800457c:	2302      	movs	r3, #2
  }
}
 800457e:	4618      	mov	r0, r3
 8004580:	3720      	adds	r7, #32
 8004582:	46bd      	mov	sp, r7
 8004584:	bd80      	pop	{r7, pc}

08004586 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004586:	b580      	push	{r7, lr}
 8004588:	b084      	sub	sp, #16
 800458a:	af00      	add	r7, sp, #0
 800458c:	60f8      	str	r0, [r7, #12]
 800458e:	60b9      	str	r1, [r7, #8]
 8004590:	4613      	mov	r3, r2
 8004592:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800459a:	b2db      	uxtb	r3, r3
 800459c:	2b20      	cmp	r3, #32
 800459e:	d112      	bne.n	80045c6 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d002      	beq.n	80045ac <HAL_UART_Receive_IT+0x26>
 80045a6:	88fb      	ldrh	r3, [r7, #6]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d101      	bne.n	80045b0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80045ac:	2301      	movs	r3, #1
 80045ae:	e00b      	b.n	80045c8 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	2200      	movs	r2, #0
 80045b4:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80045b6:	88fb      	ldrh	r3, [r7, #6]
 80045b8:	461a      	mov	r2, r3
 80045ba:	68b9      	ldr	r1, [r7, #8]
 80045bc:	68f8      	ldr	r0, [r7, #12]
 80045be:	f000 fb12 	bl	8004be6 <UART_Start_Receive_IT>
 80045c2:	4603      	mov	r3, r0
 80045c4:	e000      	b.n	80045c8 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80045c6:	2302      	movs	r3, #2
  }
}
 80045c8:	4618      	mov	r0, r3
 80045ca:	3710      	adds	r7, #16
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bd80      	pop	{r7, pc}

080045d0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b0ba      	sub	sp, #232	@ 0xe8
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	68db      	ldr	r3, [r3, #12]
 80045e8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	695b      	ldr	r3, [r3, #20]
 80045f2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80045f6:	2300      	movs	r3, #0
 80045f8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80045fc:	2300      	movs	r3, #0
 80045fe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004602:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004606:	f003 030f 	and.w	r3, r3, #15
 800460a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800460e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004612:	2b00      	cmp	r3, #0
 8004614:	d10f      	bne.n	8004636 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004616:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800461a:	f003 0320 	and.w	r3, r3, #32
 800461e:	2b00      	cmp	r3, #0
 8004620:	d009      	beq.n	8004636 <HAL_UART_IRQHandler+0x66>
 8004622:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004626:	f003 0320 	and.w	r3, r3, #32
 800462a:	2b00      	cmp	r3, #0
 800462c:	d003      	beq.n	8004636 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	f000 fbf2 	bl	8004e18 <UART_Receive_IT>
      return;
 8004634:	e25b      	b.n	8004aee <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004636:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800463a:	2b00      	cmp	r3, #0
 800463c:	f000 80de 	beq.w	80047fc <HAL_UART_IRQHandler+0x22c>
 8004640:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004644:	f003 0301 	and.w	r3, r3, #1
 8004648:	2b00      	cmp	r3, #0
 800464a:	d106      	bne.n	800465a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800464c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004650:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004654:	2b00      	cmp	r3, #0
 8004656:	f000 80d1 	beq.w	80047fc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800465a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800465e:	f003 0301 	and.w	r3, r3, #1
 8004662:	2b00      	cmp	r3, #0
 8004664:	d00b      	beq.n	800467e <HAL_UART_IRQHandler+0xae>
 8004666:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800466a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800466e:	2b00      	cmp	r3, #0
 8004670:	d005      	beq.n	800467e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004676:	f043 0201 	orr.w	r2, r3, #1
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800467e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004682:	f003 0304 	and.w	r3, r3, #4
 8004686:	2b00      	cmp	r3, #0
 8004688:	d00b      	beq.n	80046a2 <HAL_UART_IRQHandler+0xd2>
 800468a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800468e:	f003 0301 	and.w	r3, r3, #1
 8004692:	2b00      	cmp	r3, #0
 8004694:	d005      	beq.n	80046a2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800469a:	f043 0202 	orr.w	r2, r3, #2
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80046a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046a6:	f003 0302 	and.w	r3, r3, #2
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d00b      	beq.n	80046c6 <HAL_UART_IRQHandler+0xf6>
 80046ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80046b2:	f003 0301 	and.w	r3, r3, #1
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d005      	beq.n	80046c6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046be:	f043 0204 	orr.w	r2, r3, #4
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80046c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046ca:	f003 0308 	and.w	r3, r3, #8
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d011      	beq.n	80046f6 <HAL_UART_IRQHandler+0x126>
 80046d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80046d6:	f003 0320 	and.w	r3, r3, #32
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d105      	bne.n	80046ea <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80046de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80046e2:	f003 0301 	and.w	r3, r3, #1
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d005      	beq.n	80046f6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046ee:	f043 0208 	orr.w	r2, r3, #8
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	f000 81f2 	beq.w	8004ae4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004700:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004704:	f003 0320 	and.w	r3, r3, #32
 8004708:	2b00      	cmp	r3, #0
 800470a:	d008      	beq.n	800471e <HAL_UART_IRQHandler+0x14e>
 800470c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004710:	f003 0320 	and.w	r3, r3, #32
 8004714:	2b00      	cmp	r3, #0
 8004716:	d002      	beq.n	800471e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004718:	6878      	ldr	r0, [r7, #4]
 800471a:	f000 fb7d 	bl	8004e18 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	695b      	ldr	r3, [r3, #20]
 8004724:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004728:	2b40      	cmp	r3, #64	@ 0x40
 800472a:	bf0c      	ite	eq
 800472c:	2301      	moveq	r3, #1
 800472e:	2300      	movne	r3, #0
 8004730:	b2db      	uxtb	r3, r3
 8004732:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800473a:	f003 0308 	and.w	r3, r3, #8
 800473e:	2b00      	cmp	r3, #0
 8004740:	d103      	bne.n	800474a <HAL_UART_IRQHandler+0x17a>
 8004742:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004746:	2b00      	cmp	r3, #0
 8004748:	d04f      	beq.n	80047ea <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800474a:	6878      	ldr	r0, [r7, #4]
 800474c:	f000 fa85 	bl	8004c5a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	695b      	ldr	r3, [r3, #20]
 8004756:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800475a:	2b40      	cmp	r3, #64	@ 0x40
 800475c:	d141      	bne.n	80047e2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	3314      	adds	r3, #20
 8004764:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004768:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800476c:	e853 3f00 	ldrex	r3, [r3]
 8004770:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004774:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004778:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800477c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	3314      	adds	r3, #20
 8004786:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800478a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800478e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004792:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004796:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800479a:	e841 2300 	strex	r3, r2, [r1]
 800479e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80047a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d1d9      	bne.n	800475e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d013      	beq.n	80047da <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047b6:	4a7e      	ldr	r2, [pc, #504]	@ (80049b0 <HAL_UART_IRQHandler+0x3e0>)
 80047b8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047be:	4618      	mov	r0, r3
 80047c0:	f7fd fc21 	bl	8002006 <HAL_DMA_Abort_IT>
 80047c4:	4603      	mov	r3, r0
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d016      	beq.n	80047f8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80047d0:	687a      	ldr	r2, [r7, #4]
 80047d2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80047d4:	4610      	mov	r0, r2
 80047d6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047d8:	e00e      	b.n	80047f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80047da:	6878      	ldr	r0, [r7, #4]
 80047dc:	f000 f994 	bl	8004b08 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047e0:	e00a      	b.n	80047f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80047e2:	6878      	ldr	r0, [r7, #4]
 80047e4:	f000 f990 	bl	8004b08 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047e8:	e006      	b.n	80047f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80047ea:	6878      	ldr	r0, [r7, #4]
 80047ec:	f000 f98c 	bl	8004b08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2200      	movs	r2, #0
 80047f4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80047f6:	e175      	b.n	8004ae4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047f8:	bf00      	nop
    return;
 80047fa:	e173      	b.n	8004ae4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004800:	2b01      	cmp	r3, #1
 8004802:	f040 814f 	bne.w	8004aa4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004806:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800480a:	f003 0310 	and.w	r3, r3, #16
 800480e:	2b00      	cmp	r3, #0
 8004810:	f000 8148 	beq.w	8004aa4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004814:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004818:	f003 0310 	and.w	r3, r3, #16
 800481c:	2b00      	cmp	r3, #0
 800481e:	f000 8141 	beq.w	8004aa4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004822:	2300      	movs	r3, #0
 8004824:	60bb      	str	r3, [r7, #8]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	60bb      	str	r3, [r7, #8]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	60bb      	str	r3, [r7, #8]
 8004836:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	695b      	ldr	r3, [r3, #20]
 800483e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004842:	2b40      	cmp	r3, #64	@ 0x40
 8004844:	f040 80b6 	bne.w	80049b4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004854:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004858:	2b00      	cmp	r3, #0
 800485a:	f000 8145 	beq.w	8004ae8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004862:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004866:	429a      	cmp	r2, r3
 8004868:	f080 813e 	bcs.w	8004ae8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004872:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004878:	69db      	ldr	r3, [r3, #28]
 800487a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800487e:	f000 8088 	beq.w	8004992 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	330c      	adds	r3, #12
 8004888:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800488c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004890:	e853 3f00 	ldrex	r3, [r3]
 8004894:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004898:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800489c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80048a0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	330c      	adds	r3, #12
 80048aa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80048ae:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80048b2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048b6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80048ba:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80048be:	e841 2300 	strex	r3, r2, [r1]
 80048c2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80048c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d1d9      	bne.n	8004882 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	3314      	adds	r3, #20
 80048d4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048d6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80048d8:	e853 3f00 	ldrex	r3, [r3]
 80048dc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80048de:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80048e0:	f023 0301 	bic.w	r3, r3, #1
 80048e4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	3314      	adds	r3, #20
 80048ee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80048f2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80048f6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048f8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80048fa:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80048fe:	e841 2300 	strex	r3, r2, [r1]
 8004902:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004904:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004906:	2b00      	cmp	r3, #0
 8004908:	d1e1      	bne.n	80048ce <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	3314      	adds	r3, #20
 8004910:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004912:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004914:	e853 3f00 	ldrex	r3, [r3]
 8004918:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800491a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800491c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004920:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	3314      	adds	r3, #20
 800492a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800492e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004930:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004932:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004934:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004936:	e841 2300 	strex	r3, r2, [r1]
 800493a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800493c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800493e:	2b00      	cmp	r3, #0
 8004940:	d1e3      	bne.n	800490a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2220      	movs	r2, #32
 8004946:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2200      	movs	r2, #0
 800494e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	330c      	adds	r3, #12
 8004956:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004958:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800495a:	e853 3f00 	ldrex	r3, [r3]
 800495e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004960:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004962:	f023 0310 	bic.w	r3, r3, #16
 8004966:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	330c      	adds	r3, #12
 8004970:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004974:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004976:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004978:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800497a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800497c:	e841 2300 	strex	r3, r2, [r1]
 8004980:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004982:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004984:	2b00      	cmp	r3, #0
 8004986:	d1e3      	bne.n	8004950 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800498c:	4618      	mov	r0, r3
 800498e:	f7fd faca 	bl	8001f26 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2202      	movs	r2, #2
 8004996:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80049a0:	b29b      	uxth	r3, r3
 80049a2:	1ad3      	subs	r3, r2, r3
 80049a4:	b29b      	uxth	r3, r3
 80049a6:	4619      	mov	r1, r3
 80049a8:	6878      	ldr	r0, [r7, #4]
 80049aa:	f000 f8b7 	bl	8004b1c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80049ae:	e09b      	b.n	8004ae8 <HAL_UART_IRQHandler+0x518>
 80049b0:	08004d21 	.word	0x08004d21
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80049bc:	b29b      	uxth	r3, r3
 80049be:	1ad3      	subs	r3, r2, r3
 80049c0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80049c8:	b29b      	uxth	r3, r3
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	f000 808e 	beq.w	8004aec <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80049d0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	f000 8089 	beq.w	8004aec <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	330c      	adds	r3, #12
 80049e0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049e4:	e853 3f00 	ldrex	r3, [r3]
 80049e8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80049ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049ec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80049f0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	330c      	adds	r3, #12
 80049fa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80049fe:	647a      	str	r2, [r7, #68]	@ 0x44
 8004a00:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a02:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004a04:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004a06:	e841 2300 	strex	r3, r2, [r1]
 8004a0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004a0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d1e3      	bne.n	80049da <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	3314      	adds	r3, #20
 8004a18:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a1c:	e853 3f00 	ldrex	r3, [r3]
 8004a20:	623b      	str	r3, [r7, #32]
   return(result);
 8004a22:	6a3b      	ldr	r3, [r7, #32]
 8004a24:	f023 0301 	bic.w	r3, r3, #1
 8004a28:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	3314      	adds	r3, #20
 8004a32:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004a36:	633a      	str	r2, [r7, #48]	@ 0x30
 8004a38:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a3a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004a3c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004a3e:	e841 2300 	strex	r3, r2, [r1]
 8004a42:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004a44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d1e3      	bne.n	8004a12 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2220      	movs	r2, #32
 8004a4e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2200      	movs	r2, #0
 8004a56:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	330c      	adds	r3, #12
 8004a5e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a60:	693b      	ldr	r3, [r7, #16]
 8004a62:	e853 3f00 	ldrex	r3, [r3]
 8004a66:	60fb      	str	r3, [r7, #12]
   return(result);
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	f023 0310 	bic.w	r3, r3, #16
 8004a6e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	330c      	adds	r3, #12
 8004a78:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004a7c:	61fa      	str	r2, [r7, #28]
 8004a7e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a80:	69b9      	ldr	r1, [r7, #24]
 8004a82:	69fa      	ldr	r2, [r7, #28]
 8004a84:	e841 2300 	strex	r3, r2, [r1]
 8004a88:	617b      	str	r3, [r7, #20]
   return(result);
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d1e3      	bne.n	8004a58 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2202      	movs	r2, #2
 8004a94:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004a96:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004a9a:	4619      	mov	r1, r3
 8004a9c:	6878      	ldr	r0, [r7, #4]
 8004a9e:	f000 f83d 	bl	8004b1c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004aa2:	e023      	b.n	8004aec <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004aa4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004aa8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d009      	beq.n	8004ac4 <HAL_UART_IRQHandler+0x4f4>
 8004ab0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ab4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d003      	beq.n	8004ac4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004abc:	6878      	ldr	r0, [r7, #4]
 8004abe:	f000 f943 	bl	8004d48 <UART_Transmit_IT>
    return;
 8004ac2:	e014      	b.n	8004aee <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004ac4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ac8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d00e      	beq.n	8004aee <HAL_UART_IRQHandler+0x51e>
 8004ad0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ad4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d008      	beq.n	8004aee <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004adc:	6878      	ldr	r0, [r7, #4]
 8004ade:	f000 f983 	bl	8004de8 <UART_EndTransmit_IT>
    return;
 8004ae2:	e004      	b.n	8004aee <HAL_UART_IRQHandler+0x51e>
    return;
 8004ae4:	bf00      	nop
 8004ae6:	e002      	b.n	8004aee <HAL_UART_IRQHandler+0x51e>
      return;
 8004ae8:	bf00      	nop
 8004aea:	e000      	b.n	8004aee <HAL_UART_IRQHandler+0x51e>
      return;
 8004aec:	bf00      	nop
  }
}
 8004aee:	37e8      	adds	r7, #232	@ 0xe8
 8004af0:	46bd      	mov	sp, r7
 8004af2:	bd80      	pop	{r7, pc}

08004af4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004af4:	b480      	push	{r7}
 8004af6:	b083      	sub	sp, #12
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004afc:	bf00      	nop
 8004afe:	370c      	adds	r7, #12
 8004b00:	46bd      	mov	sp, r7
 8004b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b06:	4770      	bx	lr

08004b08 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b083      	sub	sp, #12
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004b10:	bf00      	nop
 8004b12:	370c      	adds	r7, #12
 8004b14:	46bd      	mov	sp, r7
 8004b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1a:	4770      	bx	lr

08004b1c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b083      	sub	sp, #12
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
 8004b24:	460b      	mov	r3, r1
 8004b26:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004b28:	bf00      	nop
 8004b2a:	370c      	adds	r7, #12
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b32:	4770      	bx	lr

08004b34 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b086      	sub	sp, #24
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	60f8      	str	r0, [r7, #12]
 8004b3c:	60b9      	str	r1, [r7, #8]
 8004b3e:	603b      	str	r3, [r7, #0]
 8004b40:	4613      	mov	r3, r2
 8004b42:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b44:	e03b      	b.n	8004bbe <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b46:	6a3b      	ldr	r3, [r7, #32]
 8004b48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b4c:	d037      	beq.n	8004bbe <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b4e:	f7fd f8a9 	bl	8001ca4 <HAL_GetTick>
 8004b52:	4602      	mov	r2, r0
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	1ad3      	subs	r3, r2, r3
 8004b58:	6a3a      	ldr	r2, [r7, #32]
 8004b5a:	429a      	cmp	r2, r3
 8004b5c:	d302      	bcc.n	8004b64 <UART_WaitOnFlagUntilTimeout+0x30>
 8004b5e:	6a3b      	ldr	r3, [r7, #32]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d101      	bne.n	8004b68 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004b64:	2303      	movs	r3, #3
 8004b66:	e03a      	b.n	8004bde <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	68db      	ldr	r3, [r3, #12]
 8004b6e:	f003 0304 	and.w	r3, r3, #4
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d023      	beq.n	8004bbe <UART_WaitOnFlagUntilTimeout+0x8a>
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	2b80      	cmp	r3, #128	@ 0x80
 8004b7a:	d020      	beq.n	8004bbe <UART_WaitOnFlagUntilTimeout+0x8a>
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	2b40      	cmp	r3, #64	@ 0x40
 8004b80:	d01d      	beq.n	8004bbe <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f003 0308 	and.w	r3, r3, #8
 8004b8c:	2b08      	cmp	r3, #8
 8004b8e:	d116      	bne.n	8004bbe <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004b90:	2300      	movs	r3, #0
 8004b92:	617b      	str	r3, [r7, #20]
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	617b      	str	r3, [r7, #20]
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	617b      	str	r3, [r7, #20]
 8004ba4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004ba6:	68f8      	ldr	r0, [r7, #12]
 8004ba8:	f000 f857 	bl	8004c5a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	2208      	movs	r2, #8
 8004bb0:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	e00f      	b.n	8004bde <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	681a      	ldr	r2, [r3, #0]
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	4013      	ands	r3, r2
 8004bc8:	68ba      	ldr	r2, [r7, #8]
 8004bca:	429a      	cmp	r2, r3
 8004bcc:	bf0c      	ite	eq
 8004bce:	2301      	moveq	r3, #1
 8004bd0:	2300      	movne	r3, #0
 8004bd2:	b2db      	uxtb	r3, r3
 8004bd4:	461a      	mov	r2, r3
 8004bd6:	79fb      	ldrb	r3, [r7, #7]
 8004bd8:	429a      	cmp	r2, r3
 8004bda:	d0b4      	beq.n	8004b46 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004bdc:	2300      	movs	r3, #0
}
 8004bde:	4618      	mov	r0, r3
 8004be0:	3718      	adds	r7, #24
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bd80      	pop	{r7, pc}

08004be6 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004be6:	b480      	push	{r7}
 8004be8:	b085      	sub	sp, #20
 8004bea:	af00      	add	r7, sp, #0
 8004bec:	60f8      	str	r0, [r7, #12]
 8004bee:	60b9      	str	r1, [r7, #8]
 8004bf0:	4613      	mov	r3, r2
 8004bf2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	68ba      	ldr	r2, [r7, #8]
 8004bf8:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	88fa      	ldrh	r2, [r7, #6]
 8004bfe:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	88fa      	ldrh	r2, [r7, #6]
 8004c04:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	2222      	movs	r2, #34	@ 0x22
 8004c10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	691b      	ldr	r3, [r3, #16]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d007      	beq.n	8004c2c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	68da      	ldr	r2, [r3, #12]
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004c2a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	695a      	ldr	r2, [r3, #20]
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f042 0201 	orr.w	r2, r2, #1
 8004c3a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	68da      	ldr	r2, [r3, #12]
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f042 0220 	orr.w	r2, r2, #32
 8004c4a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004c4c:	2300      	movs	r3, #0
}
 8004c4e:	4618      	mov	r0, r3
 8004c50:	3714      	adds	r7, #20
 8004c52:	46bd      	mov	sp, r7
 8004c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c58:	4770      	bx	lr

08004c5a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004c5a:	b480      	push	{r7}
 8004c5c:	b095      	sub	sp, #84	@ 0x54
 8004c5e:	af00      	add	r7, sp, #0
 8004c60:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	330c      	adds	r3, #12
 8004c68:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c6c:	e853 3f00 	ldrex	r3, [r3]
 8004c70:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004c72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c74:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004c78:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	330c      	adds	r3, #12
 8004c80:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004c82:	643a      	str	r2, [r7, #64]	@ 0x40
 8004c84:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c86:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004c88:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004c8a:	e841 2300 	strex	r3, r2, [r1]
 8004c8e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004c90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d1e5      	bne.n	8004c62 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	3314      	adds	r3, #20
 8004c9c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c9e:	6a3b      	ldr	r3, [r7, #32]
 8004ca0:	e853 3f00 	ldrex	r3, [r3]
 8004ca4:	61fb      	str	r3, [r7, #28]
   return(result);
 8004ca6:	69fb      	ldr	r3, [r7, #28]
 8004ca8:	f023 0301 	bic.w	r3, r3, #1
 8004cac:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	3314      	adds	r3, #20
 8004cb4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004cb6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004cb8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cba:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004cbc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004cbe:	e841 2300 	strex	r3, r2, [r1]
 8004cc2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004cc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d1e5      	bne.n	8004c96 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cce:	2b01      	cmp	r3, #1
 8004cd0:	d119      	bne.n	8004d06 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	330c      	adds	r3, #12
 8004cd8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	e853 3f00 	ldrex	r3, [r3]
 8004ce0:	60bb      	str	r3, [r7, #8]
   return(result);
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	f023 0310 	bic.w	r3, r3, #16
 8004ce8:	647b      	str	r3, [r7, #68]	@ 0x44
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	330c      	adds	r3, #12
 8004cf0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004cf2:	61ba      	str	r2, [r7, #24]
 8004cf4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cf6:	6979      	ldr	r1, [r7, #20]
 8004cf8:	69ba      	ldr	r2, [r7, #24]
 8004cfa:	e841 2300 	strex	r3, r2, [r1]
 8004cfe:	613b      	str	r3, [r7, #16]
   return(result);
 8004d00:	693b      	ldr	r3, [r7, #16]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d1e5      	bne.n	8004cd2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2220      	movs	r2, #32
 8004d0a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2200      	movs	r2, #0
 8004d12:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004d14:	bf00      	nop
 8004d16:	3754      	adds	r7, #84	@ 0x54
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1e:	4770      	bx	lr

08004d20 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b084      	sub	sp, #16
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d2c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	2200      	movs	r2, #0
 8004d32:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	2200      	movs	r2, #0
 8004d38:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004d3a:	68f8      	ldr	r0, [r7, #12]
 8004d3c:	f7ff fee4 	bl	8004b08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004d40:	bf00      	nop
 8004d42:	3710      	adds	r7, #16
 8004d44:	46bd      	mov	sp, r7
 8004d46:	bd80      	pop	{r7, pc}

08004d48 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b085      	sub	sp, #20
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d56:	b2db      	uxtb	r3, r3
 8004d58:	2b21      	cmp	r3, #33	@ 0x21
 8004d5a:	d13e      	bne.n	8004dda <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	689b      	ldr	r3, [r3, #8]
 8004d60:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d64:	d114      	bne.n	8004d90 <UART_Transmit_IT+0x48>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	691b      	ldr	r3, [r3, #16]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d110      	bne.n	8004d90 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6a1b      	ldr	r3, [r3, #32]
 8004d72:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	881b      	ldrh	r3, [r3, #0]
 8004d78:	461a      	mov	r2, r3
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d82:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6a1b      	ldr	r3, [r3, #32]
 8004d88:	1c9a      	adds	r2, r3, #2
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	621a      	str	r2, [r3, #32]
 8004d8e:	e008      	b.n	8004da2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6a1b      	ldr	r3, [r3, #32]
 8004d94:	1c59      	adds	r1, r3, #1
 8004d96:	687a      	ldr	r2, [r7, #4]
 8004d98:	6211      	str	r1, [r2, #32]
 8004d9a:	781a      	ldrb	r2, [r3, #0]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004da6:	b29b      	uxth	r3, r3
 8004da8:	3b01      	subs	r3, #1
 8004daa:	b29b      	uxth	r3, r3
 8004dac:	687a      	ldr	r2, [r7, #4]
 8004dae:	4619      	mov	r1, r3
 8004db0:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d10f      	bne.n	8004dd6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	68da      	ldr	r2, [r3, #12]
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004dc4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	68da      	ldr	r2, [r3, #12]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004dd4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	e000      	b.n	8004ddc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004dda:	2302      	movs	r3, #2
  }
}
 8004ddc:	4618      	mov	r0, r3
 8004dde:	3714      	adds	r7, #20
 8004de0:	46bd      	mov	sp, r7
 8004de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de6:	4770      	bx	lr

08004de8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b082      	sub	sp, #8
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	68da      	ldr	r2, [r3, #12]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004dfe:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2220      	movs	r2, #32
 8004e04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004e08:	6878      	ldr	r0, [r7, #4]
 8004e0a:	f7ff fe73 	bl	8004af4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004e0e:	2300      	movs	r3, #0
}
 8004e10:	4618      	mov	r0, r3
 8004e12:	3708      	adds	r7, #8
 8004e14:	46bd      	mov	sp, r7
 8004e16:	bd80      	pop	{r7, pc}

08004e18 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b08c      	sub	sp, #48	@ 0x30
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004e26:	b2db      	uxtb	r3, r3
 8004e28:	2b22      	cmp	r3, #34	@ 0x22
 8004e2a:	f040 80ae 	bne.w	8004f8a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	689b      	ldr	r3, [r3, #8]
 8004e32:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e36:	d117      	bne.n	8004e68 <UART_Receive_IT+0x50>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	691b      	ldr	r3, [r3, #16]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d113      	bne.n	8004e68 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004e40:	2300      	movs	r3, #0
 8004e42:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e48:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	b29b      	uxth	r3, r3
 8004e52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e56:	b29a      	uxth	r2, r3
 8004e58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e5a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e60:	1c9a      	adds	r2, r3, #2
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	629a      	str	r2, [r3, #40]	@ 0x28
 8004e66:	e026      	b.n	8004eb6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004e6e:	2300      	movs	r3, #0
 8004e70:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	689b      	ldr	r3, [r3, #8]
 8004e76:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e7a:	d007      	beq.n	8004e8c <UART_Receive_IT+0x74>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	689b      	ldr	r3, [r3, #8]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d10a      	bne.n	8004e9a <UART_Receive_IT+0x82>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	691b      	ldr	r3, [r3, #16]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d106      	bne.n	8004e9a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	b2da      	uxtb	r2, r3
 8004e94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e96:	701a      	strb	r2, [r3, #0]
 8004e98:	e008      	b.n	8004eac <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	b2db      	uxtb	r3, r3
 8004ea2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004ea6:	b2da      	uxtb	r2, r3
 8004ea8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004eaa:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004eb0:	1c5a      	adds	r2, r3, #1
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004eba:	b29b      	uxth	r3, r3
 8004ebc:	3b01      	subs	r3, #1
 8004ebe:	b29b      	uxth	r3, r3
 8004ec0:	687a      	ldr	r2, [r7, #4]
 8004ec2:	4619      	mov	r1, r3
 8004ec4:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d15d      	bne.n	8004f86 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	68da      	ldr	r2, [r3, #12]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f022 0220 	bic.w	r2, r2, #32
 8004ed8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	68da      	ldr	r2, [r3, #12]
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004ee8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	695a      	ldr	r2, [r3, #20]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f022 0201 	bic.w	r2, r2, #1
 8004ef8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2220      	movs	r2, #32
 8004efe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2200      	movs	r2, #0
 8004f06:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f0c:	2b01      	cmp	r3, #1
 8004f0e:	d135      	bne.n	8004f7c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2200      	movs	r2, #0
 8004f14:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	330c      	adds	r3, #12
 8004f1c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f1e:	697b      	ldr	r3, [r7, #20]
 8004f20:	e853 3f00 	ldrex	r3, [r3]
 8004f24:	613b      	str	r3, [r7, #16]
   return(result);
 8004f26:	693b      	ldr	r3, [r7, #16]
 8004f28:	f023 0310 	bic.w	r3, r3, #16
 8004f2c:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	330c      	adds	r3, #12
 8004f34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f36:	623a      	str	r2, [r7, #32]
 8004f38:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f3a:	69f9      	ldr	r1, [r7, #28]
 8004f3c:	6a3a      	ldr	r2, [r7, #32]
 8004f3e:	e841 2300 	strex	r3, r2, [r1]
 8004f42:	61bb      	str	r3, [r7, #24]
   return(result);
 8004f44:	69bb      	ldr	r3, [r7, #24]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d1e5      	bne.n	8004f16 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f003 0310 	and.w	r3, r3, #16
 8004f54:	2b10      	cmp	r3, #16
 8004f56:	d10a      	bne.n	8004f6e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004f58:	2300      	movs	r3, #0
 8004f5a:	60fb      	str	r3, [r7, #12]
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	60fb      	str	r3, [r7, #12]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	685b      	ldr	r3, [r3, #4]
 8004f6a:	60fb      	str	r3, [r7, #12]
 8004f6c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004f72:	4619      	mov	r1, r3
 8004f74:	6878      	ldr	r0, [r7, #4]
 8004f76:	f7ff fdd1 	bl	8004b1c <HAL_UARTEx_RxEventCallback>
 8004f7a:	e002      	b.n	8004f82 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004f7c:	6878      	ldr	r0, [r7, #4]
 8004f7e:	f7fc fdcb 	bl	8001b18 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004f82:	2300      	movs	r3, #0
 8004f84:	e002      	b.n	8004f8c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004f86:	2300      	movs	r3, #0
 8004f88:	e000      	b.n	8004f8c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004f8a:	2302      	movs	r3, #2
  }
}
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	3730      	adds	r7, #48	@ 0x30
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bd80      	pop	{r7, pc}

08004f94 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f98:	b0c0      	sub	sp, #256	@ 0x100
 8004f9a:	af00      	add	r7, sp, #0
 8004f9c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004fa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	691b      	ldr	r3, [r3, #16]
 8004fa8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004fac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fb0:	68d9      	ldr	r1, [r3, #12]
 8004fb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fb6:	681a      	ldr	r2, [r3, #0]
 8004fb8:	ea40 0301 	orr.w	r3, r0, r1
 8004fbc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004fbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fc2:	689a      	ldr	r2, [r3, #8]
 8004fc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fc8:	691b      	ldr	r3, [r3, #16]
 8004fca:	431a      	orrs	r2, r3
 8004fcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fd0:	695b      	ldr	r3, [r3, #20]
 8004fd2:	431a      	orrs	r2, r3
 8004fd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fd8:	69db      	ldr	r3, [r3, #28]
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004fe0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	68db      	ldr	r3, [r3, #12]
 8004fe8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004fec:	f021 010c 	bic.w	r1, r1, #12
 8004ff0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ff4:	681a      	ldr	r2, [r3, #0]
 8004ff6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004ffa:	430b      	orrs	r3, r1
 8004ffc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004ffe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	695b      	ldr	r3, [r3, #20]
 8005006:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800500a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800500e:	6999      	ldr	r1, [r3, #24]
 8005010:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005014:	681a      	ldr	r2, [r3, #0]
 8005016:	ea40 0301 	orr.w	r3, r0, r1
 800501a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800501c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005020:	681a      	ldr	r2, [r3, #0]
 8005022:	4b8f      	ldr	r3, [pc, #572]	@ (8005260 <UART_SetConfig+0x2cc>)
 8005024:	429a      	cmp	r2, r3
 8005026:	d005      	beq.n	8005034 <UART_SetConfig+0xa0>
 8005028:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800502c:	681a      	ldr	r2, [r3, #0]
 800502e:	4b8d      	ldr	r3, [pc, #564]	@ (8005264 <UART_SetConfig+0x2d0>)
 8005030:	429a      	cmp	r2, r3
 8005032:	d104      	bne.n	800503e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005034:	f7fe fabc 	bl	80035b0 <HAL_RCC_GetPCLK2Freq>
 8005038:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800503c:	e003      	b.n	8005046 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800503e:	f7fe faa3 	bl	8003588 <HAL_RCC_GetPCLK1Freq>
 8005042:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005046:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800504a:	69db      	ldr	r3, [r3, #28]
 800504c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005050:	f040 810c 	bne.w	800526c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005054:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005058:	2200      	movs	r2, #0
 800505a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800505e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005062:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005066:	4622      	mov	r2, r4
 8005068:	462b      	mov	r3, r5
 800506a:	1891      	adds	r1, r2, r2
 800506c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800506e:	415b      	adcs	r3, r3
 8005070:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005072:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005076:	4621      	mov	r1, r4
 8005078:	eb12 0801 	adds.w	r8, r2, r1
 800507c:	4629      	mov	r1, r5
 800507e:	eb43 0901 	adc.w	r9, r3, r1
 8005082:	f04f 0200 	mov.w	r2, #0
 8005086:	f04f 0300 	mov.w	r3, #0
 800508a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800508e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005092:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005096:	4690      	mov	r8, r2
 8005098:	4699      	mov	r9, r3
 800509a:	4623      	mov	r3, r4
 800509c:	eb18 0303 	adds.w	r3, r8, r3
 80050a0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80050a4:	462b      	mov	r3, r5
 80050a6:	eb49 0303 	adc.w	r3, r9, r3
 80050aa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80050ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	2200      	movs	r2, #0
 80050b6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80050ba:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80050be:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80050c2:	460b      	mov	r3, r1
 80050c4:	18db      	adds	r3, r3, r3
 80050c6:	653b      	str	r3, [r7, #80]	@ 0x50
 80050c8:	4613      	mov	r3, r2
 80050ca:	eb42 0303 	adc.w	r3, r2, r3
 80050ce:	657b      	str	r3, [r7, #84]	@ 0x54
 80050d0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80050d4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80050d8:	f7fb f8ea 	bl	80002b0 <__aeabi_uldivmod>
 80050dc:	4602      	mov	r2, r0
 80050de:	460b      	mov	r3, r1
 80050e0:	4b61      	ldr	r3, [pc, #388]	@ (8005268 <UART_SetConfig+0x2d4>)
 80050e2:	fba3 2302 	umull	r2, r3, r3, r2
 80050e6:	095b      	lsrs	r3, r3, #5
 80050e8:	011c      	lsls	r4, r3, #4
 80050ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80050ee:	2200      	movs	r2, #0
 80050f0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80050f4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80050f8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80050fc:	4642      	mov	r2, r8
 80050fe:	464b      	mov	r3, r9
 8005100:	1891      	adds	r1, r2, r2
 8005102:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005104:	415b      	adcs	r3, r3
 8005106:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005108:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800510c:	4641      	mov	r1, r8
 800510e:	eb12 0a01 	adds.w	sl, r2, r1
 8005112:	4649      	mov	r1, r9
 8005114:	eb43 0b01 	adc.w	fp, r3, r1
 8005118:	f04f 0200 	mov.w	r2, #0
 800511c:	f04f 0300 	mov.w	r3, #0
 8005120:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005124:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005128:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800512c:	4692      	mov	sl, r2
 800512e:	469b      	mov	fp, r3
 8005130:	4643      	mov	r3, r8
 8005132:	eb1a 0303 	adds.w	r3, sl, r3
 8005136:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800513a:	464b      	mov	r3, r9
 800513c:	eb4b 0303 	adc.w	r3, fp, r3
 8005140:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005144:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	2200      	movs	r2, #0
 800514c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005150:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005154:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005158:	460b      	mov	r3, r1
 800515a:	18db      	adds	r3, r3, r3
 800515c:	643b      	str	r3, [r7, #64]	@ 0x40
 800515e:	4613      	mov	r3, r2
 8005160:	eb42 0303 	adc.w	r3, r2, r3
 8005164:	647b      	str	r3, [r7, #68]	@ 0x44
 8005166:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800516a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800516e:	f7fb f89f 	bl	80002b0 <__aeabi_uldivmod>
 8005172:	4602      	mov	r2, r0
 8005174:	460b      	mov	r3, r1
 8005176:	4611      	mov	r1, r2
 8005178:	4b3b      	ldr	r3, [pc, #236]	@ (8005268 <UART_SetConfig+0x2d4>)
 800517a:	fba3 2301 	umull	r2, r3, r3, r1
 800517e:	095b      	lsrs	r3, r3, #5
 8005180:	2264      	movs	r2, #100	@ 0x64
 8005182:	fb02 f303 	mul.w	r3, r2, r3
 8005186:	1acb      	subs	r3, r1, r3
 8005188:	00db      	lsls	r3, r3, #3
 800518a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800518e:	4b36      	ldr	r3, [pc, #216]	@ (8005268 <UART_SetConfig+0x2d4>)
 8005190:	fba3 2302 	umull	r2, r3, r3, r2
 8005194:	095b      	lsrs	r3, r3, #5
 8005196:	005b      	lsls	r3, r3, #1
 8005198:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800519c:	441c      	add	r4, r3
 800519e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80051a2:	2200      	movs	r2, #0
 80051a4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80051a8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80051ac:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80051b0:	4642      	mov	r2, r8
 80051b2:	464b      	mov	r3, r9
 80051b4:	1891      	adds	r1, r2, r2
 80051b6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80051b8:	415b      	adcs	r3, r3
 80051ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80051bc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80051c0:	4641      	mov	r1, r8
 80051c2:	1851      	adds	r1, r2, r1
 80051c4:	6339      	str	r1, [r7, #48]	@ 0x30
 80051c6:	4649      	mov	r1, r9
 80051c8:	414b      	adcs	r3, r1
 80051ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80051cc:	f04f 0200 	mov.w	r2, #0
 80051d0:	f04f 0300 	mov.w	r3, #0
 80051d4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80051d8:	4659      	mov	r1, fp
 80051da:	00cb      	lsls	r3, r1, #3
 80051dc:	4651      	mov	r1, sl
 80051de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80051e2:	4651      	mov	r1, sl
 80051e4:	00ca      	lsls	r2, r1, #3
 80051e6:	4610      	mov	r0, r2
 80051e8:	4619      	mov	r1, r3
 80051ea:	4603      	mov	r3, r0
 80051ec:	4642      	mov	r2, r8
 80051ee:	189b      	adds	r3, r3, r2
 80051f0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80051f4:	464b      	mov	r3, r9
 80051f6:	460a      	mov	r2, r1
 80051f8:	eb42 0303 	adc.w	r3, r2, r3
 80051fc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005200:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005204:	685b      	ldr	r3, [r3, #4]
 8005206:	2200      	movs	r2, #0
 8005208:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800520c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005210:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005214:	460b      	mov	r3, r1
 8005216:	18db      	adds	r3, r3, r3
 8005218:	62bb      	str	r3, [r7, #40]	@ 0x28
 800521a:	4613      	mov	r3, r2
 800521c:	eb42 0303 	adc.w	r3, r2, r3
 8005220:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005222:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005226:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800522a:	f7fb f841 	bl	80002b0 <__aeabi_uldivmod>
 800522e:	4602      	mov	r2, r0
 8005230:	460b      	mov	r3, r1
 8005232:	4b0d      	ldr	r3, [pc, #52]	@ (8005268 <UART_SetConfig+0x2d4>)
 8005234:	fba3 1302 	umull	r1, r3, r3, r2
 8005238:	095b      	lsrs	r3, r3, #5
 800523a:	2164      	movs	r1, #100	@ 0x64
 800523c:	fb01 f303 	mul.w	r3, r1, r3
 8005240:	1ad3      	subs	r3, r2, r3
 8005242:	00db      	lsls	r3, r3, #3
 8005244:	3332      	adds	r3, #50	@ 0x32
 8005246:	4a08      	ldr	r2, [pc, #32]	@ (8005268 <UART_SetConfig+0x2d4>)
 8005248:	fba2 2303 	umull	r2, r3, r2, r3
 800524c:	095b      	lsrs	r3, r3, #5
 800524e:	f003 0207 	and.w	r2, r3, #7
 8005252:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4422      	add	r2, r4
 800525a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800525c:	e106      	b.n	800546c <UART_SetConfig+0x4d8>
 800525e:	bf00      	nop
 8005260:	40011000 	.word	0x40011000
 8005264:	40011400 	.word	0x40011400
 8005268:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800526c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005270:	2200      	movs	r2, #0
 8005272:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005276:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800527a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800527e:	4642      	mov	r2, r8
 8005280:	464b      	mov	r3, r9
 8005282:	1891      	adds	r1, r2, r2
 8005284:	6239      	str	r1, [r7, #32]
 8005286:	415b      	adcs	r3, r3
 8005288:	627b      	str	r3, [r7, #36]	@ 0x24
 800528a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800528e:	4641      	mov	r1, r8
 8005290:	1854      	adds	r4, r2, r1
 8005292:	4649      	mov	r1, r9
 8005294:	eb43 0501 	adc.w	r5, r3, r1
 8005298:	f04f 0200 	mov.w	r2, #0
 800529c:	f04f 0300 	mov.w	r3, #0
 80052a0:	00eb      	lsls	r3, r5, #3
 80052a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80052a6:	00e2      	lsls	r2, r4, #3
 80052a8:	4614      	mov	r4, r2
 80052aa:	461d      	mov	r5, r3
 80052ac:	4643      	mov	r3, r8
 80052ae:	18e3      	adds	r3, r4, r3
 80052b0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80052b4:	464b      	mov	r3, r9
 80052b6:	eb45 0303 	adc.w	r3, r5, r3
 80052ba:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80052be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	2200      	movs	r2, #0
 80052c6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80052ca:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80052ce:	f04f 0200 	mov.w	r2, #0
 80052d2:	f04f 0300 	mov.w	r3, #0
 80052d6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80052da:	4629      	mov	r1, r5
 80052dc:	008b      	lsls	r3, r1, #2
 80052de:	4621      	mov	r1, r4
 80052e0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80052e4:	4621      	mov	r1, r4
 80052e6:	008a      	lsls	r2, r1, #2
 80052e8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80052ec:	f7fa ffe0 	bl	80002b0 <__aeabi_uldivmod>
 80052f0:	4602      	mov	r2, r0
 80052f2:	460b      	mov	r3, r1
 80052f4:	4b60      	ldr	r3, [pc, #384]	@ (8005478 <UART_SetConfig+0x4e4>)
 80052f6:	fba3 2302 	umull	r2, r3, r3, r2
 80052fa:	095b      	lsrs	r3, r3, #5
 80052fc:	011c      	lsls	r4, r3, #4
 80052fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005302:	2200      	movs	r2, #0
 8005304:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005308:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800530c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005310:	4642      	mov	r2, r8
 8005312:	464b      	mov	r3, r9
 8005314:	1891      	adds	r1, r2, r2
 8005316:	61b9      	str	r1, [r7, #24]
 8005318:	415b      	adcs	r3, r3
 800531a:	61fb      	str	r3, [r7, #28]
 800531c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005320:	4641      	mov	r1, r8
 8005322:	1851      	adds	r1, r2, r1
 8005324:	6139      	str	r1, [r7, #16]
 8005326:	4649      	mov	r1, r9
 8005328:	414b      	adcs	r3, r1
 800532a:	617b      	str	r3, [r7, #20]
 800532c:	f04f 0200 	mov.w	r2, #0
 8005330:	f04f 0300 	mov.w	r3, #0
 8005334:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005338:	4659      	mov	r1, fp
 800533a:	00cb      	lsls	r3, r1, #3
 800533c:	4651      	mov	r1, sl
 800533e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005342:	4651      	mov	r1, sl
 8005344:	00ca      	lsls	r2, r1, #3
 8005346:	4610      	mov	r0, r2
 8005348:	4619      	mov	r1, r3
 800534a:	4603      	mov	r3, r0
 800534c:	4642      	mov	r2, r8
 800534e:	189b      	adds	r3, r3, r2
 8005350:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005354:	464b      	mov	r3, r9
 8005356:	460a      	mov	r2, r1
 8005358:	eb42 0303 	adc.w	r3, r2, r3
 800535c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005360:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005364:	685b      	ldr	r3, [r3, #4]
 8005366:	2200      	movs	r2, #0
 8005368:	67bb      	str	r3, [r7, #120]	@ 0x78
 800536a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800536c:	f04f 0200 	mov.w	r2, #0
 8005370:	f04f 0300 	mov.w	r3, #0
 8005374:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005378:	4649      	mov	r1, r9
 800537a:	008b      	lsls	r3, r1, #2
 800537c:	4641      	mov	r1, r8
 800537e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005382:	4641      	mov	r1, r8
 8005384:	008a      	lsls	r2, r1, #2
 8005386:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800538a:	f7fa ff91 	bl	80002b0 <__aeabi_uldivmod>
 800538e:	4602      	mov	r2, r0
 8005390:	460b      	mov	r3, r1
 8005392:	4611      	mov	r1, r2
 8005394:	4b38      	ldr	r3, [pc, #224]	@ (8005478 <UART_SetConfig+0x4e4>)
 8005396:	fba3 2301 	umull	r2, r3, r3, r1
 800539a:	095b      	lsrs	r3, r3, #5
 800539c:	2264      	movs	r2, #100	@ 0x64
 800539e:	fb02 f303 	mul.w	r3, r2, r3
 80053a2:	1acb      	subs	r3, r1, r3
 80053a4:	011b      	lsls	r3, r3, #4
 80053a6:	3332      	adds	r3, #50	@ 0x32
 80053a8:	4a33      	ldr	r2, [pc, #204]	@ (8005478 <UART_SetConfig+0x4e4>)
 80053aa:	fba2 2303 	umull	r2, r3, r2, r3
 80053ae:	095b      	lsrs	r3, r3, #5
 80053b0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80053b4:	441c      	add	r4, r3
 80053b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80053ba:	2200      	movs	r2, #0
 80053bc:	673b      	str	r3, [r7, #112]	@ 0x70
 80053be:	677a      	str	r2, [r7, #116]	@ 0x74
 80053c0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80053c4:	4642      	mov	r2, r8
 80053c6:	464b      	mov	r3, r9
 80053c8:	1891      	adds	r1, r2, r2
 80053ca:	60b9      	str	r1, [r7, #8]
 80053cc:	415b      	adcs	r3, r3
 80053ce:	60fb      	str	r3, [r7, #12]
 80053d0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80053d4:	4641      	mov	r1, r8
 80053d6:	1851      	adds	r1, r2, r1
 80053d8:	6039      	str	r1, [r7, #0]
 80053da:	4649      	mov	r1, r9
 80053dc:	414b      	adcs	r3, r1
 80053de:	607b      	str	r3, [r7, #4]
 80053e0:	f04f 0200 	mov.w	r2, #0
 80053e4:	f04f 0300 	mov.w	r3, #0
 80053e8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80053ec:	4659      	mov	r1, fp
 80053ee:	00cb      	lsls	r3, r1, #3
 80053f0:	4651      	mov	r1, sl
 80053f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80053f6:	4651      	mov	r1, sl
 80053f8:	00ca      	lsls	r2, r1, #3
 80053fa:	4610      	mov	r0, r2
 80053fc:	4619      	mov	r1, r3
 80053fe:	4603      	mov	r3, r0
 8005400:	4642      	mov	r2, r8
 8005402:	189b      	adds	r3, r3, r2
 8005404:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005406:	464b      	mov	r3, r9
 8005408:	460a      	mov	r2, r1
 800540a:	eb42 0303 	adc.w	r3, r2, r3
 800540e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005410:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	2200      	movs	r2, #0
 8005418:	663b      	str	r3, [r7, #96]	@ 0x60
 800541a:	667a      	str	r2, [r7, #100]	@ 0x64
 800541c:	f04f 0200 	mov.w	r2, #0
 8005420:	f04f 0300 	mov.w	r3, #0
 8005424:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005428:	4649      	mov	r1, r9
 800542a:	008b      	lsls	r3, r1, #2
 800542c:	4641      	mov	r1, r8
 800542e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005432:	4641      	mov	r1, r8
 8005434:	008a      	lsls	r2, r1, #2
 8005436:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800543a:	f7fa ff39 	bl	80002b0 <__aeabi_uldivmod>
 800543e:	4602      	mov	r2, r0
 8005440:	460b      	mov	r3, r1
 8005442:	4b0d      	ldr	r3, [pc, #52]	@ (8005478 <UART_SetConfig+0x4e4>)
 8005444:	fba3 1302 	umull	r1, r3, r3, r2
 8005448:	095b      	lsrs	r3, r3, #5
 800544a:	2164      	movs	r1, #100	@ 0x64
 800544c:	fb01 f303 	mul.w	r3, r1, r3
 8005450:	1ad3      	subs	r3, r2, r3
 8005452:	011b      	lsls	r3, r3, #4
 8005454:	3332      	adds	r3, #50	@ 0x32
 8005456:	4a08      	ldr	r2, [pc, #32]	@ (8005478 <UART_SetConfig+0x4e4>)
 8005458:	fba2 2303 	umull	r2, r3, r2, r3
 800545c:	095b      	lsrs	r3, r3, #5
 800545e:	f003 020f 	and.w	r2, r3, #15
 8005462:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4422      	add	r2, r4
 800546a:	609a      	str	r2, [r3, #8]
}
 800546c:	bf00      	nop
 800546e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005472:	46bd      	mov	sp, r7
 8005474:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005478:	51eb851f 	.word	0x51eb851f

0800547c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800547c:	b084      	sub	sp, #16
 800547e:	b580      	push	{r7, lr}
 8005480:	b084      	sub	sp, #16
 8005482:	af00      	add	r7, sp, #0
 8005484:	6078      	str	r0, [r7, #4]
 8005486:	f107 001c 	add.w	r0, r7, #28
 800548a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800548e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8005492:	2b01      	cmp	r3, #1
 8005494:	d123      	bne.n	80054de <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800549a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	68db      	ldr	r3, [r3, #12]
 80054a6:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80054aa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80054ae:	687a      	ldr	r2, [r7, #4]
 80054b0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	68db      	ldr	r3, [r3, #12]
 80054b6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80054be:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80054c2:	2b01      	cmp	r3, #1
 80054c4:	d105      	bne.n	80054d2 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	68db      	ldr	r3, [r3, #12]
 80054ca:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80054d2:	6878      	ldr	r0, [r7, #4]
 80054d4:	f000 faa0 	bl	8005a18 <USB_CoreReset>
 80054d8:	4603      	mov	r3, r0
 80054da:	73fb      	strb	r3, [r7, #15]
 80054dc:	e01b      	b.n	8005516 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	68db      	ldr	r3, [r3, #12]
 80054e2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80054ea:	6878      	ldr	r0, [r7, #4]
 80054ec:	f000 fa94 	bl	8005a18 <USB_CoreReset>
 80054f0:	4603      	mov	r3, r0
 80054f2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80054f4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d106      	bne.n	800550a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005500:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	639a      	str	r2, [r3, #56]	@ 0x38
 8005508:	e005      	b.n	8005516 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800550e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005516:	7fbb      	ldrb	r3, [r7, #30]
 8005518:	2b01      	cmp	r3, #1
 800551a:	d10b      	bne.n	8005534 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	689b      	ldr	r3, [r3, #8]
 8005520:	f043 0206 	orr.w	r2, r3, #6
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	689b      	ldr	r3, [r3, #8]
 800552c:	f043 0220 	orr.w	r2, r3, #32
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005534:	7bfb      	ldrb	r3, [r7, #15]
}
 8005536:	4618      	mov	r0, r3
 8005538:	3710      	adds	r7, #16
 800553a:	46bd      	mov	sp, r7
 800553c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005540:	b004      	add	sp, #16
 8005542:	4770      	bx	lr

08005544 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005544:	b480      	push	{r7}
 8005546:	b083      	sub	sp, #12
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	689b      	ldr	r3, [r3, #8]
 8005550:	f023 0201 	bic.w	r2, r3, #1
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005558:	2300      	movs	r3, #0
}
 800555a:	4618      	mov	r0, r3
 800555c:	370c      	adds	r7, #12
 800555e:	46bd      	mov	sp, r7
 8005560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005564:	4770      	bx	lr

08005566 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005566:	b580      	push	{r7, lr}
 8005568:	b084      	sub	sp, #16
 800556a:	af00      	add	r7, sp, #0
 800556c:	6078      	str	r0, [r7, #4]
 800556e:	460b      	mov	r3, r1
 8005570:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005572:	2300      	movs	r3, #0
 8005574:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	68db      	ldr	r3, [r3, #12]
 800557a:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005582:	78fb      	ldrb	r3, [r7, #3]
 8005584:	2b01      	cmp	r3, #1
 8005586:	d115      	bne.n	80055b4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	68db      	ldr	r3, [r3, #12]
 800558c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005594:	200a      	movs	r0, #10
 8005596:	f7fc fb91 	bl	8001cbc <HAL_Delay>
      ms += 10U;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	330a      	adds	r3, #10
 800559e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80055a0:	6878      	ldr	r0, [r7, #4]
 80055a2:	f000 fa2b 	bl	80059fc <USB_GetMode>
 80055a6:	4603      	mov	r3, r0
 80055a8:	2b01      	cmp	r3, #1
 80055aa:	d01e      	beq.n	80055ea <USB_SetCurrentMode+0x84>
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	2bc7      	cmp	r3, #199	@ 0xc7
 80055b0:	d9f0      	bls.n	8005594 <USB_SetCurrentMode+0x2e>
 80055b2:	e01a      	b.n	80055ea <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80055b4:	78fb      	ldrb	r3, [r7, #3]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d115      	bne.n	80055e6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	68db      	ldr	r3, [r3, #12]
 80055be:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80055c6:	200a      	movs	r0, #10
 80055c8:	f7fc fb78 	bl	8001cbc <HAL_Delay>
      ms += 10U;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	330a      	adds	r3, #10
 80055d0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80055d2:	6878      	ldr	r0, [r7, #4]
 80055d4:	f000 fa12 	bl	80059fc <USB_GetMode>
 80055d8:	4603      	mov	r3, r0
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d005      	beq.n	80055ea <USB_SetCurrentMode+0x84>
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	2bc7      	cmp	r3, #199	@ 0xc7
 80055e2:	d9f0      	bls.n	80055c6 <USB_SetCurrentMode+0x60>
 80055e4:	e001      	b.n	80055ea <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80055e6:	2301      	movs	r3, #1
 80055e8:	e005      	b.n	80055f6 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	2bc8      	cmp	r3, #200	@ 0xc8
 80055ee:	d101      	bne.n	80055f4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80055f0:	2301      	movs	r3, #1
 80055f2:	e000      	b.n	80055f6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80055f4:	2300      	movs	r3, #0
}
 80055f6:	4618      	mov	r0, r3
 80055f8:	3710      	adds	r7, #16
 80055fa:	46bd      	mov	sp, r7
 80055fc:	bd80      	pop	{r7, pc}
	...

08005600 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005600:	b084      	sub	sp, #16
 8005602:	b580      	push	{r7, lr}
 8005604:	b086      	sub	sp, #24
 8005606:	af00      	add	r7, sp, #0
 8005608:	6078      	str	r0, [r7, #4]
 800560a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800560e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005612:	2300      	movs	r3, #0
 8005614:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800561a:	2300      	movs	r3, #0
 800561c:	613b      	str	r3, [r7, #16]
 800561e:	e009      	b.n	8005634 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005620:	687a      	ldr	r2, [r7, #4]
 8005622:	693b      	ldr	r3, [r7, #16]
 8005624:	3340      	adds	r3, #64	@ 0x40
 8005626:	009b      	lsls	r3, r3, #2
 8005628:	4413      	add	r3, r2
 800562a:	2200      	movs	r2, #0
 800562c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800562e:	693b      	ldr	r3, [r7, #16]
 8005630:	3301      	adds	r3, #1
 8005632:	613b      	str	r3, [r7, #16]
 8005634:	693b      	ldr	r3, [r7, #16]
 8005636:	2b0e      	cmp	r3, #14
 8005638:	d9f2      	bls.n	8005620 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800563a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800563e:	2b00      	cmp	r3, #0
 8005640:	d11c      	bne.n	800567c <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005648:	685b      	ldr	r3, [r3, #4]
 800564a:	68fa      	ldr	r2, [r7, #12]
 800564c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005650:	f043 0302 	orr.w	r3, r3, #2
 8005654:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800565a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005666:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005672:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	639a      	str	r2, [r3, #56]	@ 0x38
 800567a:	e00b      	b.n	8005694 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005680:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800568c:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800569a:	461a      	mov	r2, r3
 800569c:	2300      	movs	r3, #0
 800569e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80056a0:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80056a4:	2b01      	cmp	r3, #1
 80056a6:	d10d      	bne.n	80056c4 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80056a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d104      	bne.n	80056ba <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80056b0:	2100      	movs	r1, #0
 80056b2:	6878      	ldr	r0, [r7, #4]
 80056b4:	f000 f968 	bl	8005988 <USB_SetDevSpeed>
 80056b8:	e008      	b.n	80056cc <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80056ba:	2101      	movs	r1, #1
 80056bc:	6878      	ldr	r0, [r7, #4]
 80056be:	f000 f963 	bl	8005988 <USB_SetDevSpeed>
 80056c2:	e003      	b.n	80056cc <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80056c4:	2103      	movs	r1, #3
 80056c6:	6878      	ldr	r0, [r7, #4]
 80056c8:	f000 f95e 	bl	8005988 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80056cc:	2110      	movs	r1, #16
 80056ce:	6878      	ldr	r0, [r7, #4]
 80056d0:	f000 f8fa 	bl	80058c8 <USB_FlushTxFifo>
 80056d4:	4603      	mov	r3, r0
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d001      	beq.n	80056de <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 80056da:	2301      	movs	r3, #1
 80056dc:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80056de:	6878      	ldr	r0, [r7, #4]
 80056e0:	f000 f924 	bl	800592c <USB_FlushRxFifo>
 80056e4:	4603      	mov	r3, r0
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d001      	beq.n	80056ee <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 80056ea:	2301      	movs	r3, #1
 80056ec:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80056f4:	461a      	mov	r2, r3
 80056f6:	2300      	movs	r3, #0
 80056f8:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005700:	461a      	mov	r2, r3
 8005702:	2300      	movs	r3, #0
 8005704:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800570c:	461a      	mov	r2, r3
 800570e:	2300      	movs	r3, #0
 8005710:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005712:	2300      	movs	r3, #0
 8005714:	613b      	str	r3, [r7, #16]
 8005716:	e043      	b.n	80057a0 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005718:	693b      	ldr	r3, [r7, #16]
 800571a:	015a      	lsls	r2, r3, #5
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	4413      	add	r3, r2
 8005720:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800572a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800572e:	d118      	bne.n	8005762 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8005730:	693b      	ldr	r3, [r7, #16]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d10a      	bne.n	800574c <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005736:	693b      	ldr	r3, [r7, #16]
 8005738:	015a      	lsls	r2, r3, #5
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	4413      	add	r3, r2
 800573e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005742:	461a      	mov	r2, r3
 8005744:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005748:	6013      	str	r3, [r2, #0]
 800574a:	e013      	b.n	8005774 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800574c:	693b      	ldr	r3, [r7, #16]
 800574e:	015a      	lsls	r2, r3, #5
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	4413      	add	r3, r2
 8005754:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005758:	461a      	mov	r2, r3
 800575a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800575e:	6013      	str	r3, [r2, #0]
 8005760:	e008      	b.n	8005774 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005762:	693b      	ldr	r3, [r7, #16]
 8005764:	015a      	lsls	r2, r3, #5
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	4413      	add	r3, r2
 800576a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800576e:	461a      	mov	r2, r3
 8005770:	2300      	movs	r3, #0
 8005772:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005774:	693b      	ldr	r3, [r7, #16]
 8005776:	015a      	lsls	r2, r3, #5
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	4413      	add	r3, r2
 800577c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005780:	461a      	mov	r2, r3
 8005782:	2300      	movs	r3, #0
 8005784:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005786:	693b      	ldr	r3, [r7, #16]
 8005788:	015a      	lsls	r2, r3, #5
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	4413      	add	r3, r2
 800578e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005792:	461a      	mov	r2, r3
 8005794:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005798:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800579a:	693b      	ldr	r3, [r7, #16]
 800579c:	3301      	adds	r3, #1
 800579e:	613b      	str	r3, [r7, #16]
 80057a0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80057a4:	461a      	mov	r2, r3
 80057a6:	693b      	ldr	r3, [r7, #16]
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d3b5      	bcc.n	8005718 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80057ac:	2300      	movs	r3, #0
 80057ae:	613b      	str	r3, [r7, #16]
 80057b0:	e043      	b.n	800583a <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80057b2:	693b      	ldr	r3, [r7, #16]
 80057b4:	015a      	lsls	r2, r3, #5
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	4413      	add	r3, r2
 80057ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80057c4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80057c8:	d118      	bne.n	80057fc <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 80057ca:	693b      	ldr	r3, [r7, #16]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d10a      	bne.n	80057e6 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80057d0:	693b      	ldr	r3, [r7, #16]
 80057d2:	015a      	lsls	r2, r3, #5
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	4413      	add	r3, r2
 80057d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057dc:	461a      	mov	r2, r3
 80057de:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80057e2:	6013      	str	r3, [r2, #0]
 80057e4:	e013      	b.n	800580e <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80057e6:	693b      	ldr	r3, [r7, #16]
 80057e8:	015a      	lsls	r2, r3, #5
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	4413      	add	r3, r2
 80057ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057f2:	461a      	mov	r2, r3
 80057f4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80057f8:	6013      	str	r3, [r2, #0]
 80057fa:	e008      	b.n	800580e <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80057fc:	693b      	ldr	r3, [r7, #16]
 80057fe:	015a      	lsls	r2, r3, #5
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	4413      	add	r3, r2
 8005804:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005808:	461a      	mov	r2, r3
 800580a:	2300      	movs	r3, #0
 800580c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800580e:	693b      	ldr	r3, [r7, #16]
 8005810:	015a      	lsls	r2, r3, #5
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	4413      	add	r3, r2
 8005816:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800581a:	461a      	mov	r2, r3
 800581c:	2300      	movs	r3, #0
 800581e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005820:	693b      	ldr	r3, [r7, #16]
 8005822:	015a      	lsls	r2, r3, #5
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	4413      	add	r3, r2
 8005828:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800582c:	461a      	mov	r2, r3
 800582e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005832:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005834:	693b      	ldr	r3, [r7, #16]
 8005836:	3301      	adds	r3, #1
 8005838:	613b      	str	r3, [r7, #16]
 800583a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800583e:	461a      	mov	r2, r3
 8005840:	693b      	ldr	r3, [r7, #16]
 8005842:	4293      	cmp	r3, r2
 8005844:	d3b5      	bcc.n	80057b2 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800584c:	691b      	ldr	r3, [r3, #16]
 800584e:	68fa      	ldr	r2, [r7, #12]
 8005850:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005854:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005858:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2200      	movs	r2, #0
 800585e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8005866:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005868:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800586c:	2b00      	cmp	r3, #0
 800586e:	d105      	bne.n	800587c <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	699b      	ldr	r3, [r3, #24]
 8005874:	f043 0210 	orr.w	r2, r3, #16
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	699a      	ldr	r2, [r3, #24]
 8005880:	4b10      	ldr	r3, [pc, #64]	@ (80058c4 <USB_DevInit+0x2c4>)
 8005882:	4313      	orrs	r3, r2
 8005884:	687a      	ldr	r2, [r7, #4]
 8005886:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005888:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800588c:	2b00      	cmp	r3, #0
 800588e:	d005      	beq.n	800589c <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	699b      	ldr	r3, [r3, #24]
 8005894:	f043 0208 	orr.w	r2, r3, #8
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800589c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80058a0:	2b01      	cmp	r3, #1
 80058a2:	d107      	bne.n	80058b4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	699b      	ldr	r3, [r3, #24]
 80058a8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80058ac:	f043 0304 	orr.w	r3, r3, #4
 80058b0:	687a      	ldr	r2, [r7, #4]
 80058b2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80058b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80058b6:	4618      	mov	r0, r3
 80058b8:	3718      	adds	r7, #24
 80058ba:	46bd      	mov	sp, r7
 80058bc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80058c0:	b004      	add	sp, #16
 80058c2:	4770      	bx	lr
 80058c4:	803c3800 	.word	0x803c3800

080058c8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80058c8:	b480      	push	{r7}
 80058ca:	b085      	sub	sp, #20
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
 80058d0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80058d2:	2300      	movs	r3, #0
 80058d4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	3301      	adds	r3, #1
 80058da:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80058e2:	d901      	bls.n	80058e8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80058e4:	2303      	movs	r3, #3
 80058e6:	e01b      	b.n	8005920 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	691b      	ldr	r3, [r3, #16]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	daf2      	bge.n	80058d6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80058f0:	2300      	movs	r3, #0
 80058f2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	019b      	lsls	r3, r3, #6
 80058f8:	f043 0220 	orr.w	r2, r3, #32
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	3301      	adds	r3, #1
 8005904:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800590c:	d901      	bls.n	8005912 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800590e:	2303      	movs	r3, #3
 8005910:	e006      	b.n	8005920 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	691b      	ldr	r3, [r3, #16]
 8005916:	f003 0320 	and.w	r3, r3, #32
 800591a:	2b20      	cmp	r3, #32
 800591c:	d0f0      	beq.n	8005900 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800591e:	2300      	movs	r3, #0
}
 8005920:	4618      	mov	r0, r3
 8005922:	3714      	adds	r7, #20
 8005924:	46bd      	mov	sp, r7
 8005926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592a:	4770      	bx	lr

0800592c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800592c:	b480      	push	{r7}
 800592e:	b085      	sub	sp, #20
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005934:	2300      	movs	r3, #0
 8005936:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	3301      	adds	r3, #1
 800593c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005944:	d901      	bls.n	800594a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005946:	2303      	movs	r3, #3
 8005948:	e018      	b.n	800597c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	691b      	ldr	r3, [r3, #16]
 800594e:	2b00      	cmp	r3, #0
 8005950:	daf2      	bge.n	8005938 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005952:	2300      	movs	r3, #0
 8005954:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2210      	movs	r2, #16
 800595a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	3301      	adds	r3, #1
 8005960:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005968:	d901      	bls.n	800596e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800596a:	2303      	movs	r3, #3
 800596c:	e006      	b.n	800597c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	691b      	ldr	r3, [r3, #16]
 8005972:	f003 0310 	and.w	r3, r3, #16
 8005976:	2b10      	cmp	r3, #16
 8005978:	d0f0      	beq.n	800595c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800597a:	2300      	movs	r3, #0
}
 800597c:	4618      	mov	r0, r3
 800597e:	3714      	adds	r7, #20
 8005980:	46bd      	mov	sp, r7
 8005982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005986:	4770      	bx	lr

08005988 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005988:	b480      	push	{r7}
 800598a:	b085      	sub	sp, #20
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
 8005990:	460b      	mov	r3, r1
 8005992:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800599e:	681a      	ldr	r2, [r3, #0]
 80059a0:	78fb      	ldrb	r3, [r7, #3]
 80059a2:	68f9      	ldr	r1, [r7, #12]
 80059a4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80059a8:	4313      	orrs	r3, r2
 80059aa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80059ac:	2300      	movs	r3, #0
}
 80059ae:	4618      	mov	r0, r3
 80059b0:	3714      	adds	r7, #20
 80059b2:	46bd      	mov	sp, r7
 80059b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b8:	4770      	bx	lr

080059ba <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80059ba:	b480      	push	{r7}
 80059bc:	b085      	sub	sp, #20
 80059be:	af00      	add	r7, sp, #0
 80059c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	68fa      	ldr	r2, [r7, #12]
 80059d0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80059d4:	f023 0303 	bic.w	r3, r3, #3
 80059d8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80059e0:	685b      	ldr	r3, [r3, #4]
 80059e2:	68fa      	ldr	r2, [r7, #12]
 80059e4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80059e8:	f043 0302 	orr.w	r3, r3, #2
 80059ec:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80059ee:	2300      	movs	r3, #0
}
 80059f0:	4618      	mov	r0, r3
 80059f2:	3714      	adds	r7, #20
 80059f4:	46bd      	mov	sp, r7
 80059f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fa:	4770      	bx	lr

080059fc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80059fc:	b480      	push	{r7}
 80059fe:	b083      	sub	sp, #12
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	695b      	ldr	r3, [r3, #20]
 8005a08:	f003 0301 	and.w	r3, r3, #1
}
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	370c      	adds	r7, #12
 8005a10:	46bd      	mov	sp, r7
 8005a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a16:	4770      	bx	lr

08005a18 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005a18:	b480      	push	{r7}
 8005a1a:	b085      	sub	sp, #20
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005a20:	2300      	movs	r3, #0
 8005a22:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	3301      	adds	r3, #1
 8005a28:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005a30:	d901      	bls.n	8005a36 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005a32:	2303      	movs	r3, #3
 8005a34:	e01b      	b.n	8005a6e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	691b      	ldr	r3, [r3, #16]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	daf2      	bge.n	8005a24 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005a3e:	2300      	movs	r3, #0
 8005a40:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	691b      	ldr	r3, [r3, #16]
 8005a46:	f043 0201 	orr.w	r2, r3, #1
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	3301      	adds	r3, #1
 8005a52:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005a5a:	d901      	bls.n	8005a60 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005a5c:	2303      	movs	r3, #3
 8005a5e:	e006      	b.n	8005a6e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	691b      	ldr	r3, [r3, #16]
 8005a64:	f003 0301 	and.w	r3, r3, #1
 8005a68:	2b01      	cmp	r3, #1
 8005a6a:	d0f0      	beq.n	8005a4e <USB_CoreReset+0x36>

  return HAL_OK;
 8005a6c:	2300      	movs	r3, #0
}
 8005a6e:	4618      	mov	r0, r3
 8005a70:	3714      	adds	r7, #20
 8005a72:	46bd      	mov	sp, r7
 8005a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a78:	4770      	bx	lr
	...

08005a7c <_strtol_l.constprop.0>:
 8005a7c:	2b24      	cmp	r3, #36	@ 0x24
 8005a7e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a82:	4686      	mov	lr, r0
 8005a84:	4690      	mov	r8, r2
 8005a86:	d801      	bhi.n	8005a8c <_strtol_l.constprop.0+0x10>
 8005a88:	2b01      	cmp	r3, #1
 8005a8a:	d106      	bne.n	8005a9a <_strtol_l.constprop.0+0x1e>
 8005a8c:	f000 fb48 	bl	8006120 <__errno>
 8005a90:	2316      	movs	r3, #22
 8005a92:	6003      	str	r3, [r0, #0]
 8005a94:	2000      	movs	r0, #0
 8005a96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a9a:	4834      	ldr	r0, [pc, #208]	@ (8005b6c <_strtol_l.constprop.0+0xf0>)
 8005a9c:	460d      	mov	r5, r1
 8005a9e:	462a      	mov	r2, r5
 8005aa0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005aa4:	5d06      	ldrb	r6, [r0, r4]
 8005aa6:	f016 0608 	ands.w	r6, r6, #8
 8005aaa:	d1f8      	bne.n	8005a9e <_strtol_l.constprop.0+0x22>
 8005aac:	2c2d      	cmp	r4, #45	@ 0x2d
 8005aae:	d12d      	bne.n	8005b0c <_strtol_l.constprop.0+0x90>
 8005ab0:	782c      	ldrb	r4, [r5, #0]
 8005ab2:	2601      	movs	r6, #1
 8005ab4:	1c95      	adds	r5, r2, #2
 8005ab6:	f033 0210 	bics.w	r2, r3, #16
 8005aba:	d109      	bne.n	8005ad0 <_strtol_l.constprop.0+0x54>
 8005abc:	2c30      	cmp	r4, #48	@ 0x30
 8005abe:	d12a      	bne.n	8005b16 <_strtol_l.constprop.0+0x9a>
 8005ac0:	782a      	ldrb	r2, [r5, #0]
 8005ac2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8005ac6:	2a58      	cmp	r2, #88	@ 0x58
 8005ac8:	d125      	bne.n	8005b16 <_strtol_l.constprop.0+0x9a>
 8005aca:	786c      	ldrb	r4, [r5, #1]
 8005acc:	2310      	movs	r3, #16
 8005ace:	3502      	adds	r5, #2
 8005ad0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8005ad4:	f10c 3cff 	add.w	ip, ip, #4294967295
 8005ad8:	2200      	movs	r2, #0
 8005ada:	fbbc f9f3 	udiv	r9, ip, r3
 8005ade:	4610      	mov	r0, r2
 8005ae0:	fb03 ca19 	mls	sl, r3, r9, ip
 8005ae4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8005ae8:	2f09      	cmp	r7, #9
 8005aea:	d81b      	bhi.n	8005b24 <_strtol_l.constprop.0+0xa8>
 8005aec:	463c      	mov	r4, r7
 8005aee:	42a3      	cmp	r3, r4
 8005af0:	dd27      	ble.n	8005b42 <_strtol_l.constprop.0+0xc6>
 8005af2:	1c57      	adds	r7, r2, #1
 8005af4:	d007      	beq.n	8005b06 <_strtol_l.constprop.0+0x8a>
 8005af6:	4581      	cmp	r9, r0
 8005af8:	d320      	bcc.n	8005b3c <_strtol_l.constprop.0+0xc0>
 8005afa:	d101      	bne.n	8005b00 <_strtol_l.constprop.0+0x84>
 8005afc:	45a2      	cmp	sl, r4
 8005afe:	db1d      	blt.n	8005b3c <_strtol_l.constprop.0+0xc0>
 8005b00:	fb00 4003 	mla	r0, r0, r3, r4
 8005b04:	2201      	movs	r2, #1
 8005b06:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005b0a:	e7eb      	b.n	8005ae4 <_strtol_l.constprop.0+0x68>
 8005b0c:	2c2b      	cmp	r4, #43	@ 0x2b
 8005b0e:	bf04      	itt	eq
 8005b10:	782c      	ldrbeq	r4, [r5, #0]
 8005b12:	1c95      	addeq	r5, r2, #2
 8005b14:	e7cf      	b.n	8005ab6 <_strtol_l.constprop.0+0x3a>
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d1da      	bne.n	8005ad0 <_strtol_l.constprop.0+0x54>
 8005b1a:	2c30      	cmp	r4, #48	@ 0x30
 8005b1c:	bf0c      	ite	eq
 8005b1e:	2308      	moveq	r3, #8
 8005b20:	230a      	movne	r3, #10
 8005b22:	e7d5      	b.n	8005ad0 <_strtol_l.constprop.0+0x54>
 8005b24:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8005b28:	2f19      	cmp	r7, #25
 8005b2a:	d801      	bhi.n	8005b30 <_strtol_l.constprop.0+0xb4>
 8005b2c:	3c37      	subs	r4, #55	@ 0x37
 8005b2e:	e7de      	b.n	8005aee <_strtol_l.constprop.0+0x72>
 8005b30:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8005b34:	2f19      	cmp	r7, #25
 8005b36:	d804      	bhi.n	8005b42 <_strtol_l.constprop.0+0xc6>
 8005b38:	3c57      	subs	r4, #87	@ 0x57
 8005b3a:	e7d8      	b.n	8005aee <_strtol_l.constprop.0+0x72>
 8005b3c:	f04f 32ff 	mov.w	r2, #4294967295
 8005b40:	e7e1      	b.n	8005b06 <_strtol_l.constprop.0+0x8a>
 8005b42:	1c53      	adds	r3, r2, #1
 8005b44:	d108      	bne.n	8005b58 <_strtol_l.constprop.0+0xdc>
 8005b46:	2322      	movs	r3, #34	@ 0x22
 8005b48:	f8ce 3000 	str.w	r3, [lr]
 8005b4c:	4660      	mov	r0, ip
 8005b4e:	f1b8 0f00 	cmp.w	r8, #0
 8005b52:	d0a0      	beq.n	8005a96 <_strtol_l.constprop.0+0x1a>
 8005b54:	1e69      	subs	r1, r5, #1
 8005b56:	e006      	b.n	8005b66 <_strtol_l.constprop.0+0xea>
 8005b58:	b106      	cbz	r6, 8005b5c <_strtol_l.constprop.0+0xe0>
 8005b5a:	4240      	negs	r0, r0
 8005b5c:	f1b8 0f00 	cmp.w	r8, #0
 8005b60:	d099      	beq.n	8005a96 <_strtol_l.constprop.0+0x1a>
 8005b62:	2a00      	cmp	r2, #0
 8005b64:	d1f6      	bne.n	8005b54 <_strtol_l.constprop.0+0xd8>
 8005b66:	f8c8 1000 	str.w	r1, [r8]
 8005b6a:	e794      	b.n	8005a96 <_strtol_l.constprop.0+0x1a>
 8005b6c:	08006fad 	.word	0x08006fad

08005b70 <strtol>:
 8005b70:	4613      	mov	r3, r2
 8005b72:	460a      	mov	r2, r1
 8005b74:	4601      	mov	r1, r0
 8005b76:	4802      	ldr	r0, [pc, #8]	@ (8005b80 <strtol+0x10>)
 8005b78:	6800      	ldr	r0, [r0, #0]
 8005b7a:	f7ff bf7f 	b.w	8005a7c <_strtol_l.constprop.0>
 8005b7e:	bf00      	nop
 8005b80:	2000005c 	.word	0x2000005c

08005b84 <std>:
 8005b84:	2300      	movs	r3, #0
 8005b86:	b510      	push	{r4, lr}
 8005b88:	4604      	mov	r4, r0
 8005b8a:	e9c0 3300 	strd	r3, r3, [r0]
 8005b8e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005b92:	6083      	str	r3, [r0, #8]
 8005b94:	8181      	strh	r1, [r0, #12]
 8005b96:	6643      	str	r3, [r0, #100]	@ 0x64
 8005b98:	81c2      	strh	r2, [r0, #14]
 8005b9a:	6183      	str	r3, [r0, #24]
 8005b9c:	4619      	mov	r1, r3
 8005b9e:	2208      	movs	r2, #8
 8005ba0:	305c      	adds	r0, #92	@ 0x5c
 8005ba2:	f000 fa01 	bl	8005fa8 <memset>
 8005ba6:	4b0d      	ldr	r3, [pc, #52]	@ (8005bdc <std+0x58>)
 8005ba8:	6263      	str	r3, [r4, #36]	@ 0x24
 8005baa:	4b0d      	ldr	r3, [pc, #52]	@ (8005be0 <std+0x5c>)
 8005bac:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005bae:	4b0d      	ldr	r3, [pc, #52]	@ (8005be4 <std+0x60>)
 8005bb0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005bb2:	4b0d      	ldr	r3, [pc, #52]	@ (8005be8 <std+0x64>)
 8005bb4:	6323      	str	r3, [r4, #48]	@ 0x30
 8005bb6:	4b0d      	ldr	r3, [pc, #52]	@ (8005bec <std+0x68>)
 8005bb8:	6224      	str	r4, [r4, #32]
 8005bba:	429c      	cmp	r4, r3
 8005bbc:	d006      	beq.n	8005bcc <std+0x48>
 8005bbe:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005bc2:	4294      	cmp	r4, r2
 8005bc4:	d002      	beq.n	8005bcc <std+0x48>
 8005bc6:	33d0      	adds	r3, #208	@ 0xd0
 8005bc8:	429c      	cmp	r4, r3
 8005bca:	d105      	bne.n	8005bd8 <std+0x54>
 8005bcc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005bd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005bd4:	f000 bace 	b.w	8006174 <__retarget_lock_init_recursive>
 8005bd8:	bd10      	pop	{r4, pc}
 8005bda:	bf00      	nop
 8005bdc:	08005df9 	.word	0x08005df9
 8005be0:	08005e1b 	.word	0x08005e1b
 8005be4:	08005e53 	.word	0x08005e53
 8005be8:	08005e77 	.word	0x08005e77
 8005bec:	20000a80 	.word	0x20000a80

08005bf0 <stdio_exit_handler>:
 8005bf0:	4a02      	ldr	r2, [pc, #8]	@ (8005bfc <stdio_exit_handler+0xc>)
 8005bf2:	4903      	ldr	r1, [pc, #12]	@ (8005c00 <stdio_exit_handler+0x10>)
 8005bf4:	4803      	ldr	r0, [pc, #12]	@ (8005c04 <stdio_exit_handler+0x14>)
 8005bf6:	f000 b869 	b.w	8005ccc <_fwalk_sglue>
 8005bfa:	bf00      	nop
 8005bfc:	20000050 	.word	0x20000050
 8005c00:	08006a61 	.word	0x08006a61
 8005c04:	20000060 	.word	0x20000060

08005c08 <cleanup_stdio>:
 8005c08:	6841      	ldr	r1, [r0, #4]
 8005c0a:	4b0c      	ldr	r3, [pc, #48]	@ (8005c3c <cleanup_stdio+0x34>)
 8005c0c:	4299      	cmp	r1, r3
 8005c0e:	b510      	push	{r4, lr}
 8005c10:	4604      	mov	r4, r0
 8005c12:	d001      	beq.n	8005c18 <cleanup_stdio+0x10>
 8005c14:	f000 ff24 	bl	8006a60 <_fflush_r>
 8005c18:	68a1      	ldr	r1, [r4, #8]
 8005c1a:	4b09      	ldr	r3, [pc, #36]	@ (8005c40 <cleanup_stdio+0x38>)
 8005c1c:	4299      	cmp	r1, r3
 8005c1e:	d002      	beq.n	8005c26 <cleanup_stdio+0x1e>
 8005c20:	4620      	mov	r0, r4
 8005c22:	f000 ff1d 	bl	8006a60 <_fflush_r>
 8005c26:	68e1      	ldr	r1, [r4, #12]
 8005c28:	4b06      	ldr	r3, [pc, #24]	@ (8005c44 <cleanup_stdio+0x3c>)
 8005c2a:	4299      	cmp	r1, r3
 8005c2c:	d004      	beq.n	8005c38 <cleanup_stdio+0x30>
 8005c2e:	4620      	mov	r0, r4
 8005c30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c34:	f000 bf14 	b.w	8006a60 <_fflush_r>
 8005c38:	bd10      	pop	{r4, pc}
 8005c3a:	bf00      	nop
 8005c3c:	20000a80 	.word	0x20000a80
 8005c40:	20000ae8 	.word	0x20000ae8
 8005c44:	20000b50 	.word	0x20000b50

08005c48 <global_stdio_init.part.0>:
 8005c48:	b510      	push	{r4, lr}
 8005c4a:	4b0b      	ldr	r3, [pc, #44]	@ (8005c78 <global_stdio_init.part.0+0x30>)
 8005c4c:	4c0b      	ldr	r4, [pc, #44]	@ (8005c7c <global_stdio_init.part.0+0x34>)
 8005c4e:	4a0c      	ldr	r2, [pc, #48]	@ (8005c80 <global_stdio_init.part.0+0x38>)
 8005c50:	601a      	str	r2, [r3, #0]
 8005c52:	4620      	mov	r0, r4
 8005c54:	2200      	movs	r2, #0
 8005c56:	2104      	movs	r1, #4
 8005c58:	f7ff ff94 	bl	8005b84 <std>
 8005c5c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005c60:	2201      	movs	r2, #1
 8005c62:	2109      	movs	r1, #9
 8005c64:	f7ff ff8e 	bl	8005b84 <std>
 8005c68:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005c6c:	2202      	movs	r2, #2
 8005c6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c72:	2112      	movs	r1, #18
 8005c74:	f7ff bf86 	b.w	8005b84 <std>
 8005c78:	20000bb8 	.word	0x20000bb8
 8005c7c:	20000a80 	.word	0x20000a80
 8005c80:	08005bf1 	.word	0x08005bf1

08005c84 <__sfp_lock_acquire>:
 8005c84:	4801      	ldr	r0, [pc, #4]	@ (8005c8c <__sfp_lock_acquire+0x8>)
 8005c86:	f000 ba76 	b.w	8006176 <__retarget_lock_acquire_recursive>
 8005c8a:	bf00      	nop
 8005c8c:	20000bc1 	.word	0x20000bc1

08005c90 <__sfp_lock_release>:
 8005c90:	4801      	ldr	r0, [pc, #4]	@ (8005c98 <__sfp_lock_release+0x8>)
 8005c92:	f000 ba71 	b.w	8006178 <__retarget_lock_release_recursive>
 8005c96:	bf00      	nop
 8005c98:	20000bc1 	.word	0x20000bc1

08005c9c <__sinit>:
 8005c9c:	b510      	push	{r4, lr}
 8005c9e:	4604      	mov	r4, r0
 8005ca0:	f7ff fff0 	bl	8005c84 <__sfp_lock_acquire>
 8005ca4:	6a23      	ldr	r3, [r4, #32]
 8005ca6:	b11b      	cbz	r3, 8005cb0 <__sinit+0x14>
 8005ca8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005cac:	f7ff bff0 	b.w	8005c90 <__sfp_lock_release>
 8005cb0:	4b04      	ldr	r3, [pc, #16]	@ (8005cc4 <__sinit+0x28>)
 8005cb2:	6223      	str	r3, [r4, #32]
 8005cb4:	4b04      	ldr	r3, [pc, #16]	@ (8005cc8 <__sinit+0x2c>)
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d1f5      	bne.n	8005ca8 <__sinit+0xc>
 8005cbc:	f7ff ffc4 	bl	8005c48 <global_stdio_init.part.0>
 8005cc0:	e7f2      	b.n	8005ca8 <__sinit+0xc>
 8005cc2:	bf00      	nop
 8005cc4:	08005c09 	.word	0x08005c09
 8005cc8:	20000bb8 	.word	0x20000bb8

08005ccc <_fwalk_sglue>:
 8005ccc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005cd0:	4607      	mov	r7, r0
 8005cd2:	4688      	mov	r8, r1
 8005cd4:	4614      	mov	r4, r2
 8005cd6:	2600      	movs	r6, #0
 8005cd8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005cdc:	f1b9 0901 	subs.w	r9, r9, #1
 8005ce0:	d505      	bpl.n	8005cee <_fwalk_sglue+0x22>
 8005ce2:	6824      	ldr	r4, [r4, #0]
 8005ce4:	2c00      	cmp	r4, #0
 8005ce6:	d1f7      	bne.n	8005cd8 <_fwalk_sglue+0xc>
 8005ce8:	4630      	mov	r0, r6
 8005cea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005cee:	89ab      	ldrh	r3, [r5, #12]
 8005cf0:	2b01      	cmp	r3, #1
 8005cf2:	d907      	bls.n	8005d04 <_fwalk_sglue+0x38>
 8005cf4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005cf8:	3301      	adds	r3, #1
 8005cfa:	d003      	beq.n	8005d04 <_fwalk_sglue+0x38>
 8005cfc:	4629      	mov	r1, r5
 8005cfe:	4638      	mov	r0, r7
 8005d00:	47c0      	blx	r8
 8005d02:	4306      	orrs	r6, r0
 8005d04:	3568      	adds	r5, #104	@ 0x68
 8005d06:	e7e9      	b.n	8005cdc <_fwalk_sglue+0x10>

08005d08 <iprintf>:
 8005d08:	b40f      	push	{r0, r1, r2, r3}
 8005d0a:	b507      	push	{r0, r1, r2, lr}
 8005d0c:	4906      	ldr	r1, [pc, #24]	@ (8005d28 <iprintf+0x20>)
 8005d0e:	ab04      	add	r3, sp, #16
 8005d10:	6808      	ldr	r0, [r1, #0]
 8005d12:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d16:	6881      	ldr	r1, [r0, #8]
 8005d18:	9301      	str	r3, [sp, #4]
 8005d1a:	f000 fb77 	bl	800640c <_vfiprintf_r>
 8005d1e:	b003      	add	sp, #12
 8005d20:	f85d eb04 	ldr.w	lr, [sp], #4
 8005d24:	b004      	add	sp, #16
 8005d26:	4770      	bx	lr
 8005d28:	2000005c 	.word	0x2000005c

08005d2c <putchar>:
 8005d2c:	4b02      	ldr	r3, [pc, #8]	@ (8005d38 <putchar+0xc>)
 8005d2e:	4601      	mov	r1, r0
 8005d30:	6818      	ldr	r0, [r3, #0]
 8005d32:	6882      	ldr	r2, [r0, #8]
 8005d34:	f000 bf30 	b.w	8006b98 <_putc_r>
 8005d38:	2000005c 	.word	0x2000005c

08005d3c <_puts_r>:
 8005d3c:	6a03      	ldr	r3, [r0, #32]
 8005d3e:	b570      	push	{r4, r5, r6, lr}
 8005d40:	6884      	ldr	r4, [r0, #8]
 8005d42:	4605      	mov	r5, r0
 8005d44:	460e      	mov	r6, r1
 8005d46:	b90b      	cbnz	r3, 8005d4c <_puts_r+0x10>
 8005d48:	f7ff ffa8 	bl	8005c9c <__sinit>
 8005d4c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005d4e:	07db      	lsls	r3, r3, #31
 8005d50:	d405      	bmi.n	8005d5e <_puts_r+0x22>
 8005d52:	89a3      	ldrh	r3, [r4, #12]
 8005d54:	0598      	lsls	r0, r3, #22
 8005d56:	d402      	bmi.n	8005d5e <_puts_r+0x22>
 8005d58:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005d5a:	f000 fa0c 	bl	8006176 <__retarget_lock_acquire_recursive>
 8005d5e:	89a3      	ldrh	r3, [r4, #12]
 8005d60:	0719      	lsls	r1, r3, #28
 8005d62:	d502      	bpl.n	8005d6a <_puts_r+0x2e>
 8005d64:	6923      	ldr	r3, [r4, #16]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d135      	bne.n	8005dd6 <_puts_r+0x9a>
 8005d6a:	4621      	mov	r1, r4
 8005d6c:	4628      	mov	r0, r5
 8005d6e:	f000 f8c5 	bl	8005efc <__swsetup_r>
 8005d72:	b380      	cbz	r0, 8005dd6 <_puts_r+0x9a>
 8005d74:	f04f 35ff 	mov.w	r5, #4294967295
 8005d78:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005d7a:	07da      	lsls	r2, r3, #31
 8005d7c:	d405      	bmi.n	8005d8a <_puts_r+0x4e>
 8005d7e:	89a3      	ldrh	r3, [r4, #12]
 8005d80:	059b      	lsls	r3, r3, #22
 8005d82:	d402      	bmi.n	8005d8a <_puts_r+0x4e>
 8005d84:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005d86:	f000 f9f7 	bl	8006178 <__retarget_lock_release_recursive>
 8005d8a:	4628      	mov	r0, r5
 8005d8c:	bd70      	pop	{r4, r5, r6, pc}
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	da04      	bge.n	8005d9c <_puts_r+0x60>
 8005d92:	69a2      	ldr	r2, [r4, #24]
 8005d94:	429a      	cmp	r2, r3
 8005d96:	dc17      	bgt.n	8005dc8 <_puts_r+0x8c>
 8005d98:	290a      	cmp	r1, #10
 8005d9a:	d015      	beq.n	8005dc8 <_puts_r+0x8c>
 8005d9c:	6823      	ldr	r3, [r4, #0]
 8005d9e:	1c5a      	adds	r2, r3, #1
 8005da0:	6022      	str	r2, [r4, #0]
 8005da2:	7019      	strb	r1, [r3, #0]
 8005da4:	68a3      	ldr	r3, [r4, #8]
 8005da6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005daa:	3b01      	subs	r3, #1
 8005dac:	60a3      	str	r3, [r4, #8]
 8005dae:	2900      	cmp	r1, #0
 8005db0:	d1ed      	bne.n	8005d8e <_puts_r+0x52>
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	da11      	bge.n	8005dda <_puts_r+0x9e>
 8005db6:	4622      	mov	r2, r4
 8005db8:	210a      	movs	r1, #10
 8005dba:	4628      	mov	r0, r5
 8005dbc:	f000 f85f 	bl	8005e7e <__swbuf_r>
 8005dc0:	3001      	adds	r0, #1
 8005dc2:	d0d7      	beq.n	8005d74 <_puts_r+0x38>
 8005dc4:	250a      	movs	r5, #10
 8005dc6:	e7d7      	b.n	8005d78 <_puts_r+0x3c>
 8005dc8:	4622      	mov	r2, r4
 8005dca:	4628      	mov	r0, r5
 8005dcc:	f000 f857 	bl	8005e7e <__swbuf_r>
 8005dd0:	3001      	adds	r0, #1
 8005dd2:	d1e7      	bne.n	8005da4 <_puts_r+0x68>
 8005dd4:	e7ce      	b.n	8005d74 <_puts_r+0x38>
 8005dd6:	3e01      	subs	r6, #1
 8005dd8:	e7e4      	b.n	8005da4 <_puts_r+0x68>
 8005dda:	6823      	ldr	r3, [r4, #0]
 8005ddc:	1c5a      	adds	r2, r3, #1
 8005dde:	6022      	str	r2, [r4, #0]
 8005de0:	220a      	movs	r2, #10
 8005de2:	701a      	strb	r2, [r3, #0]
 8005de4:	e7ee      	b.n	8005dc4 <_puts_r+0x88>
	...

08005de8 <puts>:
 8005de8:	4b02      	ldr	r3, [pc, #8]	@ (8005df4 <puts+0xc>)
 8005dea:	4601      	mov	r1, r0
 8005dec:	6818      	ldr	r0, [r3, #0]
 8005dee:	f7ff bfa5 	b.w	8005d3c <_puts_r>
 8005df2:	bf00      	nop
 8005df4:	2000005c 	.word	0x2000005c

08005df8 <__sread>:
 8005df8:	b510      	push	{r4, lr}
 8005dfa:	460c      	mov	r4, r1
 8005dfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e00:	f000 f96a 	bl	80060d8 <_read_r>
 8005e04:	2800      	cmp	r0, #0
 8005e06:	bfab      	itete	ge
 8005e08:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005e0a:	89a3      	ldrhlt	r3, [r4, #12]
 8005e0c:	181b      	addge	r3, r3, r0
 8005e0e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005e12:	bfac      	ite	ge
 8005e14:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005e16:	81a3      	strhlt	r3, [r4, #12]
 8005e18:	bd10      	pop	{r4, pc}

08005e1a <__swrite>:
 8005e1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e1e:	461f      	mov	r7, r3
 8005e20:	898b      	ldrh	r3, [r1, #12]
 8005e22:	05db      	lsls	r3, r3, #23
 8005e24:	4605      	mov	r5, r0
 8005e26:	460c      	mov	r4, r1
 8005e28:	4616      	mov	r6, r2
 8005e2a:	d505      	bpl.n	8005e38 <__swrite+0x1e>
 8005e2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e30:	2302      	movs	r3, #2
 8005e32:	2200      	movs	r2, #0
 8005e34:	f000 f93e 	bl	80060b4 <_lseek_r>
 8005e38:	89a3      	ldrh	r3, [r4, #12]
 8005e3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005e3e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005e42:	81a3      	strh	r3, [r4, #12]
 8005e44:	4632      	mov	r2, r6
 8005e46:	463b      	mov	r3, r7
 8005e48:	4628      	mov	r0, r5
 8005e4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005e4e:	f000 b955 	b.w	80060fc <_write_r>

08005e52 <__sseek>:
 8005e52:	b510      	push	{r4, lr}
 8005e54:	460c      	mov	r4, r1
 8005e56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e5a:	f000 f92b 	bl	80060b4 <_lseek_r>
 8005e5e:	1c43      	adds	r3, r0, #1
 8005e60:	89a3      	ldrh	r3, [r4, #12]
 8005e62:	bf15      	itete	ne
 8005e64:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005e66:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005e6a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005e6e:	81a3      	strheq	r3, [r4, #12]
 8005e70:	bf18      	it	ne
 8005e72:	81a3      	strhne	r3, [r4, #12]
 8005e74:	bd10      	pop	{r4, pc}

08005e76 <__sclose>:
 8005e76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e7a:	f000 b90b 	b.w	8006094 <_close_r>

08005e7e <__swbuf_r>:
 8005e7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e80:	460e      	mov	r6, r1
 8005e82:	4614      	mov	r4, r2
 8005e84:	4605      	mov	r5, r0
 8005e86:	b118      	cbz	r0, 8005e90 <__swbuf_r+0x12>
 8005e88:	6a03      	ldr	r3, [r0, #32]
 8005e8a:	b90b      	cbnz	r3, 8005e90 <__swbuf_r+0x12>
 8005e8c:	f7ff ff06 	bl	8005c9c <__sinit>
 8005e90:	69a3      	ldr	r3, [r4, #24]
 8005e92:	60a3      	str	r3, [r4, #8]
 8005e94:	89a3      	ldrh	r3, [r4, #12]
 8005e96:	071a      	lsls	r2, r3, #28
 8005e98:	d501      	bpl.n	8005e9e <__swbuf_r+0x20>
 8005e9a:	6923      	ldr	r3, [r4, #16]
 8005e9c:	b943      	cbnz	r3, 8005eb0 <__swbuf_r+0x32>
 8005e9e:	4621      	mov	r1, r4
 8005ea0:	4628      	mov	r0, r5
 8005ea2:	f000 f82b 	bl	8005efc <__swsetup_r>
 8005ea6:	b118      	cbz	r0, 8005eb0 <__swbuf_r+0x32>
 8005ea8:	f04f 37ff 	mov.w	r7, #4294967295
 8005eac:	4638      	mov	r0, r7
 8005eae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005eb0:	6823      	ldr	r3, [r4, #0]
 8005eb2:	6922      	ldr	r2, [r4, #16]
 8005eb4:	1a98      	subs	r0, r3, r2
 8005eb6:	6963      	ldr	r3, [r4, #20]
 8005eb8:	b2f6      	uxtb	r6, r6
 8005eba:	4283      	cmp	r3, r0
 8005ebc:	4637      	mov	r7, r6
 8005ebe:	dc05      	bgt.n	8005ecc <__swbuf_r+0x4e>
 8005ec0:	4621      	mov	r1, r4
 8005ec2:	4628      	mov	r0, r5
 8005ec4:	f000 fdcc 	bl	8006a60 <_fflush_r>
 8005ec8:	2800      	cmp	r0, #0
 8005eca:	d1ed      	bne.n	8005ea8 <__swbuf_r+0x2a>
 8005ecc:	68a3      	ldr	r3, [r4, #8]
 8005ece:	3b01      	subs	r3, #1
 8005ed0:	60a3      	str	r3, [r4, #8]
 8005ed2:	6823      	ldr	r3, [r4, #0]
 8005ed4:	1c5a      	adds	r2, r3, #1
 8005ed6:	6022      	str	r2, [r4, #0]
 8005ed8:	701e      	strb	r6, [r3, #0]
 8005eda:	6962      	ldr	r2, [r4, #20]
 8005edc:	1c43      	adds	r3, r0, #1
 8005ede:	429a      	cmp	r2, r3
 8005ee0:	d004      	beq.n	8005eec <__swbuf_r+0x6e>
 8005ee2:	89a3      	ldrh	r3, [r4, #12]
 8005ee4:	07db      	lsls	r3, r3, #31
 8005ee6:	d5e1      	bpl.n	8005eac <__swbuf_r+0x2e>
 8005ee8:	2e0a      	cmp	r6, #10
 8005eea:	d1df      	bne.n	8005eac <__swbuf_r+0x2e>
 8005eec:	4621      	mov	r1, r4
 8005eee:	4628      	mov	r0, r5
 8005ef0:	f000 fdb6 	bl	8006a60 <_fflush_r>
 8005ef4:	2800      	cmp	r0, #0
 8005ef6:	d0d9      	beq.n	8005eac <__swbuf_r+0x2e>
 8005ef8:	e7d6      	b.n	8005ea8 <__swbuf_r+0x2a>
	...

08005efc <__swsetup_r>:
 8005efc:	b538      	push	{r3, r4, r5, lr}
 8005efe:	4b29      	ldr	r3, [pc, #164]	@ (8005fa4 <__swsetup_r+0xa8>)
 8005f00:	4605      	mov	r5, r0
 8005f02:	6818      	ldr	r0, [r3, #0]
 8005f04:	460c      	mov	r4, r1
 8005f06:	b118      	cbz	r0, 8005f10 <__swsetup_r+0x14>
 8005f08:	6a03      	ldr	r3, [r0, #32]
 8005f0a:	b90b      	cbnz	r3, 8005f10 <__swsetup_r+0x14>
 8005f0c:	f7ff fec6 	bl	8005c9c <__sinit>
 8005f10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f14:	0719      	lsls	r1, r3, #28
 8005f16:	d422      	bmi.n	8005f5e <__swsetup_r+0x62>
 8005f18:	06da      	lsls	r2, r3, #27
 8005f1a:	d407      	bmi.n	8005f2c <__swsetup_r+0x30>
 8005f1c:	2209      	movs	r2, #9
 8005f1e:	602a      	str	r2, [r5, #0]
 8005f20:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005f24:	81a3      	strh	r3, [r4, #12]
 8005f26:	f04f 30ff 	mov.w	r0, #4294967295
 8005f2a:	e033      	b.n	8005f94 <__swsetup_r+0x98>
 8005f2c:	0758      	lsls	r0, r3, #29
 8005f2e:	d512      	bpl.n	8005f56 <__swsetup_r+0x5a>
 8005f30:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005f32:	b141      	cbz	r1, 8005f46 <__swsetup_r+0x4a>
 8005f34:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005f38:	4299      	cmp	r1, r3
 8005f3a:	d002      	beq.n	8005f42 <__swsetup_r+0x46>
 8005f3c:	4628      	mov	r0, r5
 8005f3e:	f000 f93b 	bl	80061b8 <_free_r>
 8005f42:	2300      	movs	r3, #0
 8005f44:	6363      	str	r3, [r4, #52]	@ 0x34
 8005f46:	89a3      	ldrh	r3, [r4, #12]
 8005f48:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005f4c:	81a3      	strh	r3, [r4, #12]
 8005f4e:	2300      	movs	r3, #0
 8005f50:	6063      	str	r3, [r4, #4]
 8005f52:	6923      	ldr	r3, [r4, #16]
 8005f54:	6023      	str	r3, [r4, #0]
 8005f56:	89a3      	ldrh	r3, [r4, #12]
 8005f58:	f043 0308 	orr.w	r3, r3, #8
 8005f5c:	81a3      	strh	r3, [r4, #12]
 8005f5e:	6923      	ldr	r3, [r4, #16]
 8005f60:	b94b      	cbnz	r3, 8005f76 <__swsetup_r+0x7a>
 8005f62:	89a3      	ldrh	r3, [r4, #12]
 8005f64:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005f68:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005f6c:	d003      	beq.n	8005f76 <__swsetup_r+0x7a>
 8005f6e:	4621      	mov	r1, r4
 8005f70:	4628      	mov	r0, r5
 8005f72:	f000 fdd5 	bl	8006b20 <__smakebuf_r>
 8005f76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f7a:	f013 0201 	ands.w	r2, r3, #1
 8005f7e:	d00a      	beq.n	8005f96 <__swsetup_r+0x9a>
 8005f80:	2200      	movs	r2, #0
 8005f82:	60a2      	str	r2, [r4, #8]
 8005f84:	6962      	ldr	r2, [r4, #20]
 8005f86:	4252      	negs	r2, r2
 8005f88:	61a2      	str	r2, [r4, #24]
 8005f8a:	6922      	ldr	r2, [r4, #16]
 8005f8c:	b942      	cbnz	r2, 8005fa0 <__swsetup_r+0xa4>
 8005f8e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005f92:	d1c5      	bne.n	8005f20 <__swsetup_r+0x24>
 8005f94:	bd38      	pop	{r3, r4, r5, pc}
 8005f96:	0799      	lsls	r1, r3, #30
 8005f98:	bf58      	it	pl
 8005f9a:	6962      	ldrpl	r2, [r4, #20]
 8005f9c:	60a2      	str	r2, [r4, #8]
 8005f9e:	e7f4      	b.n	8005f8a <__swsetup_r+0x8e>
 8005fa0:	2000      	movs	r0, #0
 8005fa2:	e7f7      	b.n	8005f94 <__swsetup_r+0x98>
 8005fa4:	2000005c 	.word	0x2000005c

08005fa8 <memset>:
 8005fa8:	4402      	add	r2, r0
 8005faa:	4603      	mov	r3, r0
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d100      	bne.n	8005fb2 <memset+0xa>
 8005fb0:	4770      	bx	lr
 8005fb2:	f803 1b01 	strb.w	r1, [r3], #1
 8005fb6:	e7f9      	b.n	8005fac <memset+0x4>

08005fb8 <strncmp>:
 8005fb8:	b510      	push	{r4, lr}
 8005fba:	b16a      	cbz	r2, 8005fd8 <strncmp+0x20>
 8005fbc:	3901      	subs	r1, #1
 8005fbe:	1884      	adds	r4, r0, r2
 8005fc0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005fc4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8005fc8:	429a      	cmp	r2, r3
 8005fca:	d103      	bne.n	8005fd4 <strncmp+0x1c>
 8005fcc:	42a0      	cmp	r0, r4
 8005fce:	d001      	beq.n	8005fd4 <strncmp+0x1c>
 8005fd0:	2a00      	cmp	r2, #0
 8005fd2:	d1f5      	bne.n	8005fc0 <strncmp+0x8>
 8005fd4:	1ad0      	subs	r0, r2, r3
 8005fd6:	bd10      	pop	{r4, pc}
 8005fd8:	4610      	mov	r0, r2
 8005fda:	e7fc      	b.n	8005fd6 <strncmp+0x1e>

08005fdc <strtok>:
 8005fdc:	4b16      	ldr	r3, [pc, #88]	@ (8006038 <strtok+0x5c>)
 8005fde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fe2:	681f      	ldr	r7, [r3, #0]
 8005fe4:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8005fe6:	4605      	mov	r5, r0
 8005fe8:	460e      	mov	r6, r1
 8005fea:	b9ec      	cbnz	r4, 8006028 <strtok+0x4c>
 8005fec:	2050      	movs	r0, #80	@ 0x50
 8005fee:	f000 f92d 	bl	800624c <malloc>
 8005ff2:	4602      	mov	r2, r0
 8005ff4:	6478      	str	r0, [r7, #68]	@ 0x44
 8005ff6:	b920      	cbnz	r0, 8006002 <strtok+0x26>
 8005ff8:	4b10      	ldr	r3, [pc, #64]	@ (800603c <strtok+0x60>)
 8005ffa:	4811      	ldr	r0, [pc, #68]	@ (8006040 <strtok+0x64>)
 8005ffc:	215b      	movs	r1, #91	@ 0x5b
 8005ffe:	f000 f8bd 	bl	800617c <__assert_func>
 8006002:	e9c0 4400 	strd	r4, r4, [r0]
 8006006:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800600a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800600e:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8006012:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8006016:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800601a:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800601e:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8006022:	6184      	str	r4, [r0, #24]
 8006024:	7704      	strb	r4, [r0, #28]
 8006026:	6244      	str	r4, [r0, #36]	@ 0x24
 8006028:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800602a:	4631      	mov	r1, r6
 800602c:	4628      	mov	r0, r5
 800602e:	2301      	movs	r3, #1
 8006030:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006034:	f000 b806 	b.w	8006044 <__strtok_r>
 8006038:	2000005c 	.word	0x2000005c
 800603c:	080070ad 	.word	0x080070ad
 8006040:	080070c4 	.word	0x080070c4

08006044 <__strtok_r>:
 8006044:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006046:	4604      	mov	r4, r0
 8006048:	b908      	cbnz	r0, 800604e <__strtok_r+0xa>
 800604a:	6814      	ldr	r4, [r2, #0]
 800604c:	b144      	cbz	r4, 8006060 <__strtok_r+0x1c>
 800604e:	4620      	mov	r0, r4
 8006050:	f814 5b01 	ldrb.w	r5, [r4], #1
 8006054:	460f      	mov	r7, r1
 8006056:	f817 6b01 	ldrb.w	r6, [r7], #1
 800605a:	b91e      	cbnz	r6, 8006064 <__strtok_r+0x20>
 800605c:	b965      	cbnz	r5, 8006078 <__strtok_r+0x34>
 800605e:	6015      	str	r5, [r2, #0]
 8006060:	2000      	movs	r0, #0
 8006062:	e005      	b.n	8006070 <__strtok_r+0x2c>
 8006064:	42b5      	cmp	r5, r6
 8006066:	d1f6      	bne.n	8006056 <__strtok_r+0x12>
 8006068:	2b00      	cmp	r3, #0
 800606a:	d1f0      	bne.n	800604e <__strtok_r+0xa>
 800606c:	6014      	str	r4, [r2, #0]
 800606e:	7003      	strb	r3, [r0, #0]
 8006070:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006072:	461c      	mov	r4, r3
 8006074:	e00c      	b.n	8006090 <__strtok_r+0x4c>
 8006076:	b915      	cbnz	r5, 800607e <__strtok_r+0x3a>
 8006078:	f814 3b01 	ldrb.w	r3, [r4], #1
 800607c:	460e      	mov	r6, r1
 800607e:	f816 5b01 	ldrb.w	r5, [r6], #1
 8006082:	42ab      	cmp	r3, r5
 8006084:	d1f7      	bne.n	8006076 <__strtok_r+0x32>
 8006086:	2b00      	cmp	r3, #0
 8006088:	d0f3      	beq.n	8006072 <__strtok_r+0x2e>
 800608a:	2300      	movs	r3, #0
 800608c:	f804 3c01 	strb.w	r3, [r4, #-1]
 8006090:	6014      	str	r4, [r2, #0]
 8006092:	e7ed      	b.n	8006070 <__strtok_r+0x2c>

08006094 <_close_r>:
 8006094:	b538      	push	{r3, r4, r5, lr}
 8006096:	4d06      	ldr	r5, [pc, #24]	@ (80060b0 <_close_r+0x1c>)
 8006098:	2300      	movs	r3, #0
 800609a:	4604      	mov	r4, r0
 800609c:	4608      	mov	r0, r1
 800609e:	602b      	str	r3, [r5, #0]
 80060a0:	f7fb fc12 	bl	80018c8 <_close>
 80060a4:	1c43      	adds	r3, r0, #1
 80060a6:	d102      	bne.n	80060ae <_close_r+0x1a>
 80060a8:	682b      	ldr	r3, [r5, #0]
 80060aa:	b103      	cbz	r3, 80060ae <_close_r+0x1a>
 80060ac:	6023      	str	r3, [r4, #0]
 80060ae:	bd38      	pop	{r3, r4, r5, pc}
 80060b0:	20000bbc 	.word	0x20000bbc

080060b4 <_lseek_r>:
 80060b4:	b538      	push	{r3, r4, r5, lr}
 80060b6:	4d07      	ldr	r5, [pc, #28]	@ (80060d4 <_lseek_r+0x20>)
 80060b8:	4604      	mov	r4, r0
 80060ba:	4608      	mov	r0, r1
 80060bc:	4611      	mov	r1, r2
 80060be:	2200      	movs	r2, #0
 80060c0:	602a      	str	r2, [r5, #0]
 80060c2:	461a      	mov	r2, r3
 80060c4:	f7fb fc27 	bl	8001916 <_lseek>
 80060c8:	1c43      	adds	r3, r0, #1
 80060ca:	d102      	bne.n	80060d2 <_lseek_r+0x1e>
 80060cc:	682b      	ldr	r3, [r5, #0]
 80060ce:	b103      	cbz	r3, 80060d2 <_lseek_r+0x1e>
 80060d0:	6023      	str	r3, [r4, #0]
 80060d2:	bd38      	pop	{r3, r4, r5, pc}
 80060d4:	20000bbc 	.word	0x20000bbc

080060d8 <_read_r>:
 80060d8:	b538      	push	{r3, r4, r5, lr}
 80060da:	4d07      	ldr	r5, [pc, #28]	@ (80060f8 <_read_r+0x20>)
 80060dc:	4604      	mov	r4, r0
 80060de:	4608      	mov	r0, r1
 80060e0:	4611      	mov	r1, r2
 80060e2:	2200      	movs	r2, #0
 80060e4:	602a      	str	r2, [r5, #0]
 80060e6:	461a      	mov	r2, r3
 80060e8:	f7fb fbb5 	bl	8001856 <_read>
 80060ec:	1c43      	adds	r3, r0, #1
 80060ee:	d102      	bne.n	80060f6 <_read_r+0x1e>
 80060f0:	682b      	ldr	r3, [r5, #0]
 80060f2:	b103      	cbz	r3, 80060f6 <_read_r+0x1e>
 80060f4:	6023      	str	r3, [r4, #0]
 80060f6:	bd38      	pop	{r3, r4, r5, pc}
 80060f8:	20000bbc 	.word	0x20000bbc

080060fc <_write_r>:
 80060fc:	b538      	push	{r3, r4, r5, lr}
 80060fe:	4d07      	ldr	r5, [pc, #28]	@ (800611c <_write_r+0x20>)
 8006100:	4604      	mov	r4, r0
 8006102:	4608      	mov	r0, r1
 8006104:	4611      	mov	r1, r2
 8006106:	2200      	movs	r2, #0
 8006108:	602a      	str	r2, [r5, #0]
 800610a:	461a      	mov	r2, r3
 800610c:	f7fb fbc0 	bl	8001890 <_write>
 8006110:	1c43      	adds	r3, r0, #1
 8006112:	d102      	bne.n	800611a <_write_r+0x1e>
 8006114:	682b      	ldr	r3, [r5, #0]
 8006116:	b103      	cbz	r3, 800611a <_write_r+0x1e>
 8006118:	6023      	str	r3, [r4, #0]
 800611a:	bd38      	pop	{r3, r4, r5, pc}
 800611c:	20000bbc 	.word	0x20000bbc

08006120 <__errno>:
 8006120:	4b01      	ldr	r3, [pc, #4]	@ (8006128 <__errno+0x8>)
 8006122:	6818      	ldr	r0, [r3, #0]
 8006124:	4770      	bx	lr
 8006126:	bf00      	nop
 8006128:	2000005c 	.word	0x2000005c

0800612c <__libc_init_array>:
 800612c:	b570      	push	{r4, r5, r6, lr}
 800612e:	4d0d      	ldr	r5, [pc, #52]	@ (8006164 <__libc_init_array+0x38>)
 8006130:	4c0d      	ldr	r4, [pc, #52]	@ (8006168 <__libc_init_array+0x3c>)
 8006132:	1b64      	subs	r4, r4, r5
 8006134:	10a4      	asrs	r4, r4, #2
 8006136:	2600      	movs	r6, #0
 8006138:	42a6      	cmp	r6, r4
 800613a:	d109      	bne.n	8006150 <__libc_init_array+0x24>
 800613c:	4d0b      	ldr	r5, [pc, #44]	@ (800616c <__libc_init_array+0x40>)
 800613e:	4c0c      	ldr	r4, [pc, #48]	@ (8006170 <__libc_init_array+0x44>)
 8006140:	f000 fddc 	bl	8006cfc <_init>
 8006144:	1b64      	subs	r4, r4, r5
 8006146:	10a4      	asrs	r4, r4, #2
 8006148:	2600      	movs	r6, #0
 800614a:	42a6      	cmp	r6, r4
 800614c:	d105      	bne.n	800615a <__libc_init_array+0x2e>
 800614e:	bd70      	pop	{r4, r5, r6, pc}
 8006150:	f855 3b04 	ldr.w	r3, [r5], #4
 8006154:	4798      	blx	r3
 8006156:	3601      	adds	r6, #1
 8006158:	e7ee      	b.n	8006138 <__libc_init_array+0xc>
 800615a:	f855 3b04 	ldr.w	r3, [r5], #4
 800615e:	4798      	blx	r3
 8006160:	3601      	adds	r6, #1
 8006162:	e7f2      	b.n	800614a <__libc_init_array+0x1e>
 8006164:	08007198 	.word	0x08007198
 8006168:	08007198 	.word	0x08007198
 800616c:	08007198 	.word	0x08007198
 8006170:	0800719c 	.word	0x0800719c

08006174 <__retarget_lock_init_recursive>:
 8006174:	4770      	bx	lr

08006176 <__retarget_lock_acquire_recursive>:
 8006176:	4770      	bx	lr

08006178 <__retarget_lock_release_recursive>:
 8006178:	4770      	bx	lr
	...

0800617c <__assert_func>:
 800617c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800617e:	4614      	mov	r4, r2
 8006180:	461a      	mov	r2, r3
 8006182:	4b09      	ldr	r3, [pc, #36]	@ (80061a8 <__assert_func+0x2c>)
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4605      	mov	r5, r0
 8006188:	68d8      	ldr	r0, [r3, #12]
 800618a:	b954      	cbnz	r4, 80061a2 <__assert_func+0x26>
 800618c:	4b07      	ldr	r3, [pc, #28]	@ (80061ac <__assert_func+0x30>)
 800618e:	461c      	mov	r4, r3
 8006190:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006194:	9100      	str	r1, [sp, #0]
 8006196:	462b      	mov	r3, r5
 8006198:	4905      	ldr	r1, [pc, #20]	@ (80061b0 <__assert_func+0x34>)
 800619a:	f000 fc89 	bl	8006ab0 <fiprintf>
 800619e:	f000 fd61 	bl	8006c64 <abort>
 80061a2:	4b04      	ldr	r3, [pc, #16]	@ (80061b4 <__assert_func+0x38>)
 80061a4:	e7f4      	b.n	8006190 <__assert_func+0x14>
 80061a6:	bf00      	nop
 80061a8:	2000005c 	.word	0x2000005c
 80061ac:	08007159 	.word	0x08007159
 80061b0:	0800712b 	.word	0x0800712b
 80061b4:	0800711e 	.word	0x0800711e

080061b8 <_free_r>:
 80061b8:	b538      	push	{r3, r4, r5, lr}
 80061ba:	4605      	mov	r5, r0
 80061bc:	2900      	cmp	r1, #0
 80061be:	d041      	beq.n	8006244 <_free_r+0x8c>
 80061c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80061c4:	1f0c      	subs	r4, r1, #4
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	bfb8      	it	lt
 80061ca:	18e4      	addlt	r4, r4, r3
 80061cc:	f000 f8e8 	bl	80063a0 <__malloc_lock>
 80061d0:	4a1d      	ldr	r2, [pc, #116]	@ (8006248 <_free_r+0x90>)
 80061d2:	6813      	ldr	r3, [r2, #0]
 80061d4:	b933      	cbnz	r3, 80061e4 <_free_r+0x2c>
 80061d6:	6063      	str	r3, [r4, #4]
 80061d8:	6014      	str	r4, [r2, #0]
 80061da:	4628      	mov	r0, r5
 80061dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80061e0:	f000 b8e4 	b.w	80063ac <__malloc_unlock>
 80061e4:	42a3      	cmp	r3, r4
 80061e6:	d908      	bls.n	80061fa <_free_r+0x42>
 80061e8:	6820      	ldr	r0, [r4, #0]
 80061ea:	1821      	adds	r1, r4, r0
 80061ec:	428b      	cmp	r3, r1
 80061ee:	bf01      	itttt	eq
 80061f0:	6819      	ldreq	r1, [r3, #0]
 80061f2:	685b      	ldreq	r3, [r3, #4]
 80061f4:	1809      	addeq	r1, r1, r0
 80061f6:	6021      	streq	r1, [r4, #0]
 80061f8:	e7ed      	b.n	80061d6 <_free_r+0x1e>
 80061fa:	461a      	mov	r2, r3
 80061fc:	685b      	ldr	r3, [r3, #4]
 80061fe:	b10b      	cbz	r3, 8006204 <_free_r+0x4c>
 8006200:	42a3      	cmp	r3, r4
 8006202:	d9fa      	bls.n	80061fa <_free_r+0x42>
 8006204:	6811      	ldr	r1, [r2, #0]
 8006206:	1850      	adds	r0, r2, r1
 8006208:	42a0      	cmp	r0, r4
 800620a:	d10b      	bne.n	8006224 <_free_r+0x6c>
 800620c:	6820      	ldr	r0, [r4, #0]
 800620e:	4401      	add	r1, r0
 8006210:	1850      	adds	r0, r2, r1
 8006212:	4283      	cmp	r3, r0
 8006214:	6011      	str	r1, [r2, #0]
 8006216:	d1e0      	bne.n	80061da <_free_r+0x22>
 8006218:	6818      	ldr	r0, [r3, #0]
 800621a:	685b      	ldr	r3, [r3, #4]
 800621c:	6053      	str	r3, [r2, #4]
 800621e:	4408      	add	r0, r1
 8006220:	6010      	str	r0, [r2, #0]
 8006222:	e7da      	b.n	80061da <_free_r+0x22>
 8006224:	d902      	bls.n	800622c <_free_r+0x74>
 8006226:	230c      	movs	r3, #12
 8006228:	602b      	str	r3, [r5, #0]
 800622a:	e7d6      	b.n	80061da <_free_r+0x22>
 800622c:	6820      	ldr	r0, [r4, #0]
 800622e:	1821      	adds	r1, r4, r0
 8006230:	428b      	cmp	r3, r1
 8006232:	bf04      	itt	eq
 8006234:	6819      	ldreq	r1, [r3, #0]
 8006236:	685b      	ldreq	r3, [r3, #4]
 8006238:	6063      	str	r3, [r4, #4]
 800623a:	bf04      	itt	eq
 800623c:	1809      	addeq	r1, r1, r0
 800623e:	6021      	streq	r1, [r4, #0]
 8006240:	6054      	str	r4, [r2, #4]
 8006242:	e7ca      	b.n	80061da <_free_r+0x22>
 8006244:	bd38      	pop	{r3, r4, r5, pc}
 8006246:	bf00      	nop
 8006248:	20000bc8 	.word	0x20000bc8

0800624c <malloc>:
 800624c:	4b02      	ldr	r3, [pc, #8]	@ (8006258 <malloc+0xc>)
 800624e:	4601      	mov	r1, r0
 8006250:	6818      	ldr	r0, [r3, #0]
 8006252:	f000 b825 	b.w	80062a0 <_malloc_r>
 8006256:	bf00      	nop
 8006258:	2000005c 	.word	0x2000005c

0800625c <sbrk_aligned>:
 800625c:	b570      	push	{r4, r5, r6, lr}
 800625e:	4e0f      	ldr	r6, [pc, #60]	@ (800629c <sbrk_aligned+0x40>)
 8006260:	460c      	mov	r4, r1
 8006262:	6831      	ldr	r1, [r6, #0]
 8006264:	4605      	mov	r5, r0
 8006266:	b911      	cbnz	r1, 800626e <sbrk_aligned+0x12>
 8006268:	f000 fcec 	bl	8006c44 <_sbrk_r>
 800626c:	6030      	str	r0, [r6, #0]
 800626e:	4621      	mov	r1, r4
 8006270:	4628      	mov	r0, r5
 8006272:	f000 fce7 	bl	8006c44 <_sbrk_r>
 8006276:	1c43      	adds	r3, r0, #1
 8006278:	d103      	bne.n	8006282 <sbrk_aligned+0x26>
 800627a:	f04f 34ff 	mov.w	r4, #4294967295
 800627e:	4620      	mov	r0, r4
 8006280:	bd70      	pop	{r4, r5, r6, pc}
 8006282:	1cc4      	adds	r4, r0, #3
 8006284:	f024 0403 	bic.w	r4, r4, #3
 8006288:	42a0      	cmp	r0, r4
 800628a:	d0f8      	beq.n	800627e <sbrk_aligned+0x22>
 800628c:	1a21      	subs	r1, r4, r0
 800628e:	4628      	mov	r0, r5
 8006290:	f000 fcd8 	bl	8006c44 <_sbrk_r>
 8006294:	3001      	adds	r0, #1
 8006296:	d1f2      	bne.n	800627e <sbrk_aligned+0x22>
 8006298:	e7ef      	b.n	800627a <sbrk_aligned+0x1e>
 800629a:	bf00      	nop
 800629c:	20000bc4 	.word	0x20000bc4

080062a0 <_malloc_r>:
 80062a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80062a4:	1ccd      	adds	r5, r1, #3
 80062a6:	f025 0503 	bic.w	r5, r5, #3
 80062aa:	3508      	adds	r5, #8
 80062ac:	2d0c      	cmp	r5, #12
 80062ae:	bf38      	it	cc
 80062b0:	250c      	movcc	r5, #12
 80062b2:	2d00      	cmp	r5, #0
 80062b4:	4606      	mov	r6, r0
 80062b6:	db01      	blt.n	80062bc <_malloc_r+0x1c>
 80062b8:	42a9      	cmp	r1, r5
 80062ba:	d904      	bls.n	80062c6 <_malloc_r+0x26>
 80062bc:	230c      	movs	r3, #12
 80062be:	6033      	str	r3, [r6, #0]
 80062c0:	2000      	movs	r0, #0
 80062c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80062c6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800639c <_malloc_r+0xfc>
 80062ca:	f000 f869 	bl	80063a0 <__malloc_lock>
 80062ce:	f8d8 3000 	ldr.w	r3, [r8]
 80062d2:	461c      	mov	r4, r3
 80062d4:	bb44      	cbnz	r4, 8006328 <_malloc_r+0x88>
 80062d6:	4629      	mov	r1, r5
 80062d8:	4630      	mov	r0, r6
 80062da:	f7ff ffbf 	bl	800625c <sbrk_aligned>
 80062de:	1c43      	adds	r3, r0, #1
 80062e0:	4604      	mov	r4, r0
 80062e2:	d158      	bne.n	8006396 <_malloc_r+0xf6>
 80062e4:	f8d8 4000 	ldr.w	r4, [r8]
 80062e8:	4627      	mov	r7, r4
 80062ea:	2f00      	cmp	r7, #0
 80062ec:	d143      	bne.n	8006376 <_malloc_r+0xd6>
 80062ee:	2c00      	cmp	r4, #0
 80062f0:	d04b      	beq.n	800638a <_malloc_r+0xea>
 80062f2:	6823      	ldr	r3, [r4, #0]
 80062f4:	4639      	mov	r1, r7
 80062f6:	4630      	mov	r0, r6
 80062f8:	eb04 0903 	add.w	r9, r4, r3
 80062fc:	f000 fca2 	bl	8006c44 <_sbrk_r>
 8006300:	4581      	cmp	r9, r0
 8006302:	d142      	bne.n	800638a <_malloc_r+0xea>
 8006304:	6821      	ldr	r1, [r4, #0]
 8006306:	1a6d      	subs	r5, r5, r1
 8006308:	4629      	mov	r1, r5
 800630a:	4630      	mov	r0, r6
 800630c:	f7ff ffa6 	bl	800625c <sbrk_aligned>
 8006310:	3001      	adds	r0, #1
 8006312:	d03a      	beq.n	800638a <_malloc_r+0xea>
 8006314:	6823      	ldr	r3, [r4, #0]
 8006316:	442b      	add	r3, r5
 8006318:	6023      	str	r3, [r4, #0]
 800631a:	f8d8 3000 	ldr.w	r3, [r8]
 800631e:	685a      	ldr	r2, [r3, #4]
 8006320:	bb62      	cbnz	r2, 800637c <_malloc_r+0xdc>
 8006322:	f8c8 7000 	str.w	r7, [r8]
 8006326:	e00f      	b.n	8006348 <_malloc_r+0xa8>
 8006328:	6822      	ldr	r2, [r4, #0]
 800632a:	1b52      	subs	r2, r2, r5
 800632c:	d420      	bmi.n	8006370 <_malloc_r+0xd0>
 800632e:	2a0b      	cmp	r2, #11
 8006330:	d917      	bls.n	8006362 <_malloc_r+0xc2>
 8006332:	1961      	adds	r1, r4, r5
 8006334:	42a3      	cmp	r3, r4
 8006336:	6025      	str	r5, [r4, #0]
 8006338:	bf18      	it	ne
 800633a:	6059      	strne	r1, [r3, #4]
 800633c:	6863      	ldr	r3, [r4, #4]
 800633e:	bf08      	it	eq
 8006340:	f8c8 1000 	streq.w	r1, [r8]
 8006344:	5162      	str	r2, [r4, r5]
 8006346:	604b      	str	r3, [r1, #4]
 8006348:	4630      	mov	r0, r6
 800634a:	f000 f82f 	bl	80063ac <__malloc_unlock>
 800634e:	f104 000b 	add.w	r0, r4, #11
 8006352:	1d23      	adds	r3, r4, #4
 8006354:	f020 0007 	bic.w	r0, r0, #7
 8006358:	1ac2      	subs	r2, r0, r3
 800635a:	bf1c      	itt	ne
 800635c:	1a1b      	subne	r3, r3, r0
 800635e:	50a3      	strne	r3, [r4, r2]
 8006360:	e7af      	b.n	80062c2 <_malloc_r+0x22>
 8006362:	6862      	ldr	r2, [r4, #4]
 8006364:	42a3      	cmp	r3, r4
 8006366:	bf0c      	ite	eq
 8006368:	f8c8 2000 	streq.w	r2, [r8]
 800636c:	605a      	strne	r2, [r3, #4]
 800636e:	e7eb      	b.n	8006348 <_malloc_r+0xa8>
 8006370:	4623      	mov	r3, r4
 8006372:	6864      	ldr	r4, [r4, #4]
 8006374:	e7ae      	b.n	80062d4 <_malloc_r+0x34>
 8006376:	463c      	mov	r4, r7
 8006378:	687f      	ldr	r7, [r7, #4]
 800637a:	e7b6      	b.n	80062ea <_malloc_r+0x4a>
 800637c:	461a      	mov	r2, r3
 800637e:	685b      	ldr	r3, [r3, #4]
 8006380:	42a3      	cmp	r3, r4
 8006382:	d1fb      	bne.n	800637c <_malloc_r+0xdc>
 8006384:	2300      	movs	r3, #0
 8006386:	6053      	str	r3, [r2, #4]
 8006388:	e7de      	b.n	8006348 <_malloc_r+0xa8>
 800638a:	230c      	movs	r3, #12
 800638c:	6033      	str	r3, [r6, #0]
 800638e:	4630      	mov	r0, r6
 8006390:	f000 f80c 	bl	80063ac <__malloc_unlock>
 8006394:	e794      	b.n	80062c0 <_malloc_r+0x20>
 8006396:	6005      	str	r5, [r0, #0]
 8006398:	e7d6      	b.n	8006348 <_malloc_r+0xa8>
 800639a:	bf00      	nop
 800639c:	20000bc8 	.word	0x20000bc8

080063a0 <__malloc_lock>:
 80063a0:	4801      	ldr	r0, [pc, #4]	@ (80063a8 <__malloc_lock+0x8>)
 80063a2:	f7ff bee8 	b.w	8006176 <__retarget_lock_acquire_recursive>
 80063a6:	bf00      	nop
 80063a8:	20000bc0 	.word	0x20000bc0

080063ac <__malloc_unlock>:
 80063ac:	4801      	ldr	r0, [pc, #4]	@ (80063b4 <__malloc_unlock+0x8>)
 80063ae:	f7ff bee3 	b.w	8006178 <__retarget_lock_release_recursive>
 80063b2:	bf00      	nop
 80063b4:	20000bc0 	.word	0x20000bc0

080063b8 <__sfputc_r>:
 80063b8:	6893      	ldr	r3, [r2, #8]
 80063ba:	3b01      	subs	r3, #1
 80063bc:	2b00      	cmp	r3, #0
 80063be:	b410      	push	{r4}
 80063c0:	6093      	str	r3, [r2, #8]
 80063c2:	da08      	bge.n	80063d6 <__sfputc_r+0x1e>
 80063c4:	6994      	ldr	r4, [r2, #24]
 80063c6:	42a3      	cmp	r3, r4
 80063c8:	db01      	blt.n	80063ce <__sfputc_r+0x16>
 80063ca:	290a      	cmp	r1, #10
 80063cc:	d103      	bne.n	80063d6 <__sfputc_r+0x1e>
 80063ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 80063d2:	f7ff bd54 	b.w	8005e7e <__swbuf_r>
 80063d6:	6813      	ldr	r3, [r2, #0]
 80063d8:	1c58      	adds	r0, r3, #1
 80063da:	6010      	str	r0, [r2, #0]
 80063dc:	7019      	strb	r1, [r3, #0]
 80063de:	4608      	mov	r0, r1
 80063e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80063e4:	4770      	bx	lr

080063e6 <__sfputs_r>:
 80063e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063e8:	4606      	mov	r6, r0
 80063ea:	460f      	mov	r7, r1
 80063ec:	4614      	mov	r4, r2
 80063ee:	18d5      	adds	r5, r2, r3
 80063f0:	42ac      	cmp	r4, r5
 80063f2:	d101      	bne.n	80063f8 <__sfputs_r+0x12>
 80063f4:	2000      	movs	r0, #0
 80063f6:	e007      	b.n	8006408 <__sfputs_r+0x22>
 80063f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80063fc:	463a      	mov	r2, r7
 80063fe:	4630      	mov	r0, r6
 8006400:	f7ff ffda 	bl	80063b8 <__sfputc_r>
 8006404:	1c43      	adds	r3, r0, #1
 8006406:	d1f3      	bne.n	80063f0 <__sfputs_r+0xa>
 8006408:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800640c <_vfiprintf_r>:
 800640c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006410:	460d      	mov	r5, r1
 8006412:	b09d      	sub	sp, #116	@ 0x74
 8006414:	4614      	mov	r4, r2
 8006416:	4698      	mov	r8, r3
 8006418:	4606      	mov	r6, r0
 800641a:	b118      	cbz	r0, 8006424 <_vfiprintf_r+0x18>
 800641c:	6a03      	ldr	r3, [r0, #32]
 800641e:	b90b      	cbnz	r3, 8006424 <_vfiprintf_r+0x18>
 8006420:	f7ff fc3c 	bl	8005c9c <__sinit>
 8006424:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006426:	07d9      	lsls	r1, r3, #31
 8006428:	d405      	bmi.n	8006436 <_vfiprintf_r+0x2a>
 800642a:	89ab      	ldrh	r3, [r5, #12]
 800642c:	059a      	lsls	r2, r3, #22
 800642e:	d402      	bmi.n	8006436 <_vfiprintf_r+0x2a>
 8006430:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006432:	f7ff fea0 	bl	8006176 <__retarget_lock_acquire_recursive>
 8006436:	89ab      	ldrh	r3, [r5, #12]
 8006438:	071b      	lsls	r3, r3, #28
 800643a:	d501      	bpl.n	8006440 <_vfiprintf_r+0x34>
 800643c:	692b      	ldr	r3, [r5, #16]
 800643e:	b99b      	cbnz	r3, 8006468 <_vfiprintf_r+0x5c>
 8006440:	4629      	mov	r1, r5
 8006442:	4630      	mov	r0, r6
 8006444:	f7ff fd5a 	bl	8005efc <__swsetup_r>
 8006448:	b170      	cbz	r0, 8006468 <_vfiprintf_r+0x5c>
 800644a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800644c:	07dc      	lsls	r4, r3, #31
 800644e:	d504      	bpl.n	800645a <_vfiprintf_r+0x4e>
 8006450:	f04f 30ff 	mov.w	r0, #4294967295
 8006454:	b01d      	add	sp, #116	@ 0x74
 8006456:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800645a:	89ab      	ldrh	r3, [r5, #12]
 800645c:	0598      	lsls	r0, r3, #22
 800645e:	d4f7      	bmi.n	8006450 <_vfiprintf_r+0x44>
 8006460:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006462:	f7ff fe89 	bl	8006178 <__retarget_lock_release_recursive>
 8006466:	e7f3      	b.n	8006450 <_vfiprintf_r+0x44>
 8006468:	2300      	movs	r3, #0
 800646a:	9309      	str	r3, [sp, #36]	@ 0x24
 800646c:	2320      	movs	r3, #32
 800646e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006472:	f8cd 800c 	str.w	r8, [sp, #12]
 8006476:	2330      	movs	r3, #48	@ 0x30
 8006478:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006628 <_vfiprintf_r+0x21c>
 800647c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006480:	f04f 0901 	mov.w	r9, #1
 8006484:	4623      	mov	r3, r4
 8006486:	469a      	mov	sl, r3
 8006488:	f813 2b01 	ldrb.w	r2, [r3], #1
 800648c:	b10a      	cbz	r2, 8006492 <_vfiprintf_r+0x86>
 800648e:	2a25      	cmp	r2, #37	@ 0x25
 8006490:	d1f9      	bne.n	8006486 <_vfiprintf_r+0x7a>
 8006492:	ebba 0b04 	subs.w	fp, sl, r4
 8006496:	d00b      	beq.n	80064b0 <_vfiprintf_r+0xa4>
 8006498:	465b      	mov	r3, fp
 800649a:	4622      	mov	r2, r4
 800649c:	4629      	mov	r1, r5
 800649e:	4630      	mov	r0, r6
 80064a0:	f7ff ffa1 	bl	80063e6 <__sfputs_r>
 80064a4:	3001      	adds	r0, #1
 80064a6:	f000 80a7 	beq.w	80065f8 <_vfiprintf_r+0x1ec>
 80064aa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80064ac:	445a      	add	r2, fp
 80064ae:	9209      	str	r2, [sp, #36]	@ 0x24
 80064b0:	f89a 3000 	ldrb.w	r3, [sl]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	f000 809f 	beq.w	80065f8 <_vfiprintf_r+0x1ec>
 80064ba:	2300      	movs	r3, #0
 80064bc:	f04f 32ff 	mov.w	r2, #4294967295
 80064c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80064c4:	f10a 0a01 	add.w	sl, sl, #1
 80064c8:	9304      	str	r3, [sp, #16]
 80064ca:	9307      	str	r3, [sp, #28]
 80064cc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80064d0:	931a      	str	r3, [sp, #104]	@ 0x68
 80064d2:	4654      	mov	r4, sl
 80064d4:	2205      	movs	r2, #5
 80064d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80064da:	4853      	ldr	r0, [pc, #332]	@ (8006628 <_vfiprintf_r+0x21c>)
 80064dc:	f7f9 fe98 	bl	8000210 <memchr>
 80064e0:	9a04      	ldr	r2, [sp, #16]
 80064e2:	b9d8      	cbnz	r0, 800651c <_vfiprintf_r+0x110>
 80064e4:	06d1      	lsls	r1, r2, #27
 80064e6:	bf44      	itt	mi
 80064e8:	2320      	movmi	r3, #32
 80064ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80064ee:	0713      	lsls	r3, r2, #28
 80064f0:	bf44      	itt	mi
 80064f2:	232b      	movmi	r3, #43	@ 0x2b
 80064f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80064f8:	f89a 3000 	ldrb.w	r3, [sl]
 80064fc:	2b2a      	cmp	r3, #42	@ 0x2a
 80064fe:	d015      	beq.n	800652c <_vfiprintf_r+0x120>
 8006500:	9a07      	ldr	r2, [sp, #28]
 8006502:	4654      	mov	r4, sl
 8006504:	2000      	movs	r0, #0
 8006506:	f04f 0c0a 	mov.w	ip, #10
 800650a:	4621      	mov	r1, r4
 800650c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006510:	3b30      	subs	r3, #48	@ 0x30
 8006512:	2b09      	cmp	r3, #9
 8006514:	d94b      	bls.n	80065ae <_vfiprintf_r+0x1a2>
 8006516:	b1b0      	cbz	r0, 8006546 <_vfiprintf_r+0x13a>
 8006518:	9207      	str	r2, [sp, #28]
 800651a:	e014      	b.n	8006546 <_vfiprintf_r+0x13a>
 800651c:	eba0 0308 	sub.w	r3, r0, r8
 8006520:	fa09 f303 	lsl.w	r3, r9, r3
 8006524:	4313      	orrs	r3, r2
 8006526:	9304      	str	r3, [sp, #16]
 8006528:	46a2      	mov	sl, r4
 800652a:	e7d2      	b.n	80064d2 <_vfiprintf_r+0xc6>
 800652c:	9b03      	ldr	r3, [sp, #12]
 800652e:	1d19      	adds	r1, r3, #4
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	9103      	str	r1, [sp, #12]
 8006534:	2b00      	cmp	r3, #0
 8006536:	bfbb      	ittet	lt
 8006538:	425b      	neglt	r3, r3
 800653a:	f042 0202 	orrlt.w	r2, r2, #2
 800653e:	9307      	strge	r3, [sp, #28]
 8006540:	9307      	strlt	r3, [sp, #28]
 8006542:	bfb8      	it	lt
 8006544:	9204      	strlt	r2, [sp, #16]
 8006546:	7823      	ldrb	r3, [r4, #0]
 8006548:	2b2e      	cmp	r3, #46	@ 0x2e
 800654a:	d10a      	bne.n	8006562 <_vfiprintf_r+0x156>
 800654c:	7863      	ldrb	r3, [r4, #1]
 800654e:	2b2a      	cmp	r3, #42	@ 0x2a
 8006550:	d132      	bne.n	80065b8 <_vfiprintf_r+0x1ac>
 8006552:	9b03      	ldr	r3, [sp, #12]
 8006554:	1d1a      	adds	r2, r3, #4
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	9203      	str	r2, [sp, #12]
 800655a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800655e:	3402      	adds	r4, #2
 8006560:	9305      	str	r3, [sp, #20]
 8006562:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006638 <_vfiprintf_r+0x22c>
 8006566:	7821      	ldrb	r1, [r4, #0]
 8006568:	2203      	movs	r2, #3
 800656a:	4650      	mov	r0, sl
 800656c:	f7f9 fe50 	bl	8000210 <memchr>
 8006570:	b138      	cbz	r0, 8006582 <_vfiprintf_r+0x176>
 8006572:	9b04      	ldr	r3, [sp, #16]
 8006574:	eba0 000a 	sub.w	r0, r0, sl
 8006578:	2240      	movs	r2, #64	@ 0x40
 800657a:	4082      	lsls	r2, r0
 800657c:	4313      	orrs	r3, r2
 800657e:	3401      	adds	r4, #1
 8006580:	9304      	str	r3, [sp, #16]
 8006582:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006586:	4829      	ldr	r0, [pc, #164]	@ (800662c <_vfiprintf_r+0x220>)
 8006588:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800658c:	2206      	movs	r2, #6
 800658e:	f7f9 fe3f 	bl	8000210 <memchr>
 8006592:	2800      	cmp	r0, #0
 8006594:	d03f      	beq.n	8006616 <_vfiprintf_r+0x20a>
 8006596:	4b26      	ldr	r3, [pc, #152]	@ (8006630 <_vfiprintf_r+0x224>)
 8006598:	bb1b      	cbnz	r3, 80065e2 <_vfiprintf_r+0x1d6>
 800659a:	9b03      	ldr	r3, [sp, #12]
 800659c:	3307      	adds	r3, #7
 800659e:	f023 0307 	bic.w	r3, r3, #7
 80065a2:	3308      	adds	r3, #8
 80065a4:	9303      	str	r3, [sp, #12]
 80065a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80065a8:	443b      	add	r3, r7
 80065aa:	9309      	str	r3, [sp, #36]	@ 0x24
 80065ac:	e76a      	b.n	8006484 <_vfiprintf_r+0x78>
 80065ae:	fb0c 3202 	mla	r2, ip, r2, r3
 80065b2:	460c      	mov	r4, r1
 80065b4:	2001      	movs	r0, #1
 80065b6:	e7a8      	b.n	800650a <_vfiprintf_r+0xfe>
 80065b8:	2300      	movs	r3, #0
 80065ba:	3401      	adds	r4, #1
 80065bc:	9305      	str	r3, [sp, #20]
 80065be:	4619      	mov	r1, r3
 80065c0:	f04f 0c0a 	mov.w	ip, #10
 80065c4:	4620      	mov	r0, r4
 80065c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80065ca:	3a30      	subs	r2, #48	@ 0x30
 80065cc:	2a09      	cmp	r2, #9
 80065ce:	d903      	bls.n	80065d8 <_vfiprintf_r+0x1cc>
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d0c6      	beq.n	8006562 <_vfiprintf_r+0x156>
 80065d4:	9105      	str	r1, [sp, #20]
 80065d6:	e7c4      	b.n	8006562 <_vfiprintf_r+0x156>
 80065d8:	fb0c 2101 	mla	r1, ip, r1, r2
 80065dc:	4604      	mov	r4, r0
 80065de:	2301      	movs	r3, #1
 80065e0:	e7f0      	b.n	80065c4 <_vfiprintf_r+0x1b8>
 80065e2:	ab03      	add	r3, sp, #12
 80065e4:	9300      	str	r3, [sp, #0]
 80065e6:	462a      	mov	r2, r5
 80065e8:	4b12      	ldr	r3, [pc, #72]	@ (8006634 <_vfiprintf_r+0x228>)
 80065ea:	a904      	add	r1, sp, #16
 80065ec:	4630      	mov	r0, r6
 80065ee:	f3af 8000 	nop.w
 80065f2:	4607      	mov	r7, r0
 80065f4:	1c78      	adds	r0, r7, #1
 80065f6:	d1d6      	bne.n	80065a6 <_vfiprintf_r+0x19a>
 80065f8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80065fa:	07d9      	lsls	r1, r3, #31
 80065fc:	d405      	bmi.n	800660a <_vfiprintf_r+0x1fe>
 80065fe:	89ab      	ldrh	r3, [r5, #12]
 8006600:	059a      	lsls	r2, r3, #22
 8006602:	d402      	bmi.n	800660a <_vfiprintf_r+0x1fe>
 8006604:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006606:	f7ff fdb7 	bl	8006178 <__retarget_lock_release_recursive>
 800660a:	89ab      	ldrh	r3, [r5, #12]
 800660c:	065b      	lsls	r3, r3, #25
 800660e:	f53f af1f 	bmi.w	8006450 <_vfiprintf_r+0x44>
 8006612:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006614:	e71e      	b.n	8006454 <_vfiprintf_r+0x48>
 8006616:	ab03      	add	r3, sp, #12
 8006618:	9300      	str	r3, [sp, #0]
 800661a:	462a      	mov	r2, r5
 800661c:	4b05      	ldr	r3, [pc, #20]	@ (8006634 <_vfiprintf_r+0x228>)
 800661e:	a904      	add	r1, sp, #16
 8006620:	4630      	mov	r0, r6
 8006622:	f000 f879 	bl	8006718 <_printf_i>
 8006626:	e7e4      	b.n	80065f2 <_vfiprintf_r+0x1e6>
 8006628:	0800715a 	.word	0x0800715a
 800662c:	08007164 	.word	0x08007164
 8006630:	00000000 	.word	0x00000000
 8006634:	080063e7 	.word	0x080063e7
 8006638:	08007160 	.word	0x08007160

0800663c <_printf_common>:
 800663c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006640:	4616      	mov	r6, r2
 8006642:	4698      	mov	r8, r3
 8006644:	688a      	ldr	r2, [r1, #8]
 8006646:	690b      	ldr	r3, [r1, #16]
 8006648:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800664c:	4293      	cmp	r3, r2
 800664e:	bfb8      	it	lt
 8006650:	4613      	movlt	r3, r2
 8006652:	6033      	str	r3, [r6, #0]
 8006654:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006658:	4607      	mov	r7, r0
 800665a:	460c      	mov	r4, r1
 800665c:	b10a      	cbz	r2, 8006662 <_printf_common+0x26>
 800665e:	3301      	adds	r3, #1
 8006660:	6033      	str	r3, [r6, #0]
 8006662:	6823      	ldr	r3, [r4, #0]
 8006664:	0699      	lsls	r1, r3, #26
 8006666:	bf42      	ittt	mi
 8006668:	6833      	ldrmi	r3, [r6, #0]
 800666a:	3302      	addmi	r3, #2
 800666c:	6033      	strmi	r3, [r6, #0]
 800666e:	6825      	ldr	r5, [r4, #0]
 8006670:	f015 0506 	ands.w	r5, r5, #6
 8006674:	d106      	bne.n	8006684 <_printf_common+0x48>
 8006676:	f104 0a19 	add.w	sl, r4, #25
 800667a:	68e3      	ldr	r3, [r4, #12]
 800667c:	6832      	ldr	r2, [r6, #0]
 800667e:	1a9b      	subs	r3, r3, r2
 8006680:	42ab      	cmp	r3, r5
 8006682:	dc26      	bgt.n	80066d2 <_printf_common+0x96>
 8006684:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006688:	6822      	ldr	r2, [r4, #0]
 800668a:	3b00      	subs	r3, #0
 800668c:	bf18      	it	ne
 800668e:	2301      	movne	r3, #1
 8006690:	0692      	lsls	r2, r2, #26
 8006692:	d42b      	bmi.n	80066ec <_printf_common+0xb0>
 8006694:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006698:	4641      	mov	r1, r8
 800669a:	4638      	mov	r0, r7
 800669c:	47c8      	blx	r9
 800669e:	3001      	adds	r0, #1
 80066a0:	d01e      	beq.n	80066e0 <_printf_common+0xa4>
 80066a2:	6823      	ldr	r3, [r4, #0]
 80066a4:	6922      	ldr	r2, [r4, #16]
 80066a6:	f003 0306 	and.w	r3, r3, #6
 80066aa:	2b04      	cmp	r3, #4
 80066ac:	bf02      	ittt	eq
 80066ae:	68e5      	ldreq	r5, [r4, #12]
 80066b0:	6833      	ldreq	r3, [r6, #0]
 80066b2:	1aed      	subeq	r5, r5, r3
 80066b4:	68a3      	ldr	r3, [r4, #8]
 80066b6:	bf0c      	ite	eq
 80066b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80066bc:	2500      	movne	r5, #0
 80066be:	4293      	cmp	r3, r2
 80066c0:	bfc4      	itt	gt
 80066c2:	1a9b      	subgt	r3, r3, r2
 80066c4:	18ed      	addgt	r5, r5, r3
 80066c6:	2600      	movs	r6, #0
 80066c8:	341a      	adds	r4, #26
 80066ca:	42b5      	cmp	r5, r6
 80066cc:	d11a      	bne.n	8006704 <_printf_common+0xc8>
 80066ce:	2000      	movs	r0, #0
 80066d0:	e008      	b.n	80066e4 <_printf_common+0xa8>
 80066d2:	2301      	movs	r3, #1
 80066d4:	4652      	mov	r2, sl
 80066d6:	4641      	mov	r1, r8
 80066d8:	4638      	mov	r0, r7
 80066da:	47c8      	blx	r9
 80066dc:	3001      	adds	r0, #1
 80066de:	d103      	bne.n	80066e8 <_printf_common+0xac>
 80066e0:	f04f 30ff 	mov.w	r0, #4294967295
 80066e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066e8:	3501      	adds	r5, #1
 80066ea:	e7c6      	b.n	800667a <_printf_common+0x3e>
 80066ec:	18e1      	adds	r1, r4, r3
 80066ee:	1c5a      	adds	r2, r3, #1
 80066f0:	2030      	movs	r0, #48	@ 0x30
 80066f2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80066f6:	4422      	add	r2, r4
 80066f8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80066fc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006700:	3302      	adds	r3, #2
 8006702:	e7c7      	b.n	8006694 <_printf_common+0x58>
 8006704:	2301      	movs	r3, #1
 8006706:	4622      	mov	r2, r4
 8006708:	4641      	mov	r1, r8
 800670a:	4638      	mov	r0, r7
 800670c:	47c8      	blx	r9
 800670e:	3001      	adds	r0, #1
 8006710:	d0e6      	beq.n	80066e0 <_printf_common+0xa4>
 8006712:	3601      	adds	r6, #1
 8006714:	e7d9      	b.n	80066ca <_printf_common+0x8e>
	...

08006718 <_printf_i>:
 8006718:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800671c:	7e0f      	ldrb	r7, [r1, #24]
 800671e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006720:	2f78      	cmp	r7, #120	@ 0x78
 8006722:	4691      	mov	r9, r2
 8006724:	4680      	mov	r8, r0
 8006726:	460c      	mov	r4, r1
 8006728:	469a      	mov	sl, r3
 800672a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800672e:	d807      	bhi.n	8006740 <_printf_i+0x28>
 8006730:	2f62      	cmp	r7, #98	@ 0x62
 8006732:	d80a      	bhi.n	800674a <_printf_i+0x32>
 8006734:	2f00      	cmp	r7, #0
 8006736:	f000 80d2 	beq.w	80068de <_printf_i+0x1c6>
 800673a:	2f58      	cmp	r7, #88	@ 0x58
 800673c:	f000 80b9 	beq.w	80068b2 <_printf_i+0x19a>
 8006740:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006744:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006748:	e03a      	b.n	80067c0 <_printf_i+0xa8>
 800674a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800674e:	2b15      	cmp	r3, #21
 8006750:	d8f6      	bhi.n	8006740 <_printf_i+0x28>
 8006752:	a101      	add	r1, pc, #4	@ (adr r1, 8006758 <_printf_i+0x40>)
 8006754:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006758:	080067b1 	.word	0x080067b1
 800675c:	080067c5 	.word	0x080067c5
 8006760:	08006741 	.word	0x08006741
 8006764:	08006741 	.word	0x08006741
 8006768:	08006741 	.word	0x08006741
 800676c:	08006741 	.word	0x08006741
 8006770:	080067c5 	.word	0x080067c5
 8006774:	08006741 	.word	0x08006741
 8006778:	08006741 	.word	0x08006741
 800677c:	08006741 	.word	0x08006741
 8006780:	08006741 	.word	0x08006741
 8006784:	080068c5 	.word	0x080068c5
 8006788:	080067ef 	.word	0x080067ef
 800678c:	0800687f 	.word	0x0800687f
 8006790:	08006741 	.word	0x08006741
 8006794:	08006741 	.word	0x08006741
 8006798:	080068e7 	.word	0x080068e7
 800679c:	08006741 	.word	0x08006741
 80067a0:	080067ef 	.word	0x080067ef
 80067a4:	08006741 	.word	0x08006741
 80067a8:	08006741 	.word	0x08006741
 80067ac:	08006887 	.word	0x08006887
 80067b0:	6833      	ldr	r3, [r6, #0]
 80067b2:	1d1a      	adds	r2, r3, #4
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	6032      	str	r2, [r6, #0]
 80067b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80067bc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80067c0:	2301      	movs	r3, #1
 80067c2:	e09d      	b.n	8006900 <_printf_i+0x1e8>
 80067c4:	6833      	ldr	r3, [r6, #0]
 80067c6:	6820      	ldr	r0, [r4, #0]
 80067c8:	1d19      	adds	r1, r3, #4
 80067ca:	6031      	str	r1, [r6, #0]
 80067cc:	0606      	lsls	r6, r0, #24
 80067ce:	d501      	bpl.n	80067d4 <_printf_i+0xbc>
 80067d0:	681d      	ldr	r5, [r3, #0]
 80067d2:	e003      	b.n	80067dc <_printf_i+0xc4>
 80067d4:	0645      	lsls	r5, r0, #25
 80067d6:	d5fb      	bpl.n	80067d0 <_printf_i+0xb8>
 80067d8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80067dc:	2d00      	cmp	r5, #0
 80067de:	da03      	bge.n	80067e8 <_printf_i+0xd0>
 80067e0:	232d      	movs	r3, #45	@ 0x2d
 80067e2:	426d      	negs	r5, r5
 80067e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80067e8:	4859      	ldr	r0, [pc, #356]	@ (8006950 <_printf_i+0x238>)
 80067ea:	230a      	movs	r3, #10
 80067ec:	e011      	b.n	8006812 <_printf_i+0xfa>
 80067ee:	6821      	ldr	r1, [r4, #0]
 80067f0:	6833      	ldr	r3, [r6, #0]
 80067f2:	0608      	lsls	r0, r1, #24
 80067f4:	f853 5b04 	ldr.w	r5, [r3], #4
 80067f8:	d402      	bmi.n	8006800 <_printf_i+0xe8>
 80067fa:	0649      	lsls	r1, r1, #25
 80067fc:	bf48      	it	mi
 80067fe:	b2ad      	uxthmi	r5, r5
 8006800:	2f6f      	cmp	r7, #111	@ 0x6f
 8006802:	4853      	ldr	r0, [pc, #332]	@ (8006950 <_printf_i+0x238>)
 8006804:	6033      	str	r3, [r6, #0]
 8006806:	bf14      	ite	ne
 8006808:	230a      	movne	r3, #10
 800680a:	2308      	moveq	r3, #8
 800680c:	2100      	movs	r1, #0
 800680e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006812:	6866      	ldr	r6, [r4, #4]
 8006814:	60a6      	str	r6, [r4, #8]
 8006816:	2e00      	cmp	r6, #0
 8006818:	bfa2      	ittt	ge
 800681a:	6821      	ldrge	r1, [r4, #0]
 800681c:	f021 0104 	bicge.w	r1, r1, #4
 8006820:	6021      	strge	r1, [r4, #0]
 8006822:	b90d      	cbnz	r5, 8006828 <_printf_i+0x110>
 8006824:	2e00      	cmp	r6, #0
 8006826:	d04b      	beq.n	80068c0 <_printf_i+0x1a8>
 8006828:	4616      	mov	r6, r2
 800682a:	fbb5 f1f3 	udiv	r1, r5, r3
 800682e:	fb03 5711 	mls	r7, r3, r1, r5
 8006832:	5dc7      	ldrb	r7, [r0, r7]
 8006834:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006838:	462f      	mov	r7, r5
 800683a:	42bb      	cmp	r3, r7
 800683c:	460d      	mov	r5, r1
 800683e:	d9f4      	bls.n	800682a <_printf_i+0x112>
 8006840:	2b08      	cmp	r3, #8
 8006842:	d10b      	bne.n	800685c <_printf_i+0x144>
 8006844:	6823      	ldr	r3, [r4, #0]
 8006846:	07df      	lsls	r7, r3, #31
 8006848:	d508      	bpl.n	800685c <_printf_i+0x144>
 800684a:	6923      	ldr	r3, [r4, #16]
 800684c:	6861      	ldr	r1, [r4, #4]
 800684e:	4299      	cmp	r1, r3
 8006850:	bfde      	ittt	le
 8006852:	2330      	movle	r3, #48	@ 0x30
 8006854:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006858:	f106 36ff 	addle.w	r6, r6, #4294967295
 800685c:	1b92      	subs	r2, r2, r6
 800685e:	6122      	str	r2, [r4, #16]
 8006860:	f8cd a000 	str.w	sl, [sp]
 8006864:	464b      	mov	r3, r9
 8006866:	aa03      	add	r2, sp, #12
 8006868:	4621      	mov	r1, r4
 800686a:	4640      	mov	r0, r8
 800686c:	f7ff fee6 	bl	800663c <_printf_common>
 8006870:	3001      	adds	r0, #1
 8006872:	d14a      	bne.n	800690a <_printf_i+0x1f2>
 8006874:	f04f 30ff 	mov.w	r0, #4294967295
 8006878:	b004      	add	sp, #16
 800687a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800687e:	6823      	ldr	r3, [r4, #0]
 8006880:	f043 0320 	orr.w	r3, r3, #32
 8006884:	6023      	str	r3, [r4, #0]
 8006886:	4833      	ldr	r0, [pc, #204]	@ (8006954 <_printf_i+0x23c>)
 8006888:	2778      	movs	r7, #120	@ 0x78
 800688a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800688e:	6823      	ldr	r3, [r4, #0]
 8006890:	6831      	ldr	r1, [r6, #0]
 8006892:	061f      	lsls	r7, r3, #24
 8006894:	f851 5b04 	ldr.w	r5, [r1], #4
 8006898:	d402      	bmi.n	80068a0 <_printf_i+0x188>
 800689a:	065f      	lsls	r7, r3, #25
 800689c:	bf48      	it	mi
 800689e:	b2ad      	uxthmi	r5, r5
 80068a0:	6031      	str	r1, [r6, #0]
 80068a2:	07d9      	lsls	r1, r3, #31
 80068a4:	bf44      	itt	mi
 80068a6:	f043 0320 	orrmi.w	r3, r3, #32
 80068aa:	6023      	strmi	r3, [r4, #0]
 80068ac:	b11d      	cbz	r5, 80068b6 <_printf_i+0x19e>
 80068ae:	2310      	movs	r3, #16
 80068b0:	e7ac      	b.n	800680c <_printf_i+0xf4>
 80068b2:	4827      	ldr	r0, [pc, #156]	@ (8006950 <_printf_i+0x238>)
 80068b4:	e7e9      	b.n	800688a <_printf_i+0x172>
 80068b6:	6823      	ldr	r3, [r4, #0]
 80068b8:	f023 0320 	bic.w	r3, r3, #32
 80068bc:	6023      	str	r3, [r4, #0]
 80068be:	e7f6      	b.n	80068ae <_printf_i+0x196>
 80068c0:	4616      	mov	r6, r2
 80068c2:	e7bd      	b.n	8006840 <_printf_i+0x128>
 80068c4:	6833      	ldr	r3, [r6, #0]
 80068c6:	6825      	ldr	r5, [r4, #0]
 80068c8:	6961      	ldr	r1, [r4, #20]
 80068ca:	1d18      	adds	r0, r3, #4
 80068cc:	6030      	str	r0, [r6, #0]
 80068ce:	062e      	lsls	r6, r5, #24
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	d501      	bpl.n	80068d8 <_printf_i+0x1c0>
 80068d4:	6019      	str	r1, [r3, #0]
 80068d6:	e002      	b.n	80068de <_printf_i+0x1c6>
 80068d8:	0668      	lsls	r0, r5, #25
 80068da:	d5fb      	bpl.n	80068d4 <_printf_i+0x1bc>
 80068dc:	8019      	strh	r1, [r3, #0]
 80068de:	2300      	movs	r3, #0
 80068e0:	6123      	str	r3, [r4, #16]
 80068e2:	4616      	mov	r6, r2
 80068e4:	e7bc      	b.n	8006860 <_printf_i+0x148>
 80068e6:	6833      	ldr	r3, [r6, #0]
 80068e8:	1d1a      	adds	r2, r3, #4
 80068ea:	6032      	str	r2, [r6, #0]
 80068ec:	681e      	ldr	r6, [r3, #0]
 80068ee:	6862      	ldr	r2, [r4, #4]
 80068f0:	2100      	movs	r1, #0
 80068f2:	4630      	mov	r0, r6
 80068f4:	f7f9 fc8c 	bl	8000210 <memchr>
 80068f8:	b108      	cbz	r0, 80068fe <_printf_i+0x1e6>
 80068fa:	1b80      	subs	r0, r0, r6
 80068fc:	6060      	str	r0, [r4, #4]
 80068fe:	6863      	ldr	r3, [r4, #4]
 8006900:	6123      	str	r3, [r4, #16]
 8006902:	2300      	movs	r3, #0
 8006904:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006908:	e7aa      	b.n	8006860 <_printf_i+0x148>
 800690a:	6923      	ldr	r3, [r4, #16]
 800690c:	4632      	mov	r2, r6
 800690e:	4649      	mov	r1, r9
 8006910:	4640      	mov	r0, r8
 8006912:	47d0      	blx	sl
 8006914:	3001      	adds	r0, #1
 8006916:	d0ad      	beq.n	8006874 <_printf_i+0x15c>
 8006918:	6823      	ldr	r3, [r4, #0]
 800691a:	079b      	lsls	r3, r3, #30
 800691c:	d413      	bmi.n	8006946 <_printf_i+0x22e>
 800691e:	68e0      	ldr	r0, [r4, #12]
 8006920:	9b03      	ldr	r3, [sp, #12]
 8006922:	4298      	cmp	r0, r3
 8006924:	bfb8      	it	lt
 8006926:	4618      	movlt	r0, r3
 8006928:	e7a6      	b.n	8006878 <_printf_i+0x160>
 800692a:	2301      	movs	r3, #1
 800692c:	4632      	mov	r2, r6
 800692e:	4649      	mov	r1, r9
 8006930:	4640      	mov	r0, r8
 8006932:	47d0      	blx	sl
 8006934:	3001      	adds	r0, #1
 8006936:	d09d      	beq.n	8006874 <_printf_i+0x15c>
 8006938:	3501      	adds	r5, #1
 800693a:	68e3      	ldr	r3, [r4, #12]
 800693c:	9903      	ldr	r1, [sp, #12]
 800693e:	1a5b      	subs	r3, r3, r1
 8006940:	42ab      	cmp	r3, r5
 8006942:	dcf2      	bgt.n	800692a <_printf_i+0x212>
 8006944:	e7eb      	b.n	800691e <_printf_i+0x206>
 8006946:	2500      	movs	r5, #0
 8006948:	f104 0619 	add.w	r6, r4, #25
 800694c:	e7f5      	b.n	800693a <_printf_i+0x222>
 800694e:	bf00      	nop
 8006950:	0800716b 	.word	0x0800716b
 8006954:	0800717c 	.word	0x0800717c

08006958 <__sflush_r>:
 8006958:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800695c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006960:	0716      	lsls	r6, r2, #28
 8006962:	4605      	mov	r5, r0
 8006964:	460c      	mov	r4, r1
 8006966:	d454      	bmi.n	8006a12 <__sflush_r+0xba>
 8006968:	684b      	ldr	r3, [r1, #4]
 800696a:	2b00      	cmp	r3, #0
 800696c:	dc02      	bgt.n	8006974 <__sflush_r+0x1c>
 800696e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006970:	2b00      	cmp	r3, #0
 8006972:	dd48      	ble.n	8006a06 <__sflush_r+0xae>
 8006974:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006976:	2e00      	cmp	r6, #0
 8006978:	d045      	beq.n	8006a06 <__sflush_r+0xae>
 800697a:	2300      	movs	r3, #0
 800697c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006980:	682f      	ldr	r7, [r5, #0]
 8006982:	6a21      	ldr	r1, [r4, #32]
 8006984:	602b      	str	r3, [r5, #0]
 8006986:	d030      	beq.n	80069ea <__sflush_r+0x92>
 8006988:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800698a:	89a3      	ldrh	r3, [r4, #12]
 800698c:	0759      	lsls	r1, r3, #29
 800698e:	d505      	bpl.n	800699c <__sflush_r+0x44>
 8006990:	6863      	ldr	r3, [r4, #4]
 8006992:	1ad2      	subs	r2, r2, r3
 8006994:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006996:	b10b      	cbz	r3, 800699c <__sflush_r+0x44>
 8006998:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800699a:	1ad2      	subs	r2, r2, r3
 800699c:	2300      	movs	r3, #0
 800699e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80069a0:	6a21      	ldr	r1, [r4, #32]
 80069a2:	4628      	mov	r0, r5
 80069a4:	47b0      	blx	r6
 80069a6:	1c43      	adds	r3, r0, #1
 80069a8:	89a3      	ldrh	r3, [r4, #12]
 80069aa:	d106      	bne.n	80069ba <__sflush_r+0x62>
 80069ac:	6829      	ldr	r1, [r5, #0]
 80069ae:	291d      	cmp	r1, #29
 80069b0:	d82b      	bhi.n	8006a0a <__sflush_r+0xb2>
 80069b2:	4a2a      	ldr	r2, [pc, #168]	@ (8006a5c <__sflush_r+0x104>)
 80069b4:	410a      	asrs	r2, r1
 80069b6:	07d6      	lsls	r6, r2, #31
 80069b8:	d427      	bmi.n	8006a0a <__sflush_r+0xb2>
 80069ba:	2200      	movs	r2, #0
 80069bc:	6062      	str	r2, [r4, #4]
 80069be:	04d9      	lsls	r1, r3, #19
 80069c0:	6922      	ldr	r2, [r4, #16]
 80069c2:	6022      	str	r2, [r4, #0]
 80069c4:	d504      	bpl.n	80069d0 <__sflush_r+0x78>
 80069c6:	1c42      	adds	r2, r0, #1
 80069c8:	d101      	bne.n	80069ce <__sflush_r+0x76>
 80069ca:	682b      	ldr	r3, [r5, #0]
 80069cc:	b903      	cbnz	r3, 80069d0 <__sflush_r+0x78>
 80069ce:	6560      	str	r0, [r4, #84]	@ 0x54
 80069d0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80069d2:	602f      	str	r7, [r5, #0]
 80069d4:	b1b9      	cbz	r1, 8006a06 <__sflush_r+0xae>
 80069d6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80069da:	4299      	cmp	r1, r3
 80069dc:	d002      	beq.n	80069e4 <__sflush_r+0x8c>
 80069de:	4628      	mov	r0, r5
 80069e0:	f7ff fbea 	bl	80061b8 <_free_r>
 80069e4:	2300      	movs	r3, #0
 80069e6:	6363      	str	r3, [r4, #52]	@ 0x34
 80069e8:	e00d      	b.n	8006a06 <__sflush_r+0xae>
 80069ea:	2301      	movs	r3, #1
 80069ec:	4628      	mov	r0, r5
 80069ee:	47b0      	blx	r6
 80069f0:	4602      	mov	r2, r0
 80069f2:	1c50      	adds	r0, r2, #1
 80069f4:	d1c9      	bne.n	800698a <__sflush_r+0x32>
 80069f6:	682b      	ldr	r3, [r5, #0]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d0c6      	beq.n	800698a <__sflush_r+0x32>
 80069fc:	2b1d      	cmp	r3, #29
 80069fe:	d001      	beq.n	8006a04 <__sflush_r+0xac>
 8006a00:	2b16      	cmp	r3, #22
 8006a02:	d11e      	bne.n	8006a42 <__sflush_r+0xea>
 8006a04:	602f      	str	r7, [r5, #0]
 8006a06:	2000      	movs	r0, #0
 8006a08:	e022      	b.n	8006a50 <__sflush_r+0xf8>
 8006a0a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006a0e:	b21b      	sxth	r3, r3
 8006a10:	e01b      	b.n	8006a4a <__sflush_r+0xf2>
 8006a12:	690f      	ldr	r7, [r1, #16]
 8006a14:	2f00      	cmp	r7, #0
 8006a16:	d0f6      	beq.n	8006a06 <__sflush_r+0xae>
 8006a18:	0793      	lsls	r3, r2, #30
 8006a1a:	680e      	ldr	r6, [r1, #0]
 8006a1c:	bf08      	it	eq
 8006a1e:	694b      	ldreq	r3, [r1, #20]
 8006a20:	600f      	str	r7, [r1, #0]
 8006a22:	bf18      	it	ne
 8006a24:	2300      	movne	r3, #0
 8006a26:	eba6 0807 	sub.w	r8, r6, r7
 8006a2a:	608b      	str	r3, [r1, #8]
 8006a2c:	f1b8 0f00 	cmp.w	r8, #0
 8006a30:	dde9      	ble.n	8006a06 <__sflush_r+0xae>
 8006a32:	6a21      	ldr	r1, [r4, #32]
 8006a34:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006a36:	4643      	mov	r3, r8
 8006a38:	463a      	mov	r2, r7
 8006a3a:	4628      	mov	r0, r5
 8006a3c:	47b0      	blx	r6
 8006a3e:	2800      	cmp	r0, #0
 8006a40:	dc08      	bgt.n	8006a54 <__sflush_r+0xfc>
 8006a42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006a4a:	81a3      	strh	r3, [r4, #12]
 8006a4c:	f04f 30ff 	mov.w	r0, #4294967295
 8006a50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a54:	4407      	add	r7, r0
 8006a56:	eba8 0800 	sub.w	r8, r8, r0
 8006a5a:	e7e7      	b.n	8006a2c <__sflush_r+0xd4>
 8006a5c:	dfbffffe 	.word	0xdfbffffe

08006a60 <_fflush_r>:
 8006a60:	b538      	push	{r3, r4, r5, lr}
 8006a62:	690b      	ldr	r3, [r1, #16]
 8006a64:	4605      	mov	r5, r0
 8006a66:	460c      	mov	r4, r1
 8006a68:	b913      	cbnz	r3, 8006a70 <_fflush_r+0x10>
 8006a6a:	2500      	movs	r5, #0
 8006a6c:	4628      	mov	r0, r5
 8006a6e:	bd38      	pop	{r3, r4, r5, pc}
 8006a70:	b118      	cbz	r0, 8006a7a <_fflush_r+0x1a>
 8006a72:	6a03      	ldr	r3, [r0, #32]
 8006a74:	b90b      	cbnz	r3, 8006a7a <_fflush_r+0x1a>
 8006a76:	f7ff f911 	bl	8005c9c <__sinit>
 8006a7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d0f3      	beq.n	8006a6a <_fflush_r+0xa>
 8006a82:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006a84:	07d0      	lsls	r0, r2, #31
 8006a86:	d404      	bmi.n	8006a92 <_fflush_r+0x32>
 8006a88:	0599      	lsls	r1, r3, #22
 8006a8a:	d402      	bmi.n	8006a92 <_fflush_r+0x32>
 8006a8c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006a8e:	f7ff fb72 	bl	8006176 <__retarget_lock_acquire_recursive>
 8006a92:	4628      	mov	r0, r5
 8006a94:	4621      	mov	r1, r4
 8006a96:	f7ff ff5f 	bl	8006958 <__sflush_r>
 8006a9a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006a9c:	07da      	lsls	r2, r3, #31
 8006a9e:	4605      	mov	r5, r0
 8006aa0:	d4e4      	bmi.n	8006a6c <_fflush_r+0xc>
 8006aa2:	89a3      	ldrh	r3, [r4, #12]
 8006aa4:	059b      	lsls	r3, r3, #22
 8006aa6:	d4e1      	bmi.n	8006a6c <_fflush_r+0xc>
 8006aa8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006aaa:	f7ff fb65 	bl	8006178 <__retarget_lock_release_recursive>
 8006aae:	e7dd      	b.n	8006a6c <_fflush_r+0xc>

08006ab0 <fiprintf>:
 8006ab0:	b40e      	push	{r1, r2, r3}
 8006ab2:	b503      	push	{r0, r1, lr}
 8006ab4:	4601      	mov	r1, r0
 8006ab6:	ab03      	add	r3, sp, #12
 8006ab8:	4805      	ldr	r0, [pc, #20]	@ (8006ad0 <fiprintf+0x20>)
 8006aba:	f853 2b04 	ldr.w	r2, [r3], #4
 8006abe:	6800      	ldr	r0, [r0, #0]
 8006ac0:	9301      	str	r3, [sp, #4]
 8006ac2:	f7ff fca3 	bl	800640c <_vfiprintf_r>
 8006ac6:	b002      	add	sp, #8
 8006ac8:	f85d eb04 	ldr.w	lr, [sp], #4
 8006acc:	b003      	add	sp, #12
 8006ace:	4770      	bx	lr
 8006ad0:	2000005c 	.word	0x2000005c

08006ad4 <__swhatbuf_r>:
 8006ad4:	b570      	push	{r4, r5, r6, lr}
 8006ad6:	460c      	mov	r4, r1
 8006ad8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006adc:	2900      	cmp	r1, #0
 8006ade:	b096      	sub	sp, #88	@ 0x58
 8006ae0:	4615      	mov	r5, r2
 8006ae2:	461e      	mov	r6, r3
 8006ae4:	da0d      	bge.n	8006b02 <__swhatbuf_r+0x2e>
 8006ae6:	89a3      	ldrh	r3, [r4, #12]
 8006ae8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006aec:	f04f 0100 	mov.w	r1, #0
 8006af0:	bf14      	ite	ne
 8006af2:	2340      	movne	r3, #64	@ 0x40
 8006af4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006af8:	2000      	movs	r0, #0
 8006afa:	6031      	str	r1, [r6, #0]
 8006afc:	602b      	str	r3, [r5, #0]
 8006afe:	b016      	add	sp, #88	@ 0x58
 8006b00:	bd70      	pop	{r4, r5, r6, pc}
 8006b02:	466a      	mov	r2, sp
 8006b04:	f000 f87c 	bl	8006c00 <_fstat_r>
 8006b08:	2800      	cmp	r0, #0
 8006b0a:	dbec      	blt.n	8006ae6 <__swhatbuf_r+0x12>
 8006b0c:	9901      	ldr	r1, [sp, #4]
 8006b0e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006b12:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006b16:	4259      	negs	r1, r3
 8006b18:	4159      	adcs	r1, r3
 8006b1a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006b1e:	e7eb      	b.n	8006af8 <__swhatbuf_r+0x24>

08006b20 <__smakebuf_r>:
 8006b20:	898b      	ldrh	r3, [r1, #12]
 8006b22:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006b24:	079d      	lsls	r5, r3, #30
 8006b26:	4606      	mov	r6, r0
 8006b28:	460c      	mov	r4, r1
 8006b2a:	d507      	bpl.n	8006b3c <__smakebuf_r+0x1c>
 8006b2c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006b30:	6023      	str	r3, [r4, #0]
 8006b32:	6123      	str	r3, [r4, #16]
 8006b34:	2301      	movs	r3, #1
 8006b36:	6163      	str	r3, [r4, #20]
 8006b38:	b003      	add	sp, #12
 8006b3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b3c:	ab01      	add	r3, sp, #4
 8006b3e:	466a      	mov	r2, sp
 8006b40:	f7ff ffc8 	bl	8006ad4 <__swhatbuf_r>
 8006b44:	9f00      	ldr	r7, [sp, #0]
 8006b46:	4605      	mov	r5, r0
 8006b48:	4639      	mov	r1, r7
 8006b4a:	4630      	mov	r0, r6
 8006b4c:	f7ff fba8 	bl	80062a0 <_malloc_r>
 8006b50:	b948      	cbnz	r0, 8006b66 <__smakebuf_r+0x46>
 8006b52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b56:	059a      	lsls	r2, r3, #22
 8006b58:	d4ee      	bmi.n	8006b38 <__smakebuf_r+0x18>
 8006b5a:	f023 0303 	bic.w	r3, r3, #3
 8006b5e:	f043 0302 	orr.w	r3, r3, #2
 8006b62:	81a3      	strh	r3, [r4, #12]
 8006b64:	e7e2      	b.n	8006b2c <__smakebuf_r+0xc>
 8006b66:	89a3      	ldrh	r3, [r4, #12]
 8006b68:	6020      	str	r0, [r4, #0]
 8006b6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b6e:	81a3      	strh	r3, [r4, #12]
 8006b70:	9b01      	ldr	r3, [sp, #4]
 8006b72:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006b76:	b15b      	cbz	r3, 8006b90 <__smakebuf_r+0x70>
 8006b78:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006b7c:	4630      	mov	r0, r6
 8006b7e:	f000 f851 	bl	8006c24 <_isatty_r>
 8006b82:	b128      	cbz	r0, 8006b90 <__smakebuf_r+0x70>
 8006b84:	89a3      	ldrh	r3, [r4, #12]
 8006b86:	f023 0303 	bic.w	r3, r3, #3
 8006b8a:	f043 0301 	orr.w	r3, r3, #1
 8006b8e:	81a3      	strh	r3, [r4, #12]
 8006b90:	89a3      	ldrh	r3, [r4, #12]
 8006b92:	431d      	orrs	r5, r3
 8006b94:	81a5      	strh	r5, [r4, #12]
 8006b96:	e7cf      	b.n	8006b38 <__smakebuf_r+0x18>

08006b98 <_putc_r>:
 8006b98:	b570      	push	{r4, r5, r6, lr}
 8006b9a:	460d      	mov	r5, r1
 8006b9c:	4614      	mov	r4, r2
 8006b9e:	4606      	mov	r6, r0
 8006ba0:	b118      	cbz	r0, 8006baa <_putc_r+0x12>
 8006ba2:	6a03      	ldr	r3, [r0, #32]
 8006ba4:	b90b      	cbnz	r3, 8006baa <_putc_r+0x12>
 8006ba6:	f7ff f879 	bl	8005c9c <__sinit>
 8006baa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006bac:	07d8      	lsls	r0, r3, #31
 8006bae:	d405      	bmi.n	8006bbc <_putc_r+0x24>
 8006bb0:	89a3      	ldrh	r3, [r4, #12]
 8006bb2:	0599      	lsls	r1, r3, #22
 8006bb4:	d402      	bmi.n	8006bbc <_putc_r+0x24>
 8006bb6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006bb8:	f7ff fadd 	bl	8006176 <__retarget_lock_acquire_recursive>
 8006bbc:	68a3      	ldr	r3, [r4, #8]
 8006bbe:	3b01      	subs	r3, #1
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	60a3      	str	r3, [r4, #8]
 8006bc4:	da05      	bge.n	8006bd2 <_putc_r+0x3a>
 8006bc6:	69a2      	ldr	r2, [r4, #24]
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	db12      	blt.n	8006bf2 <_putc_r+0x5a>
 8006bcc:	b2eb      	uxtb	r3, r5
 8006bce:	2b0a      	cmp	r3, #10
 8006bd0:	d00f      	beq.n	8006bf2 <_putc_r+0x5a>
 8006bd2:	6823      	ldr	r3, [r4, #0]
 8006bd4:	1c5a      	adds	r2, r3, #1
 8006bd6:	6022      	str	r2, [r4, #0]
 8006bd8:	701d      	strb	r5, [r3, #0]
 8006bda:	b2ed      	uxtb	r5, r5
 8006bdc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006bde:	07da      	lsls	r2, r3, #31
 8006be0:	d405      	bmi.n	8006bee <_putc_r+0x56>
 8006be2:	89a3      	ldrh	r3, [r4, #12]
 8006be4:	059b      	lsls	r3, r3, #22
 8006be6:	d402      	bmi.n	8006bee <_putc_r+0x56>
 8006be8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006bea:	f7ff fac5 	bl	8006178 <__retarget_lock_release_recursive>
 8006bee:	4628      	mov	r0, r5
 8006bf0:	bd70      	pop	{r4, r5, r6, pc}
 8006bf2:	4629      	mov	r1, r5
 8006bf4:	4622      	mov	r2, r4
 8006bf6:	4630      	mov	r0, r6
 8006bf8:	f7ff f941 	bl	8005e7e <__swbuf_r>
 8006bfc:	4605      	mov	r5, r0
 8006bfe:	e7ed      	b.n	8006bdc <_putc_r+0x44>

08006c00 <_fstat_r>:
 8006c00:	b538      	push	{r3, r4, r5, lr}
 8006c02:	4d07      	ldr	r5, [pc, #28]	@ (8006c20 <_fstat_r+0x20>)
 8006c04:	2300      	movs	r3, #0
 8006c06:	4604      	mov	r4, r0
 8006c08:	4608      	mov	r0, r1
 8006c0a:	4611      	mov	r1, r2
 8006c0c:	602b      	str	r3, [r5, #0]
 8006c0e:	f7fa fe67 	bl	80018e0 <_fstat>
 8006c12:	1c43      	adds	r3, r0, #1
 8006c14:	d102      	bne.n	8006c1c <_fstat_r+0x1c>
 8006c16:	682b      	ldr	r3, [r5, #0]
 8006c18:	b103      	cbz	r3, 8006c1c <_fstat_r+0x1c>
 8006c1a:	6023      	str	r3, [r4, #0]
 8006c1c:	bd38      	pop	{r3, r4, r5, pc}
 8006c1e:	bf00      	nop
 8006c20:	20000bbc 	.word	0x20000bbc

08006c24 <_isatty_r>:
 8006c24:	b538      	push	{r3, r4, r5, lr}
 8006c26:	4d06      	ldr	r5, [pc, #24]	@ (8006c40 <_isatty_r+0x1c>)
 8006c28:	2300      	movs	r3, #0
 8006c2a:	4604      	mov	r4, r0
 8006c2c:	4608      	mov	r0, r1
 8006c2e:	602b      	str	r3, [r5, #0]
 8006c30:	f7fa fe66 	bl	8001900 <_isatty>
 8006c34:	1c43      	adds	r3, r0, #1
 8006c36:	d102      	bne.n	8006c3e <_isatty_r+0x1a>
 8006c38:	682b      	ldr	r3, [r5, #0]
 8006c3a:	b103      	cbz	r3, 8006c3e <_isatty_r+0x1a>
 8006c3c:	6023      	str	r3, [r4, #0]
 8006c3e:	bd38      	pop	{r3, r4, r5, pc}
 8006c40:	20000bbc 	.word	0x20000bbc

08006c44 <_sbrk_r>:
 8006c44:	b538      	push	{r3, r4, r5, lr}
 8006c46:	4d06      	ldr	r5, [pc, #24]	@ (8006c60 <_sbrk_r+0x1c>)
 8006c48:	2300      	movs	r3, #0
 8006c4a:	4604      	mov	r4, r0
 8006c4c:	4608      	mov	r0, r1
 8006c4e:	602b      	str	r3, [r5, #0]
 8006c50:	f7fa fe6e 	bl	8001930 <_sbrk>
 8006c54:	1c43      	adds	r3, r0, #1
 8006c56:	d102      	bne.n	8006c5e <_sbrk_r+0x1a>
 8006c58:	682b      	ldr	r3, [r5, #0]
 8006c5a:	b103      	cbz	r3, 8006c5e <_sbrk_r+0x1a>
 8006c5c:	6023      	str	r3, [r4, #0]
 8006c5e:	bd38      	pop	{r3, r4, r5, pc}
 8006c60:	20000bbc 	.word	0x20000bbc

08006c64 <abort>:
 8006c64:	b508      	push	{r3, lr}
 8006c66:	2006      	movs	r0, #6
 8006c68:	f000 f82c 	bl	8006cc4 <raise>
 8006c6c:	2001      	movs	r0, #1
 8006c6e:	f7fa fde7 	bl	8001840 <_exit>

08006c72 <_raise_r>:
 8006c72:	291f      	cmp	r1, #31
 8006c74:	b538      	push	{r3, r4, r5, lr}
 8006c76:	4605      	mov	r5, r0
 8006c78:	460c      	mov	r4, r1
 8006c7a:	d904      	bls.n	8006c86 <_raise_r+0x14>
 8006c7c:	2316      	movs	r3, #22
 8006c7e:	6003      	str	r3, [r0, #0]
 8006c80:	f04f 30ff 	mov.w	r0, #4294967295
 8006c84:	bd38      	pop	{r3, r4, r5, pc}
 8006c86:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8006c88:	b112      	cbz	r2, 8006c90 <_raise_r+0x1e>
 8006c8a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006c8e:	b94b      	cbnz	r3, 8006ca4 <_raise_r+0x32>
 8006c90:	4628      	mov	r0, r5
 8006c92:	f000 f831 	bl	8006cf8 <_getpid_r>
 8006c96:	4622      	mov	r2, r4
 8006c98:	4601      	mov	r1, r0
 8006c9a:	4628      	mov	r0, r5
 8006c9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006ca0:	f000 b818 	b.w	8006cd4 <_kill_r>
 8006ca4:	2b01      	cmp	r3, #1
 8006ca6:	d00a      	beq.n	8006cbe <_raise_r+0x4c>
 8006ca8:	1c59      	adds	r1, r3, #1
 8006caa:	d103      	bne.n	8006cb4 <_raise_r+0x42>
 8006cac:	2316      	movs	r3, #22
 8006cae:	6003      	str	r3, [r0, #0]
 8006cb0:	2001      	movs	r0, #1
 8006cb2:	e7e7      	b.n	8006c84 <_raise_r+0x12>
 8006cb4:	2100      	movs	r1, #0
 8006cb6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8006cba:	4620      	mov	r0, r4
 8006cbc:	4798      	blx	r3
 8006cbe:	2000      	movs	r0, #0
 8006cc0:	e7e0      	b.n	8006c84 <_raise_r+0x12>
	...

08006cc4 <raise>:
 8006cc4:	4b02      	ldr	r3, [pc, #8]	@ (8006cd0 <raise+0xc>)
 8006cc6:	4601      	mov	r1, r0
 8006cc8:	6818      	ldr	r0, [r3, #0]
 8006cca:	f7ff bfd2 	b.w	8006c72 <_raise_r>
 8006cce:	bf00      	nop
 8006cd0:	2000005c 	.word	0x2000005c

08006cd4 <_kill_r>:
 8006cd4:	b538      	push	{r3, r4, r5, lr}
 8006cd6:	4d07      	ldr	r5, [pc, #28]	@ (8006cf4 <_kill_r+0x20>)
 8006cd8:	2300      	movs	r3, #0
 8006cda:	4604      	mov	r4, r0
 8006cdc:	4608      	mov	r0, r1
 8006cde:	4611      	mov	r1, r2
 8006ce0:	602b      	str	r3, [r5, #0]
 8006ce2:	f7fa fd9d 	bl	8001820 <_kill>
 8006ce6:	1c43      	adds	r3, r0, #1
 8006ce8:	d102      	bne.n	8006cf0 <_kill_r+0x1c>
 8006cea:	682b      	ldr	r3, [r5, #0]
 8006cec:	b103      	cbz	r3, 8006cf0 <_kill_r+0x1c>
 8006cee:	6023      	str	r3, [r4, #0]
 8006cf0:	bd38      	pop	{r3, r4, r5, pc}
 8006cf2:	bf00      	nop
 8006cf4:	20000bbc 	.word	0x20000bbc

08006cf8 <_getpid_r>:
 8006cf8:	f7fa bd8a 	b.w	8001810 <_getpid>

08006cfc <_init>:
 8006cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cfe:	bf00      	nop
 8006d00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d02:	bc08      	pop	{r3}
 8006d04:	469e      	mov	lr, r3
 8006d06:	4770      	bx	lr

08006d08 <_fini>:
 8006d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d0a:	bf00      	nop
 8006d0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d0e:	bc08      	pop	{r3}
 8006d10:	469e      	mov	lr, r3
 8006d12:	4770      	bx	lr
